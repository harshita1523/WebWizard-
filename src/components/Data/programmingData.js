// src/data/programmingData.js
const programmingTopics = [
  {
      id: '0',
      title: 'HTML',
      sidebar: new Map([
        ['Introduction', 'HTML stands for Hyper Text Markup Language, which is the most widely used language on Web to develop web pages. HTML was created by Berners-Lee in late 1991 but "HTML 2.0" was the first standard HTML specification which was published in 1995. HTML 4.01 was a major version of HTML and it was published in late 1999. Though HTML 4.01 version is widely used but currently we are having HTML-5 version which is an extension to HTML 4.01, and this version was published in 2012. @ WHAT IS HTML? HTML stands for Hyper Text Markup Language.HTML is the standard markup language for creating Web pages.HTML describes the structure of a Web page.HTML consists of a series of elements.HTML elements tell the browser how to display the content.HTML elements label pieces of content such as "this is a heading", "this is a paragraph", "this is a link", etc. @**https://www.w3schools.com/images/mylearning.png** An HTML element is defined by a start tag, some content, and an end tag:<tagname> Content goes here... </tagname>The HTML element is everything from the start tag to the end tag:<h1>My First Heading</h1><p>My first paragraph.</p> @ WEB BROWSERS:The purpose of a web browser (Chrome, Edge, Firefox, Safari) is to read HTML documents and display them correctly.A browser does not display the HTML tags, but uses them to determine how to display the document.'],
        ['Basic Tags', 'In this chapter we will show some basic HTML examples.Dont worry if we use tags you have not learned about yet. @ HTML DOCUMENTS:All HTML documents must start with a document type declaration: <!DOCTYPE html>.The HTML document itself begins with <html> and ends with </html>.The visible part of the HTML document is between <body> and </body>.@ THE <!DOCTYPE> DECLARATION:The <!DOCTYPE> declaration represents the document type, and helps browsers to display web pages correctly.It must only appear once, at the top of the page (before any HTML tags).The <!DOCTYPE> declaration is not case sensitive.@ HTML HEADINGS:HTML headings are defined with the <h1> to <h6>.<h1> defines the most important heading.@ <h6> defines the least important heading. @ HTML PARAGRAPHS: HTML paragraphs are defined with the <p>tags.@ HTML LINKS: HTML links are defined with the <a> tag @ The links destination is specified in the href attribute.Attributes are used to provide additional information about HTML elements.You will learn more about attributes in a later chapter.@HTML IMAGES:Have you ever seen a Web page and wondered "HOW TO VIEW HTML SOURCE? @ Hey! How did they do that?" @ View HTML Source Code: @ Click CTRL + U in an HTML page, or right-click on the page and select "View Page Source". This will open a new tab containing the HTML source code of the page. @ Inspect an HTML Element: @ Right-click on an element (or a blank area), and choose "Inspect" to see what elements are made up of (you will see both the HTML and the CSS). You can also edit the HTML or CSS on-the-fly in the Elements or Styles panel that opens.'],
        ['Elements','An HTML element is defined by a start tag, some content, and an end tag.@HTML ELEMENTS:@The HTML element is everything from the start tag to the end tag.@<tagname>Content goes here...</tagname>@Examples of some HTML elements:@<h1>My First Heading</h1>@**https://www.w3schools.com/html/img_chrome.png**<p>My first paragraph.</p> @NESTED HTML ELEMENTS:HTML elements can be nested (this means that elements can contain other elements).All HTML documents consist of nested HTML elements.The following example contains four HTML elements (<html>, <body>, <h1> and <p>).@NEVER SKIP THE END TAG@Some HTML elements will display correctly, even if you forget the end tag.However, never rely on this! Unexpected results and errors may occur if you forget the end tag!@EMPTY HTML ELEMENTS:HTML elements with no content are called empty elements.The <br> tag defines a line break, and is an empty element without a closing tag.@HTML IS NOT CASE SENSITIVE@HTML tags are not case sensitive: <P> means the same as <p>.The HTML standard does not require lowercase tags, but W3C recommends lowercase in HTML, and demands lowercase for stricter document types like XHTML@HTML TAG REFERENCE:@  <html>     Defines the root of an HTML document @ <body>     Defines the documents body @ <h1> to <h6>Defines HTML headings.'],
        ['Attributes','HTML attributes provide additional information about HTML elements.@HTML Attributes:@ All HTML elements can have attributes.Attributes provide additional information about elements.Attributes are always specified in the start tag.Attributes usually come in name/value pairs like: name="value".@THE href ATTRIBUTE: @The <a> tag defines a hyperlink. The href attribute specifies the URL of the page the link goes to.@ THE src ATTRIBUTE: @The <img> tag is used to embed an image in an HTML page. The src attribute specifies the path to the image to be displayed.@There are two ways to specify the URL in the src attribute:@ 1. Absolute URL - Links to an external image that is hosted on another website. ".@ 2.Relative URL - Links to an image that is hosted within the website. Here, the URL does not include the domain name. If the URL begins without a slash, it will be relative to the current page. Example: src="img_girl.jpg". If the URL begins with a slash, it will be relative to the domain.Example: src="/images/img_girl.jpg".@ THE width AND height ATTRIBUTES: @The <img> tag should also contain the width and height attributes, which specify the width and height of the image (in pixels).@ THE alt ATTRIBUTE:@The required alt attribute for the <img> tag specifies an alternate text for an image, if the image for some reason cannot be displayed. This can be due to a slow connection, or an error in the src attribute, or if the user uses a screen reader.@THE style ATTRIBUTE:@The style attribute is used to add styles to an element, such as color, font, size, and more.@THE lang ATTRIBUTE:@You should always include the lang attribute inside the <html> tag, to declare the language of the Web page. This is meant to assist search engines and browsers.@Country codes can also be added to the language code in the lang attribute. So, the first two characters define the language of the HTML page, and the last two characters define the country.@THE title ATTRIBUTE:@The title attribute defines some extra information about an element.The value of the title attribute will be displayed as a tooltip when you mouse over the element.@'],
        ['Headings','HTML headings are titles or subtitles that you want to display on a webpage.@HTML HEADINGS@HTML headings are defined with the <h1> to <h6> tags.<h1> defines the most important heading. <h6> defines the least important heading.@HEADINGS ARE IMPORTANT@ Search engines use the headings to index the structure and content of your web pages.Users often skim a page by its headings. It is important to use headings to show the document structure.<h1> headings should be used for main headings, followed by <h2> headings, then the less important <h3>, and so on.@ BIGGER HEADINGS@ Each HTML heading has a default size. However, you can specify the size for any heading with the style attribute, using the CSS font-size property.'],
        ['Paragraphs','A paragraph always starts on a new line, and is usually a block of text.@HTML PARAGRAPHS@ The HTML <p> element defines a paragraph.A paragraph always starts on a new line, and browsers automatically add some white space (a margin) before and after a paragraph.@HTML DISPLAY@You cannot be sure how HTML will be displayed.Large or small screens, and resized windows will create different results.With HTML, you cannot change the display by adding extra spaces or extra lines in your HTML code.The browser will automatically remove any extra spaces and lines when the page is displayed.@HTML HORIONTAL RULES @ The <hr> tag defines a thematic break in an HTML page, and is most often displayed as a horizontal rule.The <hr> element is used to separate content (or define a change) in an HTML page. @ HTML LINE BREAKS @ The HTML <br> element defines a line break.Use <br> if you want a line break (a new line) without starting a new paragraph @'],
        ['Styles','The HTML style attribute is used to =add styles to an element, such as color, font, size, and more.@The HTML STYLE ATTRIBUTE @ Setting the style of an HTML element, can be done with the style attribute.@ BACKGROUND COLOR @The CSS background-color property defines the background color for an HTML element.@TEXT COLOR @ The CSS color property defines the text color for an HTML element.@FONTS @The CSS font-family property defines the font to be used for an HTML element@ TEXT SIZE @ The CSS font-size property defines the text size for an HTML element@TEXT ALIGNMENT@ The CSS text-align property defines the horizontal text alignment for an HTML element.'],
      ]),
      
    },
  {
    id: '1',
    title: 'CSS',
    sidebar: new Map([
      ['Introduction','WHY USE CSS?@CSS is used to define styles for your web pages, including the design, layout and variations in display for different devices and screen sizes.@CSS SOLVED A BIG PROBLEM@ HTML was NEVER intended to contain tags for formatting a web page!HTML was created to describe the content of a web page, like:<h1>This is a heading</h1>,<p>This is a paragraph.</p>.When tags like <font>, and color attributes were added to the HTML 3.2 specification, it started a nightmare for web developers. Development of large websites, where fonts and color information were added to every single page, became a long and expensive process.To solve this problem, the World Wide Web Consortium (W3C) created CSS.CSS removed the style formatting from the HTML page!@CSS SAVES A LOT OF WORK! The style definitions are normally saved in external .css files.With an external stylesheet file, you can change the look of an entire website by changing just one file!'],
      ['Syntax', 'CSS SYNTAX @ A CSS rule consists of a selector and a declaration block.@The selector points to the HTML element you want to style.The declaration block contains one or more declarations separated by semicolons.Each declaration includes a CSS property name and a value, separated by a colon.Multiple CSS declarations are separated with semicolons, and declaration blocks are surrounded by curly braces.@'],
      ['Selectors', 'A CSS selector selects the HTML element(s) you want to style.@CSS SELECTORS@CSS selectors are used to "find" (or select) the HTML elements you want to style.We can divide CSS selectors into five categories:Simple selectors (select elements based on name, id, class).Combinator selectors (select elements based on a specific relationship between them).Pseudo-class selectors (select elements based on a certain state).Pseudo-elements selectors (select and style a part of an element).Attribute selectors (select elements based on an attribute or attribute value).This page will explain the most basic CSS selectors.@THE CSS ELEMENT SELECTOR@ The element selector selects HTML elements based on the element name.@THE CSS ID SELECTOR@The id selector uses the id attribute of an HTML element to select a specific element.The id of an element is unique within a page, so the id selector is used to select one unique element!To select an element with a specific id, write a hash (#) character, followed by the id of the element.@THE CSS CLASS  SELECTOR@The class selector selects HTML elements with a specific class attribute. To select elements with a specific class, write a period (.) character, followed by the class name.@THE CSS UNIVERSAL SELECTOR@The universal selector (*) selects all HTML elements on the page.@THE CSS GROUPING SELECTOR @The grouping selector selects all the HTML elements with the same style definitions.Look at the following CSS code (the h1, h2, and p elements have the same style definitions)@It will be better to group the selectors, to minimize the code.To group selectors, separate each selector with a comma.'],
      ['Comments', 'CSS COMMENTS @ CSS comments are not displayed in the browser, but they can help document your source code.@Comments are used to explain the code, and may help when you edit the source code at a later date.Comments are ignored by browsers.A CSS comment is placed inside the <style> element, and starts with /* and ends with */.You can add comments wherever you want in the code.Comments can also span multiple lines.@HTML AND CSS COMMENTS@From the HTML tutorial, you learned that you can add comments to your HTML source by using the <!--...--> syntax.'],
      ['Colors', 'CSS COLORS:@Colors are specified using predefined color names, or RGB, HEX, HSL, RGBA, HSLA values.@CSS Color Names@In CSS, a color can be specified by using a predefined color name.CSS/HTML support 140 standard color names.@CSS BACKGROUND COLOR@You can set the background color for HTML elements@CSS TEXT COLOR@You can set the color of text.CSS BORDER COLOR @You can set the color of borders.@CSS COLOR VALUES@ In CSS, colors can also be specified using RGB values, HEX values, HSL values, RGBA values, and HSLA values.Same as color name "Tomato".'],
      ['Backgrounds', 'CSS BACKGROUNDS:@The CSS background properties are used to add background effects for elements.@In these chapters, you will learn about the following CSS background properties:@background-color,background-image,background-repeat,background-attachment,background-position,background (shorthand property).@CSS background-color@The background-color property specifies the background color of an element.@With CSS, a color is most often specified by:@ a valid color name - like "red",a HEX value - like "#ff0000",an RGB value - like "rgb(255,0,0)"@OTHER ELEMENTS@You can set the background color for any HTML elements.@OPACITY/TRANSPARENCY@ The opacity property specifies the opacity/transparency of an element. It can take a value from 0.0 - 1.0. The lower value, the more transparent.@TRANSPARENCY USING RGBA:@If you do not want to apply opacity to child elements, like in our example above, use RGBA color values. The following example sets the opacity for the background color and not the text.@You learned from our CSS Colors Chapter, that you can use RGB as a color value. In addition to RGB, you can use an RGB color value with an alpha channel (RGBA) - which specifies the opacity for a color.An RGBA color value is specified with: rgba(red, green, blue, alpha). The alpha parameter is a number between 0.0 (fully transparent) and 1.0 (fully opaque).'],
      ['Borders', 'CSS BORDERS@The CSS border properties allow you to specify the style, width, and color of an elements border.@CSS BORDER STYLE@The border-style property specifies what kind of border to display.@The following values are allowed:@dotted - Defines a dotted border,dashed - Defines a dashed border,solid - Defines a solid border,double - Defines a double border,groove - Defines a 3D grooved border,ridge - Defines a 3D ridged border,inset - Defines a 3D inset border,outset - Defines a 3D outset border,none - Defines no border,hidden - Defines a hidden border@The border-style property can have from one to four values (for the top border, right border, bottom border, and the left border).'],
    ]),
  },
  
  {
    id: '2',
    title: 'JAVASCRIPT',
    sidebar: new Map([ 
    ['Introduction','JAVASCRIPT CAN CHANGE HTML CONTENT@One of many JavaScript HTML methods is getElementById().@JavaScript can change HTML attribute values.@JavaScript can change HTML styles (CSS).Changing the style of an HTML element, is a variant of changing an HTML attribute.@JavaScript can hide HTML Eelements.Hiding HTML elements can be done by changing the display style.@JavaScript can show HTML elements.Showing hidden HTML elements can also be done by changing the display style.'],
    ['Output', 'JAVASCRIPT OUTPUT:@JAVASCRIPT DISPLAY POSSIBILITIES@JavaScript can "display" data in different ways:@Writing into an HTML element, using innerHTML,Writing into the HTML output using document.write(),Writing into an alert box, using window.alert(),Writing into the browser console, using console.log().@USING innerHTML@To access an HTML element, JavaScript can use the document.getElementById(id) method.The id attribute defines the HTML element. The innerHTML property defines the HTML content.@USING document.write()@For testing purposes, it is convenient to use document.write()@Using document.write() after an HTML document is loaded, will delete all existing HTML.@USING window.alert()@You can use an alert box to display data.@You can skip the window keyword.In JavaScript, the window object is the global scope object. This means that variables, properties, and methods by default belong to the window object. This also means that specifying the window keyword is optional.@USING console.log()@For debugging purposes, you can call the console.log() method in the browser to display data.@JAVASCRIPT PRINT@JavaScript does not have any print object or print methods.You cannot access output devices from JavaScript.The only exception is that you can call the window.print() method in the browser to print the content of the current window.'],
    ['Statements', 'JAVASCRIPT STATEMENTS:@JavaScript Programs@A computer program is a list of "instructions" to be "executed" by a computer.In a programming language, these programming instructions are called statements.A JavaScript program is a list of programming statements.@JavaScript Statements@JavaScript statements are composed of:@Values, Operators, Expressions, Keywords, and Comments.This statement tells the browser to write "Hello Dolly." inside an HTML element with id="demo"@Most JavaScript programs contain many JavaScript statements.The statements are executed, one by one, in the same order as they are written.@Semicolons@Semicolons separate JavaScript statements.Add a semicolon at the end of each executable statement.@JavaScript White Space@JavaScript ignores multiple spaces. You can add white space to your script to make it more readable.The following lines are equivalent.@JavaScript Line Length and Line Breaks@For best readability, programmers often like to avoid code lines longer than 80 characters.If a JavaScript statement does not fit on one line, the best place to break it is after an operator.@JavaScript Code Blocks@JavaScript statements can be grouped together in code blocks, inside curly brackets {...}.The purpose of code blocks is to define statements to be executed together.One place you will find statements grouped together in blocks, is in JavaScript functions.@JavaScript Keywords@JavaScript statements often start with a keyword to identify the JavaScript action to be performed.Our Reserved Words Reference lists all JavaScript keywords.'],
    ['Syntax', 'JAVASCRIPT SYNTAX@JavaScript syntax is the set of rules, how JavaScript programs are constructed.@JAVASCRIPT VALUES@The JavaScript syntax defines two types of values:@Fixed values,Variable values,Fixed values are called Literals.@JavaScript Literals@The two most important syntax rules for fixed values are:@ Numbers are written with or without decimals,Strings are text, written within double or single quotes.@JavaScript Variables@In a programming language, variables are used to store data values.JavaScript uses the keywords var, let and const to declare variables.An equal sign is used to assign values to variables.@JavaScript Operators@JavaScript uses arithmetic operators ( + - * / ) to compute values.JavaScript uses an assignment operator ( = ) to assign values to variables.JavaScript Expressions@An expression is a combination of values, variables, and operators, which computes to a value.The computation is called an evaluation.@The values can be of various types, such as numbers and strings.@For example, "John" + " " + "Doe", evaluates to "John Doe"@JavaScript Keywords@JavaScript keywords are used to identify actions to be performed.@The let keyword tells the browser to create variables.@The var keyword also tells the browser to create variables.@JavaScript Comments@Not all JavaScript statements are "executed".Code after double slashes // or between /* and */ is treated as a comment.Comments are ignored, and will not be executed.@JavaScript Identifiers / Names@ Identifiers are JavaScript names.Identifiers are used to name variables and keywords, and functions.The rules for legal names are the same in most programming languages.@A JavaScript name must begin with:@A letter (A-Z or a-z),A dollar sign ($),Or an underscore (_),Subsequent characters may be letters, digits, underscores, or dollar signs.@JavaScript is Case Sensitive@All JavaScript identifiers are case sensitive.The variables lastName and lastname, are two different variables.JavaScript does not interpret LET or Let as the keyword let.@JavaScript and Camel Case@Historically, programmers have used different ways of joining multiple words into one variable name:@Hyphens:first-name, last-name, master-card, inter-city.@Underscore:first_name, last_name, master_card, inter_city.@Upper Camel Case (Pascal Case):FirstName, LastName, MasterCard, InterCity.@Lower Camel Case:JavaScript programmers tend to use camel case that starts with a lowercase letter.'],
    ['Comments', 'JAVASCRIPT COMMENTS:@JavaScript comments can be used to explain JavaScript code, and to make it more readable.JavaScript comments can also be used to prevent execution, when testing alternative code.@Single Line Comments@Single line comments start with //.Any text between // and the end of the line will be ignored by JavaScript (will not be executed).@Multi-line Comments@Multi-line comments start with /* and end with */.Any text between /* and */ will be ignored by JavaScript.@Using Comments to Prevent Execution@Using comments to prevent execution of code is suitable for code testing.Adding // in front of a code line changes the code lines from an executable line to a comment.'],
    ['Variables', 'JAVASCRIPT VARIABLES:@Variables are Containers for Storing Data@JavaScript Variables can be declared in 4 ways:@Automatically,Using var,Using let,Using const@JavaScript Identifiers@All JavaScript variables must be identified with unique names.These unique names are called identifiers.Identifiers can be short names (like x and y) or more descriptive names (age, sum, totalVolume).The general rules for constructing names for variables (unique identifiers) are:@Names can contain letters, digits, underscores, and dollar signs,Names must begin with a letter,Names can also begin with $ and _ (but we will not use it in this tutorial),Names are case sensitive (y and Y are different variables),Reserved words (like JavaScript keywords) cannot be used as names.@The Assignment Operator@In JavaScript, the equal sign (=) is an "assignment" operator, not an "equal to" operator.@JavaScript Data Types@JavaScript variables can hold numbers like 100 and text values like "John Doe".In programming, text values are called text strings. JavaScript can handle many types of data, but for now, just think of numbers and strings.Strings are written inside double or single quotes. Numbers are written without quotes. If you put a number in quotes, it will be treated as a text string.@Declaring a JavaScript Variable@Creating a variable in JavaScript is called "declaring" a variable.You declare a JavaScript variable with the var or the let keyword.@After the declaration, the variable has no value (technically it is ).To assign a value to the variable, use the equal sign.@One Statement, Many Variables@You can declare many variables in one statement.Start the statement with let and separate the variables by comma.@Value = @In computer programs, variables are often declared without a value. The value can be something that has to be calculated, or something that will be provided later, like user input.A variable declared without a value will have the value .@Re-Declaring JavaScript Variables@If you re-declare a JavaScript variable declared with var, it will not lose its value.@JavaScript Arithmetic@As with algebra, you can do arithmetic with JavaScript variables, using operators like = and +.@JavaScript Dollar Sign $@ Since JavaScript treats a dollar sign as a letter, identifiers  containing $ are valid variable names.@JavaScript Underscore (_)@Since JavaScript treats underscore as a letter, identifiers containing _ are valid variable names.'],
    ['Let', 'JAVASCRIPT Let:@The let keyword was introduced in ES6 (2015).Variables defined with let cannot be Redeclared.Variables defined with let must be Declared before use.Variables defined with let have Block Scope.@Cannot be Redeclared@Variables defined with let can not be redeclared.You can not accidentally redeclare a variable declared with let.@Block Scope@Before ES6 (2015), JavaScript had Global Scope and Function Scope.ES6 introduced two important new JavaScript keywords: let and const.These two keywords provide Block Scope in JavaScript.Variables declared inside a { } block cannot be accessed from outside the block.@Variables declared with the var keyword can NOT have block scope.Variables declared inside a { } block can be accessed from outside the block.@Redeclaring Variables@Redeclaring a variable using the var keyword can impose problems.Redeclaring a variable inside a block will also redeclare the variable outside the block@Redeclaring a variable using the let keyword can solve this problem.Redeclaring a variable inside a block will not redeclare the variable outside the block.@What is Good?@let and const have block scope,let and const can not be redeclared,let and const must be declared before use,let and const does not bind to this,let and const are not hoisted.@What is Not Good?@var does not have to be declared,var is hoisted,var binds to this.@Redeclaring@Redeclaring a JavaScript variable with var is allowed anywhere in a program@Let Hoisting@Variables defined with var are hoisted to the top and can be initialized at any time. Meaning: You can use the variable before it is declared.'],
    ['Const', 'JAVASCRIPT Const:@The const keyword was introduced in ES6 (2015).Variables defined with const cannot be Redeclared.Variables defined with const cannot be Reassigned.Variables defined with const have Block Scope.@Cannot be Reassigned@A const variable cannot be reassigned.@Must be Assigned@JavaScript const variables must be assigned a value when they are declared.@Constant Objects and Arrays@The keyword const is a little misleading.It does not define a constant value. It defines a constant reference to a value.Because of this you can NOT:@Reassign a constant value,Reassign a constant array,Reassign a constant object.@But you CAN:@Change the elements of constant array,Change the properties of constant object.@Constant Arrays@You can change the elements of a constant array.@Constant Objects@You can change the properties of a constant object.@What is Good?@let and const have block scope,let and const can not be redeclared,let and const must be declared before use,let and const does not bind to this,let and const are not hoisted.@What is Not Good?@var does not have to be declared,var is hoisted,var binds to this.@Block Scope@Declaring a variable with const is similar to let when it comes to Block Scope.@Redeclaring@Redeclaring a JavaScript var variable is allowed anywhere in a program.@Hoisting@Variables defined with var are hoisted to the top and can be initialized at any time. Meaning: You can use the variable before it is declared.'],
    ]),
  },

  {
    id: '3',
    title: 'C',
    sidebar: new Map([
      ['Introduction','Introduction to the C Programming Language@C is a versatile and powerful programming language that has stood the test of time. Developed in the early 1970s by Dennis Ritchie at Bell Labs, C was created to provide a system programming language that could efficiently utilize the capabilities of computer hardware while maintaining portability across different platforms. Over the decades, C has evolved and become the foundation for numerous other programming languages, making it a fundamental skill for anyone aspiring to become a proficient programmer.@C is often heralded for its simplicity, efficiency, and flexibility. It is known as a "high-level" programming language, which means that it is designed to be relatively easy to read and write, making it an excellent choice for beginners. Yet, it also offers "low-level" features, allowing direct manipulation of computer memory and hardware when necessary, making it suitable for systems programming and applications where performance is critical.@Key features of the C language include:@1. Portability: C programs can be written once and run on various platforms with minimal modifications. This portability makes it a valuable choice for developing software that needs to work across different operating systems and hardware.@2. Efficiency: C is a compiled language, which means that it is translated into machine code for the specific computer it is running on. This results in highly efficient code, making it ideal for performance-critical applications.@3. Modularity: C allows you to break your programs into smaller, reusable modules through functions and libraries, promoting a clean and organized code structure.@4. Versatility: C is widely used for system programming, embedded systems, desktop applications, and more.Its the language behind many operating systems (like Unix and Linux) and has a strong presence in fields like robotics, game development, and scientific computing.@5. Strong Community: C has a dedicated and vibrant community that continues to develop libraries, tools, and resources, making it easier for developers to create software solutions efficiently.'],
      ['Syntax', 'Syntax of the C Programming Language@C is known for its clean and straightforward syntax, making it a great language for both beginners and experienced programmers. Lets delve into the fundamental elements of Cs syntax:@1. Statements and Semicolons:@C programs are composed of statements, and each statement must end with a semicolon (;).@2. Curly Braces:@Curly braces {} are used to group multiple statements into a block.Blocks are often seen in functions, loops, and conditional statements.@3. Comments:@C supports both single-line and multi-line comments. Single-line comments start with //, while multi-line comments are enclosed within /* */. Comments are ignored by the compiler and are used to document your code.@4. Data Types:@C has various data types for integers, floating-point numbers, characters, and more. Common data types include int, float, char, and double.@5. Variables:@Variables are used to store data. They must be declared before use, specifying the data type.@6. Functions:@Functions are blocks of code that perform a specific task. A C program typically starts executing from the main function. You can define your functions to break down the code into manageable pieces.@7. Control Structures:@C provides various control structures, including if, else, while, for, and switch, to manage the flow of your program.@8. Operators:@C supports a wide range of operators for arithmetic, comparison, logical operations, and more.@9. Arrays:@Arrays allow you to store multiple values of the same data type under one variable name.@10. Pointers:@Pointers are variables that store memory addresses. They are a powerful feature of C, allowing you to work with memory directly.@These are the basic building blocks of Cs syntax. As you gain experience, youll explore more advanced features and libraries, enabling you to create complex and efficient programs. Understanding the syntax is the first step towards becoming proficient in the C programming language.'],
      ['Output', 'Certainly! In C, you can use various functions to produce output, with the most commonly used one being printf. Below is an explanation of how to output content in C using printf, as well as a few other useful functions for different purposes:@Output in C Programming@C provides several functions for producing output to the console or other devices. The most frequently used output function is printf, which allows you to display text, variables, and formatted data.@Other important output functions in C include:@1.puts:@ Its used to output a string with a newline character. It is simpler than printf for printing text.@2. putchar:@ This function is used to output a single character.@3. fputs: @This function allows you to output a string to a specified file stream. Its particularly useful for file I/O.@These are some of the primary functions for producing output in C. You can create formatted and custom output by combining these functions with appropriate format strings and variables, making C a versatile language for displaying information to users or saving it to files.'],
      ['Comments', 'Certainly! Comments in C are essential for code documentation and explanation. Heres a guide on how to use comments in C:@Comments in C Programming@Comments in C are non-executable text that you can include in your code to provide explanations, documentation, or to temporarily disable certain lines. Comments are ignored by the compiler and exist solely for the benefit of developers, helping them understand the code and its functionality.@C supports two types of comments:@1. Single-Line Comments:@Single-line comments are used to add explanations or notes to a single line of code. They start with // and continue until the end of the line.@2. Multi-Line Comments:@Multi-line comments, also known as block comments, allow you to enclose multiple lines of text within /* and */. This is useful for adding detailed explanations or temporarily excluding a block of code.@Comments are an integral part of coding best practices. Heres how you can effectively use comments in your C code:@1. Document Your Code:@Use comments to explain complex or non-obvious sections of code.Describe the purpose of functions, variables, and data structures.Include comments at the beginning of your programs to provide an overview.@ 2. Debugging and Testing:@Temporarily comment out sections of code to identify and isolate issues.Add comments near problematic code to document the debugging process and solutions.@3. Maintainability:@When making changes to your code, update or remove outdated comments to keep the documentation accurate.Use comments to provide information for others who may need to maintain or collaborate on your code.@4. Conventions:@Follow a consistent commenting style. For example, use a specific format for function headers, such as describing the parameters and return value.Adhere to any code commenting conventions used within your development team or project.Remember that while comments are incredibly helpful for understanding code, its also essential to write clear and self-explanatory code whenever possible. Well-structured code with meaningful variable and function names can often reduce the need for excessive comments.'],
      ['Variables', 'Certainly! Heres an explanation of variables in the C programming language:@Variables in C Programming@Variables are one of the fundamental building blocks in C programming. They are used to store and manipulate data within a program. In C, you need to declare a variable before using it. Heres what you need to know about variables:@1. Declaration:@To declare a variable, you specify its data type followed by a unique name.@ 2. Initialization:@You can optionally assign an initial value to a variable at the time of declaration.@3. Data Types:@C supports various data types, including:@int: for integers (e.g., 42),float: for floating-point numbers (e.g. 3.14),double: for double-precision floating-point numbers (e.g., 3.14159265359),char: for characters (e.g., A), bool (from C99 and C11): for boolean values (e.g., true or false),and more...@4. Variable Names:@Variable names must be unique within the same scope, and they should adhere to certain rules:@Can only contain letters, digits, and underscores,Must start with a letter or underscore,Case-sensitive (e.g., myVariable and myvariable are considered different),Should not be C keywords (reserved words used by the language).@5. Scope:@Variables have a defined scope, which refers to the part of the program where the variable is accessible. Variables declared within a function, for instance, are typically only available within that function. Global variables, declared outside any function, are accessible throughout the entire program.@6. Assignment:@You can change the value of a variable by assigning it a new value.@7. Constants:@You can declare constants using the const keyword. Constants are variables with values that cannot be changed after initialization.@8. Storage Classes:@In C, variables can have different storage classes, which determine their storage duration, scope, and linkage. The most common storage classes are auto, static, register, and extern.@ Understanding how to work with variables is crucial for programming in C. Variables allow you to store and manipulate data, making them a fundamental part of any C program. They come in various data types and can be used for a wide range of applications, from basic number storage to complex data structures.' ],
      ['Data Types', 'Data Types in C@In the C programming language, data types are used to define the type of data that a variable can hold. C supports a variety of data types, which can be broadly categorized into the following groups:@Basic Data Types:@ int: Used to store integer values. The size of an int varies depending on the platform, but its typically 2 or 4 bytes,float: Used to store single-precision floating-point numbers, double: Used to store double-precision floating-point numbers, char: Used to store single characters, such as letters, digits,symbols,@Derived Data Types:@Array: A collection of elements of the same data type stored in contiguous memory locations. Arrays have a fixed size.@Pointer: A variable that stores the memory address of another variable. Pointers are used for dynamic memory allocation and manipulation.@Structure (struct): A user-defined data type that groups together variables of different data types under a single name. Each variable within a structure is called a member or field.@Union: Similar to a struct, but it can hold only one value at a time, despite having multiple members. Unions are often used to save memory when different members are not needed simultaneously.@Enum (enumeration): A user-defined data type that consists of a set of named integer constants. Enums provide a way to create symbolic names for values.@Modifiers:signed and unsigned: These modifiers can be applied to integer data types like int and char to specify whether the variable can hold both positive and negative values or only non-negative values.@short and long: These modifiers can be applied to integer data types to specify the range of values they can hold. For example, short int and long int.@_Bool: A Boolean data type introduced in the C99 standard to represent true or false values. It can have the values 0 (false) or 1 (true).@Complex: Introduced in the C99 standard to represent complex numbers. It is used with the _Imaginary modifier.@Typedef:typedef is a keyword used to create user-defined data types, which provide an alias for an existing data type. This is often used to improve code readability and maintainability.@Keep in mind that data type sizes and behavior may vary depending on the compiler and platform you are using, but the C standard defines their minimum requirements.'], // Add more sidebar content as needed
    ]),
  },
  {
    id: '4',
    title: 'C++',
    sidebar: new Map([
      ['Introduction','C++ Introduction@C++ is a versatile and powerful programming language that was developed as an extension of the C programming language. It was created by Bjarne Stroustrup in the early 1980s and has since become a widely used language in various application domains, including systems programming, game development, desktop software, and more. C++ is known for its performance, flexibility, and extensive standard library.@Key Features of C++:@Object-Oriented: C++ is an object-oriented programming (OOP) language, which means it supports the concepts of classes and objects. OOP allows you to structure your code around real-world entities and their interactions, making it easier to design and maintain complex systems.@C Compatibility: C++ is backward compatible with C. This means that you can include C code in a C++ program, and C++ can use C libraries. This compatibility allows C++ to leverage existing C codebases and libraries.@Strongly Typed: C++ is a statically typed language, which means that data types must be declared before they are used. This enforces type safety, catching many errors at compile-time rather than runtime.@Performance: C++ is known for its efficiency and high performance. It offers low-level memory control, making it suitable for systems programming, embedded systems, and applications where performance is critical.@Standard Template Library (STL): C++ includes a rich standard library, often referred to as the Standard Template Library (STL). The STL provides a collection of reusable data structures and algorithms, such as vectors, lists, and maps, which can significantly simplify development.@Multiple Paradigms: C++ supports multiple programming paradigms, including procedural, object-oriented, and generic programming. This flexibility allows developers to choose the best approach for their specific project.@Portability: C++ programs can be compiled and run on various platforms, making it a cross-platform language.'],
      ['Syntax', 'Certainly! Syntax in the C++ programming language refers to the set of rules and conventions that dictate how C++ code should be structured and written. Following the correct syntax is crucial for the compiler to understand and translate your code into machine-executable instructions. Here are some key aspects of C++ syntax:@1. Statements and Expressions:@Statements: In C++, a statement is a complete instruction that performs an action. Statements are usually terminated with a semicolon (;).@Expressions:@ Expressions are combinations of values, operators, and variables that can be evaluated to a single value.@2. Comments:@C++ supports single-line comments using // and multi-line comments using /* ... */. Comments are used to provide explanations and notes within your code, and they are ignored by the compiler.@3. Variables and Data Types:@C++ requires the declaration of variables before they are used. Variables must have a valid data type, a name, and can be optionally initialized. @4. Control Structures:@C++ provides control structures like if, else, while, for, and switch to control the flow of your program. These structures have specific syntax rules for conditionals and loops.@5. Functions:@Functions in C++ have a well-defined syntax, including the function signature, return type, parameter list, and function body. Functions must be declared before they are used.@6. Classes and Objects:@C++ supports object-oriented programming with classes and objects. Classes define the structure of objects and their member functions. Objects are instances of classes.@7. Scope and Blocks:@C++ uses curly braces {} to define blocks of code and determine the scope of variables. Variables declared within a block are only accessible within that block.@8. Preprocessor Directives:@C++ uses preprocessor directives that start with a # symbol. These directives are processed before the code is compiled and can be used for tasks like including header files and defining constants.'],
      ['Output', 'In C++, output refers to the process of displaying data or information to the standard output stream, typically the console or terminal. C++ provides several ways to produce output, and the most commonly used mechanism is through the use of the iostream library, which includes the iostream header file and the cout object for output.@Heres an overview of how to use output in C++:@1. Including the iostream Header:To use the cout object and other output-related functionality, you need to include the <iostream> header at the beginning of your C++ program. This is typically done with a preprocessor directive.@2. Output Using cout:@The cout object is part of the C++ Standard Library and is used for output. It is associated with the standard output stream, which is usually the console or terminal. You can use << (insertion) operator to send data to cout.@3. Formatting Output:@You can format the output using cout. For instance, you can set the precision for floating-point numbers, specify field width, or use manipulators from the <iomanip> header to control the formatting.'],
      ['Comments', 'Comments in C++ are not executed by the compiler; they are meant for human readers and serve as explanations, notes, and documentation within the code. Comments help improve code readability and maintainability. C++ supports two main types of comments: single-line comments and multi-line comments.@Single-Line Comments:@Single-line comments start with // and continue to the end of the line. Anything written after // on that line is considered a comment and is not processed by the compiler.@Multi-Line Comments:@Multi-line comments, also known as block comments, start with /* and end with */. Everything between /* and */ is considered a comment, including line breaks. Multi-line comments are often used for larger explanations or for temporarily "commenting out" blocks of code.@Comment Best Practices:@Use Comments Sparingly: Comments should be used to explain complex or non-obvious code, not to state the obvious. Well-written code is often self-explanatory,Keep Comments Up to Date: If you modify code, remember to update the associated comments. Outdated comments can be misleading,Avoid Nested Comments: Nesting comments is generally not allowed in C++. If you need to comment out code that already contains comments, consider using a different commenting style for the outer comment,Comment at the Right Level: Comments should be at a level of detail that matches the surrounding code. For example, you may use a comment to explain the purpose of a function or to clarify the meaning of a complex algorithm,Avoid Overcommenting: Dont overuse comments to compensate for unclear code. Instead, strive to write clear and self-explanatory code. Good variable and function names can often make comments unnecessary.@Use Comments for Legal and Licensing Information: Its common to include copyright, licensing, and other legal information in comments at the beginning of source code files.' ],
      ['Variables', 'In C++, variables are fundamental elements used to store and manipulate data. They serve as named memory locations that hold values with specific data types. Heres a comprehensive overview of variables in C++:@Declaring Variables:@In C++, a variable must be declared before it is used. Variable declarations consist of a data type and a name for the variable.@Initializing Variables:@Variables can be initialized at the time of declaration, which means assigning an initial value to them.@Data Types:@C++ supports various data types for different kinds of data:@int: Used for integers, e.g., 42, -10, 0,double: Used for double-precision floating-point numbers, e.g., 3.14, -0.007,float: Used for single-precision floating-point numbers,char: Used for single characters, e.g., A, 9, $,bool: Used for boolean values, true or false,string: Used for text or strings of characters, e.g., "Hello, World!",User-Defined Data Types: You can create your own data types using classes and structures.@Variable Names:Variable names must begin with a letter (a-z, A-Z) or an underscore (_),Variable names can contain letters, numbers, and underscores,Variable names are case-sensitive, so "age" and "Age" are treated as different variables,Its best practice to use meaningful names for variables that indicate their purpose.@Scope of Variables:@Variables have a scope, which defines where they are accessible within the code.The scope of a variable depends on where it is declared.'],
      ['Data Types', 'In C++, data types are used to define the type of data that a variable can hold. C++ provides a wide range of data types to accommodate various types of data, from integers and floating-point numbers to characters and user-defined data types. Heres an overview of common data types in C++:@1. Fundamental Data Types:@C++ has several fundamental or built-in data types. These include:@int: Used to store integer values. The size of an int can vary based on the platform, but its typically 4 bytes,float: Used to store single-precision floating-point numbers (decimal numbers). It usually occupies 4 bytes,double: Used to store double-precision floating-point numbers, which offer greater precision than float. It usually occupies 8 bytes,char: Used to store single characters, such as letters, digits, or special symbols. It typically occupies 1 byte,bool: Used to store Boolean values, which can be either true or false.@2. Modifiers:@C++ allows you to modify the fundamental data types using various modifiers:@unsigned: Used with integer data types (e.g., unsigned int) to represent only non-negative values,short and long: These are used with integer data types to specify their range. For example, short int and long int,signed: By default, integer types are signed, meaning they can represent both positive and negative values. You can use signed explicitly for clarity.@3. Enumeration (enum):@Enumerations are user-defined data types that consist of a finite set of named integer constants. Enums are often used to represent a set of distinct values or options.@4. Character Types:@char: Represents single characters like A or 5,wchar_t: Represents wide characters, used in internationalization and Unicode support,char16_t and char32_t: Used for 16-bit and 32-bit characters, especially for Unicode support@5. User-Defined Data Types:In C++, you can define your own data types using classes and structures. These user-defined types can include a combination of fundamental data types, making them very flexible.@6. Type Inference (auto),C++11 introduced the auto keyword, which allows the compiler to automatically deduce the data type of a variable based on its initialization value.@7. Constant Data Types:const: The const keyword is used to declare constants, which are values that cannot be changed after being initialized.'],
      // Add more sidebar content as needed
    ]),
  },
  {
    id: '5',
    title: 'C#',
    sidebar: new Map([
      ['Introduction','C# Introduction@C# (pronounced "C-sharp") is a modern, object-oriented programming language developed by Microsoft within its .NET framework. It was created by Anders Hejlsberg and introduced in the early 2000s. C# is designed to be simple, efficient, and safe, making it suitable for a wide range of application development, including Windows desktop applications, web applications, mobile apps, and game development.@Key Features of C#:@Simple and Readable: C# is known for its straightforward syntax, which makes it easy to read and write. It emphasizes readability and reduces the potential for coding errors.@Object-Oriented: C# is an object-oriented language, which means it uses classes and objects to model real-world entities and their interactions. This approach promotes code reusability and maintainability.@Type-Safe: C# is a strongly-typed language, which means variables must have a specific data type. This type safety helps catch many errors at compile-time rather than runtime.@Automatic Memory Management: C# uses a garbage collector to automatically manage memory, making it easier to write code without worrying about memory leaks and manual memory management.@Rich Standard Library: C# comes with a comprehensive standard library called the .NET Framework, which provides a wide range of pre-built classes and functions for various tasks, from file I/O to database access.@Cross-Platform Development: While C# was originally associated with Windows development, Microsoft has expanded its reach by introducing .NET Core and later .NET 5, which enable cross-platform development. The latest version, .NET 6, continues to offer cross-platform capabilities.@Language Features: C# includes modern language features such as lambda expressions, asynchronous programming with async and await, and LINQ (Language-Integrated Query) for working with data.@Windows Integration: C# offers seamless integration with Windows features and services, making it a popular choice for developing Windows applications.@Ecosystem: C# has a strong developer community and a rich ecosystem of tools and third-party libraries, making it suitable for various application domains, including web development, game development (with Unity), and cloud services.'],
      ['Syntax', 'In C#, the syntax refers to the set of rules and conventions that dictate how C# code should be structured and written. Proper adherence to C# syntax is essential for creating valid and maintainable programs. Heres an overview of key elements and rules related to C# syntax:@1. Case Sensitivity:@C# is case-sensitive, meaning that it distinguishes between uppercase and lowercase letters in variable names, class names, and other identifiers. For example, myVariable and myvariable are treated as different identifiers.@2. Statements and Blocks:@In C#, code is organized into statements, and blocks group multiple statements. Statements are typically terminated with a semicolon (;). Blocks are enclosed in curly braces {}.@3. Comments:@C# supports single-line comments, which start with //, and multi-line comments enclosed between /* and */. Comments are used for documentation and explanations and are ignored by the compiler.@4. Data Types:@C# provides a wide range of data types to represent different kinds of data, such as int, double, string, and more. Data types are used to declare variables and function parameters.@5. Variables and Declarations:@Variables are declared with a data type, followed by a name. C# supports both local variables (within methods) and class-level variables (fields). Variables must be declared before use.@6. Operators:@C# supports various operators for performing mathematical and logical operations, such as +, -, *, /, ==, !=, &&, and ||.@ 7. Conditional Statements:@C# provides conditional statements like if, else if, and else for making decisions in your code. These statements are used to execute code blocks based on specified conditions.'],
      ['Comments','In C#, comments are used to add explanatory notes and documentation within your code. They are ignored by the compiler and have no effect on the programs functionality. Comments are essential for improving code readability, making it easier for developers (including yourself) to understand the codes purpose and logic. There are two main types of comments in C#: single-line comments and multi-line comments.1. Single-Line Comments:Single-line comments are used to add comments on a single line. They begin with a double forward slash (//) and continue until the end of the line. Any text following // on the same line is treated as a comment and is not executed by the compiler.@In C#, comments are used to add explanatory notes and documentation within your code. They are ignored by the compiler and have no effect on the programs functionality. Comments are essential for improving code readability, making it easier for developers (including yourself) to understand the codes purpose and logic. There are two main types of comments in C#: single-line comments and multi-line comments.1. Single-Line Comments:Single-line comments are used to add comments on a single line. They begin with a double forward slash (//) and continue until the end of the line. Any text following // on the same line is treated as a comment and is not executed by the compiler.@2. Multi-Line Comments:@Multi-line comments, also known as block comments, are used for adding comments that span multiple lines. They are enclosed within /* to start the comment and */ to end it. Everything between these delimiters is considered a comment and is not executed by the compiler.@3. XML Documentation Comments:@ C# allows you to add XML documentation comments to your code. These comments are used by documentation generation tools to produce documentation for your code. XML documentation comments begin with ///, and you provide structured information about your code within them. These comments are used for generating API documentation.'],
      ['Output', 'In C#, output refers to the process of displaying data, results, or information to the user, typically through the console or other output devices. C# provides various ways to produce output to the console, files, or other output streams. The most commonly used method for simple output is via the Console class. Heres an overview of how to perform output in C#:@1. Output to the Console:@The Console class in C# provides methods to output text and data to the console. This is useful for displaying information to the user when running a console application.@Console.Write(): Outputs text without a newline character, allowing you to continue writing on the same line.@Formatting Output: You can use placeholders and format specifiers to format the output, similar to using placeholders in strings. The String.Format method and interpolated strings ($"") are commonly used for this purpose.@2. Output to Files:@You can write data to files using the StreamWriter class, which allows you to create, open, and write to text files. Heres a basic example of writing to a text file.@3. Output in Windows Forms and WPF:@For graphical user interface (GUI) applications built with Windows Forms or Windows Presentation Foundation (WPF), output is typically displayed in controls like labels, text boxes, or rich text boxes.In Windows Forms, you might use a Label control or set the text property of a TextBox.In WPF, you can use the TextBlock control for simple text output.@4. Debug Output:@When developing and debugging C# applications, you can use the System.Diagnostics.Debug class for writing debug output. This output is typically used during development and is not visible to end-users.'],
      ['Variables','In C#, a variable is a named storage location used to store and manipulate data. Variables are fundamental to programming and are essential for working with different types of data in your C# applications. Heres an overview of how variables work in C#:@Declaring Variables:@In C#, variables must be declared before they can be used. A variable declaration specifies the variables data type and name.@Initializing Variables:@Variables can be initialized at the time of declaration, which means assigning an initial value to them.@Data Types:@C# provides various data types for different types of data, such as integers, floating-point numbers, characters, and more. Common data types in C# include.'],
      ['Data Types', 'In C#, data types define the type and size of data that can be stored in variables and objects. C# is a statically typed language, which means that you must specify the data type of a variable when declaring it. Heres an overview of common data types in C#:@1. Integral Data Types:@These data types are used to represent whole numbers, both positive and negative.int: Represents 32-bit signed integers. The range of values is from -2,147,483,648 to 2,147,483,647.@long: Represents 64-bit signed integers. The range of values is from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807.@short: Represents 16-bit signed integers. The range of values is from -32,768 to 32,767.@byte: Represents 8-bit unsigned integers. The range of values is from 0 to 255.@2. Floating-Point Data Types:@ These data types are used to represent decimal numbers with fractional parts,float: Represents single-precision floating-point numbers. It is accurate for values with up to 7 decimal places.@3. Character Data Type:@char: Represents a single 16-bit Unicode character.@4. Boolean Data Type:@bool: Represents a Boolean value, which can be true or false.@5. String Data Type:@string: Represents a sequence of characters. It is used for text and is one of the most commonly used data types in C#.@6. User-Defined Data Types:@ In addition to the built-in data types, you can create your own data types by defining classes and structures.@7. Enumeration Data Type:@enum: Represents a set of named constants. It is a user-defined data type used to assign names to integral constants.@8. Null Data Type:@null: Represents a special value indicating that a variable does not reference any object. This is often used with reference types, such as objects and strings.']
      
    ]),
  },
  {
    id: '6',
    title: 'JAVA',
    sidebar: new Map([
      ['Introduction','Introduction to Java@Java is a high-level, versatile, and widely-used programming language known for its platform independence, security features, and extensive standard libraries. Developed by James Gosling and his team at Sun Microsystems in the mid-1990s, Java has become a key player in the software development industry and is a prominent language for building various types of applications. Here is an overview of Javas key features and characteristics:@1. Platform Independence:@Java is known for its "Write Once, Run Anywhere" capability. Java programs can be compiled into bytecode, which can run on any platform that has a Java Virtual Machine (JVM). This portability makes Java ideal for creating cross-platform applications.@2. Object-Oriented:@Java is a fully object-oriented programming language, which means that it follows the object-oriented paradigm closely. It allows you to model real-world objects using classes and create objects based on those classes. Object-oriented programming in Java promotes code reusability and modularity.@3. Robust and Secure:@ Java is designed to be a robust and secure language. It includes features like automatic memory management (garbage collection) to prevent memory leaks, exception handling to handle errors gracefully, and strong type checking to catch type-related errors at compile-time.@4. Rich Standard Library:@Java comes with an extensive standard library known as the Java Standard Library (Java API). This library provides pre-built classes and methods for various common tasks, such as input/output, data manipulation, networking, and more. It simplifies application development by reducing the need to write low-level code from scratch.@5. Multi-Threaded:@Java supports multi-threading, allowing developers to create applications that can execute multiple threads concurrently. This feature is essential for developing high-performance and responsive applications.'],
      ['Syntax', 'The syntax of the Java programming language is the set of rules and conventions that dictate how Java code should be written and structured. Adhering to Java syntax is essential for creating valid and maintainable programs. Heres an overview of key elements and rules related to Java syntax:@1. Case Sensitivity:@Java is a case-sensitive language, which means it distinguishes between uppercase and lowercase letters. Variable names, class names, and other identifiers must match the case exactly.@2. Statements and Blocks:@In Java, code is organized into statements, and blocks group multiple statements. Statements are typically terminated with a semicolon (;).@3. Comments:@Java supports single-line comments, which start with //, and multi-line comments enclosed between /* and */. Comments are used for documentation and explanations and are ignored by the compiler.@4. Data Types:@Java provides a wide range of data types to represent different kinds of data. Common data types include:@int: Used for integers, double: Used for double-precision floating-point numbers,char: Used for single characters,boolean: Used for Boolean values (true or false),String: Used for text or strings of characters.@5. Variables and Declarations:@Variables are declared with a data type, followed by a name. Variables must be declared before use.@6. Operators:@Java supports various operators for performing mathematical and logical operations, such as +, -, *, /, ==, !=, &&, and ||.@7. Conditional Statements:@Java provides conditional statements like if, else if, and else for making decisions in your code. These statements are used to execute code blocks based on specified conditions.@8. Loops:@Java offers several loop structures, including for, while, and do-while, to control the flow of your program by repeating code execution.@9. Methods and Functions:@Methods are defined with a return type, followed by a name and a parameter list. The void keyword is used for methods that dont return a value.'],
      ['Output', 'In Java, output refers to the process of displaying data, results, or information to the user, typically through the console, files, or graphical user interfaces (GUIs). Java provides various methods and classes to handle different types of output. Here is an overview of how to perform output in Java:@1. Output to the Console:@The System.out object and its println method are commonly used for output to the console in Java. The println method prints text or data followed by a newline character, moving to the next line. The print method is also available for printing without a newline.@2. Output Formatting:@You can format output in Java using the printf method, which allows you to specify format specifiers similar to the printf function in C.@3. Output to Files:@In Java, you can write data to files using classes like FileOutputStream, BufferedWriter, and PrintWriter. This is often used for writing logs, reports, or configuration files.@4. GUI Output:@or graphical user interface (GUI) applications in Java, you can use various GUI components to display output to the user. These components can include labels, text fields, text areas, and more, depending on the framework or library used (e.g., Swing or JavaFX).@5. Debugging Output:@During development, Java developers often use the System.out.println statement to print debug information to the console. This can help trace program execution and identify issues.@6. Logging Frameworks:@In more complex applications, developers may use logging frameworks like log4j or the built-in Java Logging API (java.util.logging) to manage and record log messages, which can be useful for debugging and monitoring.'],
      ['Comments', 'In Java, comments are used to add explanatory notes, documentation, and explanations within your code. Comments are ignored by the compiler and have no effect on the programs functionality. They are essential for improving code readability and understanding, both for yourself and other developers who may work on the code. Java supports two main types of comments: single-line comments and multi-line comments.@1. Single-Line Comments:@Single-line comments are used to add comments on a single line. They start with // and continue until the end of the line. Any text following // on the same line is treated as a comment and is not executed by the compiler.@2. Multi-Line Comments:@ Multi-line comments, also known as block comments, are used for adding comments that span multiple lines. They are enclosed within /* to start the comment and */ to end it. Everything between these delimiters is considered a comment and is not executed by the compiler.'],
      ['Variables', 'In Java, a variable is a named storage location used to store and manipulate data. Variables are fundamental to programming and are essential for working with different types of data in your Java applications. Heres an overview of how variables work in Java:@Declaring Variables:@In Java, variables must be declared before they can be used. A variable declaration specifies the variables data type and name.@Initializing Variables:@Variables can be initialized at the time of declaration, which means assigning an initial value to them.@Data Types:@Java provides a wide range of data types to represent different kinds of data, such as integers, floating-point numbers, characters, and more. Common data types in Java include:@int: Used for integers, e.g., 42, -10, 0,double: Used for double-precision floating-point numbers, e.g., 3.14, -0.007,char: Used for single characters, e.g., A, 9, $,boolean: Used for Boolean values, true or false,String: Used for text or strings of characters, e.g., "Hello, World!",User-Defined Data Types: You can create your own data types using classes and structures.@Variable Names:@Variable names must begin with a letter (a-z, A-Z) or an underscore (_),Variable names can contain letters, numbers, and underscores,Variable names are case-sensitive, so "age" and "Age" are treated as different variables.Its best practice to use meaningful names for variables that indicate their purpose.@Scope of Variables:@Variables have a scope, which defines where they are accessible within the code. The scope of a variable depends on where it is declared.' ],
      ['Data Types', 'In Java, data types are used to specify the type of data that a variable can hold. Java is a statically-typed language, which means that you must declare the data type of a variable before you can use it. Java provides a rich set of data types to cater to different types of data and their varying requirements. Here are some of the most commonly used data types in Java:@1. Primitive Data Types:@Primitive data types represent simple values and are not objects. They have a fixed size in memory.@byte: 8-bit signed integer. Range: -128 to 127,short: 16-bit signed integer. Range: -32,768 to 32,767,int: 32-bit signed integer. Range: -2^31 to 2^31-1,long: 64-bit signed integer. Range: -2^63 to 2^63-1,float: 32-bit floating-point number. Used for decimals with limited precision,double: 64-bit double-precision floating-point number. Used for decimals with higher precision.char: 16-bit Unicode character,boolean: Represents either true or false.@2. Reference Data Types:@Reference data types are used to store references (memory addresses) to objects, and they include:@Object: The root class for all Java classes. All classes in Java are derived from this class.@String: Represents a sequence of characters and is one of the most commonly used reference data types in Java.User-Defined Classes: You can create your own classes and use them as reference data types.@ 3. Arrays:@ Arrays are collections of elements, all of the same data type, accessed using an index.'],
      // Add more sidebar content as needed
    ]),
  },
  {
    id: '7',
      title: 'PYTHON',
      sidebar: new Map([
        ['Introduction', 'What is Python?@ Python is a popular programming language. It was created by Guido van Rossum, and released in 1991.@ It is used for:@web development (server-side),@software development,@mathematics,@system scripting.What can Python do?@Python can be used on a server to create web applications.@Python can be used alongside software to create workflows.@Python can connect to database systems. It can also read and modify files.@Python can be used to handle big data and perform complex mathematics.@Python can be used for rapid prototyping, or for production-ready software development.'],
        ['Python Syntax', 'Execute Python Syntax@As we learned in the previous page, Python syntax can be executed by writing directly in the Command Line:@>>> print("Hello, World!")@Hello, World!@Python Indentation@Indentation refers to the spaces at the beginning of a code line.@Where in other programming languages the indentation in code is for readability only, the indentation in Python is very important.@Python uses indentation to indicate a block of code.@Example@Print the data type of the variable x:@x = 5@print(type(x))'],
        ['Python Data-types' , 'Built-in Data Types@In programming, data type is an important concept.@Variables can store data of different types, and different types can do different things.@Python has the following data types built-in by default, in these categories:@Text Type: 	str@Numeric Types: 	int, float, complex@Sequence Types: 	list, tuple, range@Mapping Type: 	dict@Set Types: 	set, frozenset@Boolean Type: 	bool@Binary Types: 	bytes, bytearray, memoryview@None Type: 	NoneType'],
        ['Inheritance', 'Python Inheritance@Inheritance allows us to define a class that inherits all the methods and properties from another class@Parent class is the class being inherited from, also called base class.@Child class is the class that inherits from another class, also called derived class.Create a Parent Class@Any class can be a parent class, so the syntax is the same as creating any other class:@Example@Create a class named Person, with firstname and lastname properties, and a printname method:@class Person:@def _init_(self, fname, lname):@self.firstname = fname@self.lastname = lname@ def printname(self):@print(self.firstname, self.lastname)@#Use the Person class to create an object, and then execute the printname method:@x = Person("John", "Doe")@x.printname() ' ],
        ['Polymorphism','Polymorphism in Python:Polymorphism is one of the fundamental concepts in object-oriented programming (OOP) and is a key feature of Python. It allows objects of different types to be treated as if they are instances of the same class, providing a unified interface for different data types. In Python, polymorphism is implemented through a combination of inheritance, method overriding, and duck typing.@Here are some key aspects of polymorphism in Python:@ Method Overriding:@Polymorphism often involves method overriding. In Python, when a subclass defines a method with the same name as a method in its superclass, the method in the subclass is said to override the method in the superclass. This allows the subclass to provide its own implementation of the method while still adhering to the same method signature. This is a form of runtime polymorphism.@Duck Typing:@ Python is dynamically typed, and it follows a philosophy known as "duck typing." This means that the type of an object is determined by its behavior rather than its class or explicit type. If an object behaves like a specific type, it is considered an instance of that type, allowing for flexible and polymorphic behavior.@Inheritance and Base Classes:@Polymorphism is often achieved through inheritance. When multiple classes share a common base class and override its methods, they can be used interchangeably, further promoting the idea of polymorphism.'],     
      ]),
  },
  {
    id: '8',
        title: 'PHP',
        sidebar: new Map([
          ['Introduction', 'Introduction to PHP (Hypertext Preprocessor)@PHP, which stands for "Hypertext Preprocessor," is a popular server-side scripting language primarily used for web development. It is an open-source, versatile, and widely adopted language known for its ability to create dynamic and interactive web applications. PHP is embedded within HTML code, making it an excellent choice for web development tasks. Here is an introduction to the key aspects of PHP:@History of PHP:@PHP was created by Rasmus Lerdorf in the early 1990s as a set of Common Gateway Interface (CGI) binaries written in C. Initially, it was used to track visits to his online resume. Over time, it evolved into a more sophisticated language. The PHP we use today is a result of the collaborative efforts of many developers worldwide.@Server-Side Scripting:@PHP is a server-side scripting language, which means it runs on the web server, not the users browser. When a user requests a web page that contains PHP code, the server processes the PHP code and sends the resulting HTML to the users browser. This makes PHP suitable for creating dynamic web applications and working with databases.@Embedded within HTML:@One of the defining features of PHP is its seamless integration with HTML. You can embed PHP code within HTML tags, allowing you to mix dynamic content with static content. PHP code is enclosed in <?php ... ?> tags, and it can be used to generate HTML, manipulate forms, connect to databases, and more.@Versatility:@PHP is incredibly versatile and can be used for a wide range of web-related tasks, including creating web pages, handling forms, interacting with databases, generating content, and even building entire content management systems (CMS) and e-commerce platforms.@Open Source:@PHP is open-source software, which means it is freely available for anyone to use, modify, and distribute. This has contributed to its widespread adoption and the creation of a vast community of developers and resources.@Database Connectivity:@PHP provides excellent support for connecting to various databases, including MySQL, PostgreSQL, Oracle, and SQLite. It allows you to perform database operations such as querying, inserting, updating, and deleting data, making it an essential tool for web applications that require data storage and retrieval.'],
          ['Syntax', 'Syntax in PHP@PHP (Hypertext Preprocessor) has a straightforward and intuitive syntax, making it a popular choice for web development. Its syntax is derived from several programming languages, including C, C++, and Perl. In PHP, you write scripts that are executed on the server, generating dynamic web content. Heres an overview of the key syntax elements in PHP:@ PHP Tags:PHP code is typically enclosed within PHP tags. The most common tags are <?php ... ?>. PHP code can also be enclosed in <? ... ?> or <?= ... ?> for short echo statements.@Comments:@Comments are used to document your code and are not executed. PHP supports single-line comments using // and multi-line comments using /* ... */.@Variables:Variables in PHP start with a dollar sign ($) followed by the variable name. Variable names are case-sensitive and must start with a letter or underscore.@Data Types:@PHP supports various data types, including integers, floating-point numbers, strings, booleans, arrays, objects, and more. Data types are loosely defined, meaning you dont need to specify a data type when declaring a variable.@Operators:@PHP supports a wide range of operators, including arithmetic, assignment, comparison, and logical operators. '],
          ['Data-types' , 'In PHP, data types are used to categorize and represent various kinds of data that a program can work with. PHP is a dynamically typed language, meaning you dont have to explicitly declare the data type of a variable. PHP automatically assigns a data type to a variable based on its value. Here are the most common data types in PHP:@Integers (int):@Integers are whole numbers, both positive and negative. They do not have a decimal point. PHP supports both signed and unsigned integers.@Floating-Point Numbers (float):@Floating-point numbers, or floats, represent numbers with a decimal point or in scientific notation.@Strings (string):Strings are sequences of characters, and they can be represented with single quotes or double quotes.@Booleans (bool):@Booleans represent true or false values. In PHP, true and false are case-insensitive.@Arrays (array):@Arrays in PHP are versatile and can store multiple values. They can be indexed arrays or associative arrays (key-value pairs).@Objects (object):@Objects are instances of classes. They are used in object-oriented programming (OOP) to model real-world entities and encapsulate data and methods.'],
          ['Functions', 'Functions in PHP@Functions are essential building blocks of PHP programming. They allow you to encapsulate a block of code into a reusable and modular structure. Functions make your code more organized, easier to maintain, and promote the "Dont Repeat Yourself" (DRY) principle. Heres a comprehensive guide to working with functions in PHP:@Defining a Function:@In PHP, you define a function using the function keyword followed by the function name and a pair of parentheses. You may also specify parameters within the parentheses. The function body is enclosed in curly braces {}.@Function Parameters:@You can pass parameters to a function, which are like variables that hold values passed when the function is called. Parameters are defined within the parentheses after the function name. You can specify multiple parameters separated by commas.@Function Return:@Functions in PHP can return values using the return statement. You can return a single value or an array, object, or any other data type.@Calling a Function:@To use a function, you simply call it by its name followed by parentheses. If the function takes parameters, you pass them within the parentheses.@Default Parameter Values:@You can set default values for function parameters, making them optional. If the caller doesnt provide a value for an optional parameter, the default value is used.@Variable Scope:@PHP has several variable scopes, including local, global, and static. Variables declared inside a function are local by default, meaning they are only accessible within the function. To access global variables within a function, use the global keyword.' ],
          ['Cookies','Cookies in PHP@Cookies are a fundamental concept in web development, and they allow you to store small pieces of data on the clients browser. PHP provides a convenient way to work with cookies, enabling you to store and retrieve information that can be used to personalize and enhance the users experience on your website. Heres a comprehensive guide on working with cookies in PHP:@Setting Cookies:@To set a cookie in PHP, you use the setcookie() function.@Accessing Cookies: Cookies are stored as an associative array in $_COOKIE. You can access cookie values like any other array elements.@Modifying Cookies:@To modify a cookies value, you can set the cookie again with the same name. The new value will overwrite the existing one.@Deleting Cookies:@To delete a cookie, you can set it with an expiration time in the past. This effectively removes the cookie from the clients browser.@Checking if a Cookie Exists:@You can check if a specific cookie exists using the isset() function or by directly checking the $_COOKIE array.@In conclusion, cookies in PHP are a versatile tool for storing small pieces of data on the clients browser. They are useful for personalization, authentication, and tracking user behavior. However, its essential to use cookies responsibly and be mindful of security considerations, especially when handling sensitive data.'],      
           
        ]),
  },
  {
    id: '9',
    title: 'GO',
    sidebar: new Map([
      ['Introduction', 'Introduction to Go (Golang)@Go, often referred to as "Golang," is a statically typed, compiled programming language created at Google in 2007 by Robert Griesemer, Rob Pike, and Ken Thompson. Go was designed to address the need for a language that could provide both efficiency and productivity, making it a suitable choice for system programming, web development, and various other application domains. Here is an introduction to the key features and concepts of the Go programming language:@ Key Features of Go:@Simplicity: Go emphasizes simplicity and readability. Its syntax is concise and designed to be easy to understand, making it an excellent language for both experienced and novice developers.@Efficiency: Go offers excellent performance and efficient memory usage. It compiles to machine code, resulting in high-speed execution.@Concurrency: Go was built with concurrent and parallel programming in mind. It includes goroutines, a lightweight form of concurrency, and channels, which simplify the sharing of data between goroutines. This feature is particularly valuable for building concurrent and scalable applications.@Strong Typing: Go is statically typed, which means variable types are known at compile time, reducing the chance of runtime errors.@Garbage Collection: Go includes a garbage collector that manages memory automatically, making it easier for developers to write efficient code without having to explicitly manage memory allocation and deallocation.@Standard Library: Go has a rich standard library that covers various aspects of development, including web servers, file manipulation, networking, and cryptography.@Cross-Platform: Go supports multiple platforms, including Windows, Linux, and macOS, and is available on various architectures, making it suitable for cross-platform development.@Open Source: Go is open source and has an active and supportive community. The open-source nature of Go has led to the development of numerous libraries and tools.@Static Binary Compilation: Go compiles to a single binary executable, making it easy to deploy and distribute applications.'],
      ['Syntax', 'Syntax of the Go (Golang) Programming Language@The syntax of the Go programming language is designed to be clean, simple, and easy to read. Gos focus on clarity and conciseness makes it a great choice for both beginners and experienced developers. Heres an overview of the key syntax elements in Go:@Package Declaration:@Every Go program starts with a package declaration. The main package is the entry point for an executable program. Other packages are used for code organization and reusability.@Imports:@You import external packages using the import statement. Its common to group multiple import statements.@Function Declaration:@The main function is the entry point of an executable Go program. Functions are declared using the func keyword.@Variables:Go uses the var keyword to declare variables. You can specify the type explicitly or let Go infer it.@Constants:@Constants are declared using the const keyword. They are immutable.@Data Types:@Go has fundamental data types, including int, float64, string, bool, and more. You can also create custom types using the type keyword.@Operators:@Go supports various operators, such as arithmetic, comparison, and logical operators.@Conditional Statements:@Go uses if, else if, and else for conditional logic.'],
      ['Data-types' , 'Data Types in Go (Golang)@Go is a statically typed programming language, which means that variables have a specific data type that is known at compile-time. Go offers a concise and well-defined set of data types for representing various kinds of data. Heres an overview of the fundamental data types in Go:@Numeric Types:@ int: The int data type represents signed integers and can vary in size (e.g., int, int32, int64).@uint: The uint data type represents unsigned integers (non-negative values) and can also vary in size (e.g., uint, uint32, uint64).@byte: A byte is an alias for uint8 and represents a single byte, often used to store character data.@rune: A rune is an alias for int32 and represents a Unicode code point, used for handling text characters.@Floating-Point Types:@float32: Represents single-precision floating-point numbers.@float64: Represents double-precision floating-point numbers (recommended for most cases).@Complex Types:@complex64: Represents complex numbers with 32-bit real and imaginary parts.@complex128: Represents complex numbers with 64-bit real and imaginary parts (recommended for most cases).@Boolean Type:@The bool data type represents true or false values.@String Type:@The string data type represents text or character data. Strings are immutable in Go, meaning you cannot change their content once created.@Pointer Types:@Pointers are used to store memory addresses. They are often used in combination with other data types to reference data indirectly.@Array and Slice Types:@Array: An array is a fixed-size, ordered collection of elements of the same data type.@Slice: A slice is a dynamically-sized, flexible view of an array. Slices are more commonly used in Go.'],
      ['Functions and Methods', 'Functions and Methods in Go (Golang)@Functions and methods are essential elements of the Go programming language, allowing you to organize code into reusable blocks and work with data in a structured way. Heres an overview of functions and methods in Go:@Functions:@Function Declaration: In Go, you declare a function using the func keyword, followed by the function name and parameters. Functions may return values or have no return value (void).@Parameters and Return Values: Functions can accept zero or more parameters. You specify the type of each parameter, and you can also declare the return type. Go supports multiple return values from a single function.@Variadic Functions: Go allows you to create variadic functions, which accept a variable number of arguments of the same type.@Named Return Values: You can assign names to the return values of a function. This is particularly useful for documenting the purpose of each return value.@Anonymous Functions (Closures): Go supports anonymous functions, often referred to as closures. These functions can be defined and used inline, making them useful for callbacks and concurrent programming.@Methods:@Method Declaration: A method is a function associated with a specific type, known as the receiver type. You define methods with a receiver in the form func (receiverType) methodName(parameters) returnValues.@Receiver Types: Receivers can be values or pointers. A method with a pointer receiver can modify the value it operates on, while a method with a value receiver operates on a copy of the value.@Methods vs. Functions: Methods can be called on values of their receiver type, while functions are called in a standalone manner.@Method Promotion: Go supports method promotion, allowing methods of an embedded type to be called on a composite type that includes the embedded type.@Interface Methods: A type can implicitly satisfy an interface by implementing all of the interfaces methods. This is known as interface implementation.@Function and Method Best Practices:@Consistency in Naming: Follow naming conventions for functions and methods. Use descriptive names that convey the functions purpose.@Error Handling: Return errors explicitly and handle them properly. Use the error type for error return values.@Testing: Write unit tests for functions and methods to ensure they behave as expected.'],
      ['Packages and Importing','Packages and Importing in Go (Golang)@Packages and importing are fundamental concepts in the Go programming language, which promote code organization, modularity, and reusability. Heres an overview of packages and importing in Go:@Packages:Package Declaration: A Go program is organized into packages. The package declaration at the beginning of a Go source file specifies the package to which the file belongs. The main package, main, is the entry point for an executable program.@Package Names: Package names should match the directory structure in which the Go source files are stored. For example, a file in the "mypackage" directory should declare its package as "mypackage."@Standard Library: Go provides a rich standard library that includes packages for various tasks, such as file I/O, networking, and data serialization. These packages can be imported and used in your code.@Importing:@Import Statement: You import external packages in Go using the import statement. The syntax is import "package-path", where the package path represents the location of the package in the Go ecosystem.@Import Parentheses: Its common to use import parentheses to group multiple import statements.@Blank Identifier _: If you import a package only for its side effects (e.g., initializing global variables), you can use the blank identifier _ to prevent compiler errors for unused imports.@Relative Imports: Go discourages the use of relative imports (e.g., import "./mypackage"). Instead, import packages using their import paths in your GOPATH or Go module.'],
    ]),
  },
  {
    id: '10',
    title: 'R',
    sidebar: new Map([
      ['Introduction', 'Introduction to R Language@R is a powerful and widely-used programming language and environment for statistical computing and graphics. It was developed by statisticians and data analysts to facilitate data analysis, data visualization, and statistical modeling. R is open-source, which means its freely available for anyone to use, modify, and distribute. Heres an introduction to the R language:@Key Characteristics and Features of R:@Data Analysis: R is primarily designed for data analysis. It provides a wide range of tools and packages for data manipulation, cleaning, and exploration.@Statistical Computing: R is equipped with a vast collection of statistical and mathematical functions, making it a popular choice for statisticians and researchers.@Data Visualization: R offers exceptional data visualization capabilities. It includes packages like ggplot2 that allow you to create highly customizable and publication-quality graphs and charts.@Extensibility: R is highly extensible, allowing users to write their own functions and create custom packages to meet specific needs.@Data Manipulation: The language offers powerful data manipulation tools, including data frames and functions for reshaping and aggregating data.@Community and Packages: R has a vibrant community of users and developers, which has led to the creation of thousands of packages for various tasks, making it a versatile tool for diverse fields.@Open Source: R is open source and free to use, which has contributed to its widespread adoption.@Cross-Platform: R is available for multiple operating systems, including Windows, macOS, and Linux.@Getting Started with R:@To get started with R, you need to install the R software, which can be downloaded from the official R project website. Additionally, you may want to use an integrated development environment (IDE) like RStudio, which provides a user-friendly interface for writing, running, and debugging R code.@In conclusion, R is a versatile and powerful programming language and environment specifically designed for data analysis, statistics, and data visualization. It is widely used in academia, research, industry, and data science, making it an essential tool for those working with data and statistics.'],
      ['Syntax', 'The syntax of R, like most programming languages, has a structure that governs how commands and operations are written. Heres an overview of the syntax of R:@1. Statements:@R code is composed of statements. Each statement is an instruction that tells R what to do.Statements are usually separated by line breaks, but they can also be separated by semicolons.@2. Comments:@Comments in R are used to explain code and are ignored by the interpreter.Single-line comments start with a hash symbol (#). For multi-line comments, you can enclose text in pairs of /* and */ characters.@3. Variables:@In R, variables are used to store data.Variable names are case-sensitive and can consist of letters, numbers, periods, and underscores.Variable names should not start with a number or contain spaces.@4. Data Types:@R supports various data types, including numeric (numbers), character (text), logical (TRUE/FALSE), and factors (categorical data).@5. Assignment Operator:@To assign a value to a variable, you can use the assignment operator <- or the equals sign =.For example: x <- 5 or name = "John"@6. Operators:@R supports a wide range of operators, including arithmetic operators (+, -, *, /), comparison operators (==, <, >), and logical operators (&&, ||).@7. Functions:@R has a vast collection of built-in functions, and you can create your functions.Functions are called by their name followed by parentheses, possibly containing arguments.For example: mean(data) calls the mean function with the argument data.@8. Control Structures:@Control structures are used to control the flow of the program.Common control structures include if-else statements, loops (for and while), and switch statements.@9. Data Structures:@R supports various data structures, such as vectors, lists, data frames, and matrices, for organizing and working with data.@10. Packages and Libraries:@R uses packages or libraries to extend its functionality.You can load a package using the library() function, and then access its functions and features.@While R is primarily a functional programming language, it also supports object-oriented programming (OOP) using S3 and S4 classes.Understanding the syntax of R is crucial for writing correct and efficient code. Once you grasp the basic structure and conventions of the language, you can effectively work with data, perform statistical analyses, and create visualizations.'],
      ['Data Import and Export' , 'Data import and export are essential operations in R, allowing you to work with datasets stored in various file formats. Heres an overview of data import and export in R without providing specific code examples.@Data Import in R:@File Formats: R can import data from a wide range of file formats, including CSV, Excel, JSON, XML, text files, and databases.@Read Functions: To import data, youll use read functions that are specific to the file format.@Parameters: Import functions typically take parameters that allow you to specify the data source, such as file path, URL, or database connection, as well as options like delimiters, headers, and data types.@Data Cleaning: After importing data, you may need to clean and preprocess it by handling missing values, converting data types, and reshaping the dataset as needed.@Data Export in R:@File Formats: R can export data to a variety of file formats, such as CSV, Excel, text files, JSON, and more.@Write Functions: To export data, youll use write functions corresponding to the desired file format.@Parameters: Export functions typically take parameters that specify the data to be exported, the destination file path, and various formatting options.@Database Interaction:@Database Connectivity: R supports database connectivity through packages like RMySQL, RSQLite, and RODBC. You can connect to a database, retrieve data, and perform SQL queries directly within R.@ODBC Drivers: To connect to databases, you might need to install and configure ODBC drivers for the specific database system you are using.@Web Data Retrieval:@Web Scraping: R offers packages like rvest and httr for web scraping. You can extract data from websites by sending HTTP requests, parsing HTML content, and selecting specific elements.@API Interaction: R can interact with APIs to fetch data from web services, such as RESTful APIs, using packages like httr and jsonlite.@Data Interchange Formats:@JSON and XML: R can read and write data in JSON and XML formats, making it easy to work with data from web services and other sources.@R Data Serialization: You can serialize R objects using the saveRDS() and readRDS() functions, allowing you to store and reload R objects.@Automation and Reproducibility:@Scripting and Automation: Data import and export operations are often scripted to automate data workflows and ensure reproducibility.'],
      ['Data Manipulation', 'Data manipulation in R is a critical aspect of working with datasets. It involves tasks such as cleaning, transforming, summarizing, and aggregating data to prepare it for analysis or visualization. Heres an overview of data manipulation in R without providing specific code examples:@Data Structures in R:@Vectors: Vectors are one-dimensional arrays in R that can hold elements of the same data type, like numbers or characters. You can create and manipulate vectors using functions like c() (combine), length(), and indexing.@Data Frames: @Data frames are two-dimensional data structures in R, similar to tables in a database or spreadsheets. They consist of rows and columns, where each column can have a different data type. Data frames are widely used for data manipulation and analysis in R.@Data Manipulation Functions and Packages:@Subsetting:@ R provides several ways to subset data frames, including selecting specific rows and columns based on conditions, column names, or numeric indices.@Filtering:@ Filtering data frames is a common operation for extracting rows that meet certain conditions. You can use functions like subset(), filter() from dplyr, or square bracket indexing.@Sorting:@ You can sort data frames by one or more columns using functions like order(), arrange() from dplyr, or the base R function sort().@Merging and Joining:@ Combining data from different data frames is achieved with functions like merge(), bind_rows(), and bind_cols() from dplyr. These operations can be based on common keys or other criteria.@Reshaping Data:@ You can reshape data using functions like melt() and cast() from the reshape2 package, or pivot_longer() and pivot_wider() from tidyr. These functions are used for converting data between long and wide formats.@Aggregation:@ Summarizing data is a crucial step in data manipulation. R provides functions like aggregate(), tapply(), and the more powerful group_by() and summarize() from dplyr to aggregate data.@Data Cleaning:@Data cleaning includes tasks like handling missing values, converting data types, and dealing with outliers. Functions like na.omit(), na.rm, and impute() can be used for these tasks.@String Manipulation:@ For text data, R offers functions for string manipulation and transformation, such as strsplit(), gsub(), and the stringr package.' ],
      ['Web Scraping','Web scraping in R involves extracting data from websites or web pages and converting it into a structured format that can be used for analysis or other purposes. Heres an overview of web scraping in R without specific code examples:@1. Web Scraping Basics:@Web scraping is the process of automatically extracting information from websites.R provides various packages, such as rvest and httr, to help with web scraping tasks.Web scraping is often used to collect data, such as text, images, or tables, from websites.@2. HTTP Requests:@To scrape a website, R sends HTTP requests to the web server, typically using the GET method.The server responds with HTML, which contains the content of the web page.@3. Parsing HTML:@HTML parsing is the process of extracting information from the HTML source code of a web page.R provides functions for parsing HTML content, such as html(), html_nodes(), and html_text().@4. Selectors:@Web scraping often involves selecting specific elements from the HTML source code using CSS selectors or XPath expressions.You can target elements like headings, links, tables, or specific data points using selectors.@5. Data Extraction:@Once youve selected the desired elements, you can extract data from them. This can include text, attribute values, or even structured data like tables.@6. Handling Complex Websites:@Some websites use JavaScript to load content dynamically, which may require additional techniques to scrape.Tools like RSelenium or the webshot package can be used for more complex scraping tasks.@7. Ethics and Legal Considerations:@Web scraping should be done ethically and legally. Always check a websites terms of use and robots.txt file to understand its scraping policies.Avoid overloading a website with requests, which can cause server strain and impact the sites performance.@8. Data Cleaning:@Web scraped data often requires cleaning and preprocessing to remove unwanted characters, fix missing values, and format it for analysis.Rs data manipulation tools can be useful for this step.@9. Automation:@You can automate web scraping tasks using R scripts. Scheduled scraping can periodically collect data from websites and update your dataset.@10. Data Storage:@Scraped data can be stored in various formats, such as CSV, Excel, a relational database, or even as structured R objects.@11. Handling Errors:@Web scraping can encounter errors, such as connection issues, website changes, or site maintenance.'],      
    ]),
  },
  {
      id:'11',
        title:'DJANGO ',
        sidebar:new Map([
          ['Django Home','Django is a popular and robust open-source web framework that has revolutionized web development since its inception. Born at Lawrence Journal-World, it was designed by Adrian Holovaty and Simon Willison, initially for use in newsroom applications. Django is written in Python and follows the model-view-controller (MVC) architectural pattern. This framework emphasizes the "batteries-included" philosophy, providing developers with a plethora of pre-built features, libraries, and tools to accelerate web development.@ Djangos primary goal is to make web development faster, easier, and more efficient. It focuses on DRY (Dont Repeat Yourself) principles, which means developers write minimal code to achieve maximum functionality. Djangos Object-Relational Mapping (ORM) system allows developers to interact with the database using Python objects rather than SQL, simplifying database operations.@ When it comes to databases, Django supports a variety, including PostgreSQL, MySQL, SQLite, and Oracle. The framework also supports NoSQL databases like MongoDB. It uses an Object-Relational Mapping (ORM) system, allowing developers to work with databases using Python classes and methods, reducing the need to write raw SQL queries.@ In summary, Django is a versatile web framework known for its speed, security, and scalability. Its an excellent choice for web development projects of all sizes and is favored by developers for its clean code, built-in features, and robust community support. Whether youre new to web development or an experienced programmer, Djangos comprehensive documentation and straightforward design philosophy make it a compelling choice for building web applications.'],
          ['Django Intro', 'Django Introduction, Django is a Python framework that makes it easier to create web sites using Python.Django takes care of the difficult stuff so that you can concentrate on building your web applications.Django emphasizes reusability of components, also referred to as DRY (Dont Repeat Yourself), and comes with ready-to-use features like login system, database connection and CRUD operations (Create Read Update Delete).@ Moreover, Django follows internationalization and localization best practices, making it a suitable choice for building multilingual websites. It provides tools for translating web applications into multiple languages, helping reach a global audience.@ Djangos testing framework is exceptional, making it easy to write unit tests, integration tests, and functional tests. This encourages the development of reliable and stable web applications. Continuous integration and deployment are also well-supported through tools like Jenkins, Travis CI, and Heroku.@ Django is extensible, allowing developers to plug in third-party packages to enhance functionality. Its strong community support ensures a vast library of third-party packages and extensions that cater to a wide range of needs. Its suitable for small and large projects, whether youre building a personal blog, a content management system, or a complex web application.'],
          ['Django Get started', 'Django Getting Started, Getting started with Django is an exciting journey into the world of web development. Django, a powerful and open-source web framework, is designed to streamline the process of creating web applications. To begin, ensure that you have Python installed on your system, as Django is a Python-based framework. You can check your Python installation by running python --version.@ If Python is not installed, download and install it from the official Python website. Once Python is ready, you can proceed to install Django using the Python package manager, pip, with the command pip install django. Django follows the "batteries-included" philosophy, which means that it comes with a wide array of built-in tools and features that simplify web development.@ After installing Django, you can create a new Django project by running django-admin startproject projectname, replacing "projectname" with the name of your project. This command generates the basic structure for your web application. Within the project folder, youl find a settings file where you can configure various aspects of your application, such as database settings, time zones, and installed apps.@ . Django uses a powerful Object-Relational Mapping (ORM) system, enabling you to work with databases using Python objects rather than raw SQL queries. You can define your data models as Python classes and let Django take care of creating the database schema for you.@ As you dive into Django, youll discover that its extensive documentation is a valuable resource. It provides clear explanations, tutorials, and examples to guide you through the development process. Whether youre building a personal blog, a content management system, or a complex web application, Django offers a flexible and powerful framework to meet your needs.@ In conclusion, getting started with Django is a rewarding experience for web developers. Its ease of installation, comprehensive documentation, and built-in features make it a fantastic choice for projects of all sizes. Whether youre a beginner or a seasoned developer, Djangos simplicity and power will empower you to create dynamic and secure web applications with confidence.'],
          ['Django Virtual Environment', 'Django - Create Virtual Environment, A virtual environment in Django is a crucial tool for managing project dependencies and ensuring a clean, isolated environment for your web application development. It enables you to create an isolated space where you can install and manage specific versions of Python packages without affecting the global Python environment on your system. This isolation is essential because different projects may require different package versions, and using a global environment can lead to conflicts.@ By using a virtual environment, you can create a self-contained environment for your Django project, allowing you to work on multiple projects simultaneously, each with its unique set of dependencies. This isolation prevents package version clashes and ensures that your project remains stable and consistent, even when dependencies change.@ Djangos recommended tool for creating virtual environments is Pythons built-in "venv" module. You can create a virtual environment by navigating to your projects directory and running a simple command. This creates a folder where all project-specific dependencies are stored. To activate the virtual environment, you use the command specific to your operating system. In Unix-based systems, its typically source venv/bin/activate, while in Windows, its venvcriptsctivate.@ Djangos recommended tool for creating virtual environments is Pythons built-in "venv" module. You can create a virtual environment by navigating to your projects directory and running a simple command. This creates a folder where all project-specific dependencies are stored. To activate the virtual environment, you use the command specific to your operating system. In Unix-based systems, its typically source venv/bin/activate, while in Windows, its venvcriptsctivate.@ Django projects often have specific requirements, and a virtual environment is an excellent way to manage these dependencies effectively. It also simplifies the process of deploying your project to a production server since you can replicate the exact environment by installing the packages listed in the "requirements.txt" file.@ Whether youre working on a small personal project or collaborating on a large team effort, virtual environments are a best practice in Django development that simplifies the management of dependencies and helps maintain project integrity.'],
          ['Install Django', 'Install Django, Installing Django.js is an essential step in enhancing the interactivity and dynamic capabilities of your Django web applications. Django.js, often referred to as "Django JavaScript Integration," is a technique that facilitates the seamless integration of JavaScript into your Django projects. JavaScript is a powerful client-side scripting language that allows for dynamic interactions and real-time updates in web applications.@ To install Django.js, you first need to ensure that you have an existing Django project in place. This means having Django itself installed and a functional project structure. With your Django project ready, you can start incorporating JavaScript functionality. Django.js offers a straightforward way to manage JavaScript files, allowing you to keep your JavaScript code organized and separate from your HTML templates.@ Incorporating Django.js typically involves creating JavaScript files and linking them to your Django templates. These files can contain JavaScript code for handling various client-side operations, such as form validation, interactive UI components, and asynchronous requests to the server.@ Incorporating Django.js typically involves creating JavaScript files and linking them to your Django templates. These files can contain JavaScript code for handling various client-side operations, such as form validation, interactive UI components, and asynchronous requests to the server.@ In summary, installing Django.js is a pivotal step in extending the functionality and interactivity of your Django web applications. It provides a structured approach to including JavaScript code in your projects, simplifies the management of JavaScript libraries, and aligns with Djangos philosophy of organized and efficient development. By integrating JavaScript seamlessly, Django.js enhances your web applications user experience and ensures your Django projects remain dynamic and responsive to user interactions.'],
          ['Django Create Project', 'Django Create Project, Creating a Django project is the initial step in building web applications with this powerful and versatile framework. Django, an open-source web framework written in Python, is known for its robust features, scalability, and emphasis on clean and efficient code.@ With Python in place, you can proceed to create your first Django project. Django provides a command-line tool called "django-admin" or "django-admin.py" (depending on your system) that simplifies this process. To create a new project, open your terminal or command prompt, navigate to the directory where you want to create the project. @ Django projects follow a Model-View-Controller (MVC) architectural pattern, where models represent the data structure, views handle user interface logic, and controllers manage the application flow. The project directory structure already includes a sample "views.py" file, which is where you can define the views for your project. These views are Python functions that handle HTTP requests and return HTTP responses.@ One of Djangos notable advantages is its built-in admin interface. It automatically generates an administrative panel based on your data models, enabling you to manage the content of your website with ease. This admin interface can be customized to fit your projects specific requirements, making content management a breeze.@In conclusion, creating a Django project is the first step toward building web applications that are efficient, scalable, and maintainable. The frameworks well-structured project directory, built-in features, and emphasis on best practices make it a top choice for developers. Whether youre starting a small personal project or embarking on a complex web application endeavor, Djangos project creation process sets the stage for a successful and efficient development journey.'],
          ['Django Create App', 'Django Create App, Creating a Django app is a pivotal aspect of building web applications with Django, a robust Python-based web framework renowned for its clean and organized development practices. Once youve created your Django project, the next step is to build individual apps that serve specific functionalities within your web application. Djangos app structure adheres to the concept of modularity, promoting the separation of concerns and code reusability.@ Django apps typically consist of models, views, templates, and URLs. Models define the data structure for your app, utilizing Djangos powerful Object-Relational Mapping (ORM) to manage the database schema. You can define data models as Python classes, and Django handles the database creation and management for you.@Views in Django apps handle the logic of your web application. They are Python functions responsible for processing HTTP requests and returning HTTP responses. Views play a crucial role in rendering templates, processing form submissions, and managing user interactions within your app.@ Templates, found in the apps "templates" directory, are responsible for the presentation layer of your app. They separate the design from the logic, promoting clean and maintainable code. By following Djangos template language, you can easily integrate dynamic content and create user-friendly interfaces.@ URL routing within Django apps is another essential aspect. In the apps "urls.py" file, you can define URL patterns that correspond to specific views, allowing you to create clean and organized URLs for your apps functionalities. This modular approach simplifies navigation and ensures a user-friendly experience.@ Moreover, Django apps can be extended with third-party packages from the Django ecosystem. These packages offer additional functionalities, such as authentication, search, and more, allowing you to enhance your apps capabilities without starting from scratch.@ By creating individual apps, you maintain a well-structured codebase, making it easier to manage, test, and maintain your web application. Apps are reusable components, and they can be leveraged to build complex web applications by composing different app functionalities.'],
          ['Django Views', 'Django Views, Django views are a fundamental component of web development with the Django framework. They serve as the logic and control center of your web application, responsible for handling HTTP requests, processing data, and returning appropriate HTTP responses. Views in Django follow the Model-View-Controller (MVC) architectural pattern, where they represent the "controller" that manages the interaction between the model (data) and the template (presentation).@ In Django, views are Python functions that take HTTP requests as input and return HTTP responses. These responses can be in various forms, such as HTML pages, JSON data, or other content types. Views act as the bridge between the clients browser and the server, orchestrating how data is fetched, processed, and presented to the user.@ Views can encapsulate complex operations, including database queries, form handling, and business logic. They can interact with Django models to retrieve or manipulate data and use templates to render the final HTML output. This separation of concerns is a key tenet of Djangos design philosophy, promoting clean and maintainable code.@ Views can be generic or project-specific. Generic views are pre-built views provided by Django for common tasks, like displaying a list of objects or handling form submissions. Project-specific views are custom views tailored to your applications specific needs.@ Django also offers decorators that can be applied to views to add functionality such as user authentication, caching, and permission checks. These decorators help ensure that views are secure and function as intended.@ Views can be associated with URL patterns in Django, allowing users to access specific views through distinct URLs. This URL routing system is defined in the projects "urls.py" file, where URL patterns are mapped to views. This separation of routing from view logic helps keep the codebase organized and makes it easier to manage the applications navigation.@ Views play a crucial role in creating a responsive and dynamic user experience. They handle user interactions, form submissions, and input validation, ensuring that the application behaves as expected. With Djangos support for AJAX and asynchronous requests, views can enable real-time updates and dynamic content without the need for full page reloads.'],
          ['Django URLs', 'Django URLs, In Django, URL patterns are defined in the projects "urls.py" file, where you can specify the URL patterns and associate them with views. This separation of routing logic from view logic promotes code organization and maintainability. Each URL pattern corresponds to a view function or class, enabling you to create a well-structured architecture for your web application.@ URL patterns in Django are highly flexible, supporting regular expressions and named groups. This versatility enables you to capture dynamic segments of the URL and pass them as parameters to views, making it possible to create URLs that can change based on user input or data context.@ Django also offers the ability to namespace URL patterns, which is especially useful when you have multiple apps within a project. Namespace prefixes can be added to URLs, ensuring that there are no conflicts between URLs from different apps.@ The URL routing system in Django is integral to the creation of RESTful APIs. By defining URL patterns for views that handle different HTTP methods, developers can create APIs that offer full functionality over HTTP, allowing for the creation, retrieval, updating, and deletion of resources.@ Djangos URL routing system promotes graceful degradation, meaning that it ensures that your web application functions even for users with JavaScript disabled. This accessibility is important for making web applications inclusive and compliant with web standards.In summary, Django URLs are a critical part of web development with the Django framework. They define how URLs are structured and mapped to views, enabling clean and organized navigation. This separation of concerns simplifies code organization and maintainability. Whether youre building a simple blog or a complex web application, Django URLs provide a flexible and powerful mechanism for defining your web applications routing logic and ensuring a user-friendly experience.'],
          ['Django Templates', 'Django Templates, Django templates are a fundamental component of Django web development, serving as the presentation layer of web applications built using the Django framework. These templates enable the separation of the applications logic from its design, promoting clean and maintainable code. Djangos template system follows the DRY (Dont Repeat Yourself) principle, ensuring that the same HTML code doesn need to be written multiple times.@ Django templates are written in a template language that extends HTML. This language includes template tags and filters, which provide dynamic content rendering and data manipulation. Template tags are enclosed in curly braces with percentage signs, while filters are used to modify variable values within the template. These constructs allow for dynamic content rendering, looping through data, conditionally displaying elements, and other operations necessary for creating responsive user interfaces.@ Django templates support template inheritance, a powerful feature that enables the creation of a base template containing the common structure and elements of a site. This base template can be extended by other templates, which only need to specify the unique content and design elements for each page. This method ensures consistency across a website and simplifies maintenance.@ Moreover, Django templates can access data from Python objects using the template languages context variables. This data can be passed to the template from views, providing dynamic content that can change based on user input or data context. The template language also includes filters for formatting dates, numbers, and other data types, ensuring a consistent presentation of information.@ In addition, Django templates support the creation of forms, making it straightforward to render and process HTML forms in web applications. This feature simplifies user input validation, form submissions, and data storage, ensuring a smooth user experience.@ Django templates can be extended with the use of custom template tags and filters. Developers can create their template tags and filters to add custom functionality to templates, such as integrating third-party libraries or extending Djangos built-in features.'],
          ['Django Models', 'Django Models, Django models form the core of the Django frameworks data handling capabilities, playing a central role in the development of web applications. These models are Python classes that define the structure and organization of data within the application. Djangos Object-Relational Mapping (ORM) system empowers developers to work with databases using Python objects and methods, eliminating the need for raw SQL queries.@ Django models are instrumental in creating, querying, and managing database tables and relationships. Each model class corresponds to a database table, with each class attribute representing a database field. By defining models, developers can ensure data consistency, integrity, and accuracy, as Django generates the SQL schema automatically based on the models. This schema generation makes it easy to create and maintain complex databases without delving into low-level database management.@ Django models support various field types, allowing for the representation of data in different formats, such as text, numbers, dates, and more. Additionally, models facilitate the definition of relationships between data entities, including one-to-one, one-to-many, and many-to-many relationships. These relationships ensure that data can be organized and queried efficiently.@ In addition to the core functionality, Django models support advanced features like model inheritance, allowing for the creation of hierarchies and abstractions in data structures. Models can be extended or overridden to build more complex data representations and behaviors. This extensibility helps developers design data models that closely match the applications requirements.@ Moreover, Djangos model system supports database transactions, enabling atomic operations that maintain the integrity of the data. This ensures that complex operations involving multiple database changes either succeed entirely or fail, preventing data corruption.@ '],
          ['Django Insert Data','Django Insert Data, Inserting data into a Django applications database is a fundamental step in building dynamic web applications that can store and retrieve information. Django provides a convenient and efficient way to accomplish this, thanks to its robust Object-Relational Mapping (ORM) system, which enables developers to work with databases using Python objects and methods.@ In Django, data insertion is typically performed through models, which are Python classes representing the database tables. When you define a model, youre essentially creating a blueprint for the data that your application will store. Django automatically generates the necessary SQL schema to create database tables based on your model definitions.@ Djangos model system provides data validation and data integrity enforcement. When you insert data, the ORM checks it against the models field definitions and ensures that it complies with the specified constraints. This validation prevents the insertion of invalid or inconsistent data, maintaining data integrity.@ Djangos built-in support for database transactions ensures that data insertion operations are atomic. This means that multiple database changes related to data insertion either all succeed or all fail. This guarantees the database remains in a consistent state even in the event of errors during insertion.@ The use of Django=s ORM also allows for more advanced data insertion techniques, such as bulk insertion. You can insert multiple records in a single database query, which is significantly more efficient than inserting each record individually. This is particularly useful when working with large datasets or performing batch data imports.@ Furthermore, Django provides mechanisms for populating the database with initial data through fixtures. These fixtures can be defined in various formats, including JSON, XML, or YAML, and they allow you to insert data programmatically or import data from external sources.'],
        ])
    },
    {
      id:'12',
      title:'SQL',
      sidebar:new Map([
        ['SQL Tutorial', 'SQL Tutorial, An SQL tutorial serves as a comprehensive and essential resource for anyone looking to understand and utilize Structured Query Language (SQL), a powerful and standardized tool for managing relational databases. SQL is the foundation of many modern data-driven applications and plays a crucial role in database management. SQL tutorials are structured learning materials designed to impart knowledge and practical skills in working with databases, whether you are a beginner or an experienced developer.@ These tutorials typically begin with an introduction to the basics of SQL, explaining what SQL is, its history, and its significance in database management. They cover fundamental concepts such as tables, rows, columns, and data types. Understanding these foundational components is essential for anyone aiming to work with databases effectively.@ SQL tutorials often delve into data manipulation with SQL. They teach how to retrieve data from databases using SQL queries, providing guidance on constructing queries to filter, sort, and group data. Learning how to retrieve data is critical for reporting, analysis, and data visualization.@ Furthermore, SQL tutorials cover data modification operations. They explain how to insert new records into database tables, update existing data, and delete records as needed. This knowledge is vital for maintaining data integrity and managing changing information within a database.@ SQL tutorials also explore database design and schema creation, emphasizing the importance of well-structured databases to store data efficiently. Understanding concepts like primary keys, foreign keys, and relationships between tables is crucial for designing robust databases.@ Joining tables is a central part of SQL, and tutorials explain how to combine data from multiple tables. This enables the creation of complex queries that retrieve and analyze data across related tables.@ SQL tutorials introduce users to constraints, which are rules applied to data in database tables to ensure data integrity. Constraints help maintain the quality and accuracy of data within the database.@ Furthermore, tutorials often touch on data security and access control. They explain how to manage user permissions and protect data from unauthorized access or modification.'],
        ['Introduction to SQL', 'Introduction to SQL, Structured Query Language, commonly known as SQL, is a powerful and standardized language used in the management and manipulation of relational databases. SQL serves as the universal interface to access, query, modify, and control data stored within these databases. In a world increasingly reliant on data, SQL is a fundamental tool for organizing, retrieving, and analyzing structured information.@ The origins of SQL date back to the early 1970s when IBM developed an initial version for their System R project. Over time, SQL evolved into an industry-standard language, with the American National Standards Institute (ANSI) and the International Organization for Standardization (ISO) formalizing its specifications.@ SQL operates on a variety of relational database management systems (RDBMS) such as MySQL, PostgreSQL, Oracle, SQL Server, and SQLite, making it versatile and adaptable for different data storage solutions. SQLs standardized syntax and capabilities allow for portability across RDBMS, making it possible to migrate data and applications from one system to another without significant code changes.@ In addition to its foundational role in database management, SQL is crucial for data-driven decision-making in diverse sectors, including finance, healthcare, marketing, and logistics. It enables businesses and organizations to store, retrieve, and analyze data efficiently, fostering informed decision-making, improved efficiency, and competitive advantages in todays data-centric world.@ In conclusion, SQL is the language that empowers individuals and organizations to work with structured data effectively. It provides the means to access, manipulate, and manage databases, ensuring data accuracy, security, and efficiency. Whether you are a database administrator, data analyst, software developer, or simply a data-driven decision-maker, SQL is a valuable tool for navigating the vast sea of data in the modern age. Its universality and practicality make it an indispensable skill for anyone involved in data management and analysis.'],
        ['SQL Syntax', 'SQL Syntax, SQL syntax, the foundation of Structured Query Language, is a set of rules and conventions that govern how SQL commands are structured and executed. SQL syntax is crucial for effectively interacting with relational databases, as it defines the structure and format of SQL statements used to perform tasks like querying, updating, and managing data. Understanding SQL syntax is fundamental to working with databases and deriving valuable insights from data.@ SQL statements typically consist of several key components. The first is the command keyword, which specifies the operation to be performed. Common command keywords include SELECT, INSERT, UPDATE, DELETE, CREATE, and DROP. Following the command keyword, SQL statements include clauses that further define the specific task. For example, a SELECT statement includes the FROM clause to specify the table from which data should be retrieved.@ Tables, or relations, are central to SQL, and SQL syntax involves specifying the tables involved in a statement. For instance, the FROM clause is used to indicate the source table in a SELECT statement, while the INTO clause specifies the destination table in an INSERT statement. SQL statements can also involve multiple tables in operations like JOINs and subqueries.@ Clauses, which are specific to each SQL statement, provide additional details and constraints for the operation. Common clauses include WHERE, GROUP BY, HAVING, ORDER BY, and LIMIT. The WHERE clause, for example, is used to filter rows based on specified conditions, while the GROUP BY clause is employed to group data based on one or more columns.@ Subqueries, nested queries within a statement, are another essential part of SQL syntax. Subqueries allow for complex and highly specific data retrieval and manipulation. They are enclosed within parentheses and can be used in various clauses, such as the WHERE clause.@ In summary, SQL syntax is the language governing the structure and format of SQL commands used for database management and data manipulation. It encompasses key elements like keywords, tables, operators, clauses, subqueries, and functions. A solid grasp of SQL syntax is fundamental for database administrators, data analysts, developers, and anyone interacting with relational databases. Accurate and well-structured SQL syntax ensures that data tasks are performed effectively, accurately, and efficiently, contributing to sound decision-making and data management.'],
        ['SQL SELECT Statement', 'SQL SELECT Statement, The SQL SELECT statement is a cornerstone of the Structured Query Language (SQL) and serves as a fundamental tool for retrieving data from relational databases. SELECT statements are used to query databases, specifying the data to be retrieved and the conditions for retrieval. The syntax and structure of the SELECT statement are designed to provide maximum flexibility and precision when interacting with data stored in tables.@ At its core, a SELECT statement begins with the keyword "SELECT," which indicates the intent to retrieve data. Following SELECT, you specify the columns from which data should be retrieved. You can select specific columns, all columns using "*", or even create calculated columns in the result set.@ The "FROM" clause is a crucial component of the SELECT statement. It specifies the table or tables from which data should be retrieved. You can select from one or more tables, enabling the joining of tables to fetch data thats distributed across multiple sources. Table aliases can be used to simplify complex queries.@ The "WHERE" clause allows for filtering data based on specific conditions. You can use comparison operators, logical operators, and functions to define conditions that rows must meet to be included in the result set. This clause is essential for narrowing down the data to only what is needed.@ The "GROUP BY" clause is employed for aggregating data and grouping rows that share common values in one or more columns. This is particularly useful for performing calculations or summarizing data within groups.@ Sorting the result set is achieved using the "ORDER BY" clause. You can specify one or more columns by which the data should be sorted in ascending or descending order.@ In addition to basic SELECT statements, SQL provides a wide range of functions that can be applied to data during retrieval. These functions include mathematical operations, string manipulation, date and time functions, and aggregate functions like SUM, COUNT, AVG, and more.@ SQL SELECT statements can be combined with JOIN operations to retrieve data from multiple related tables, providing a comprehensive view of the data. Different types of JOINs, such as INNER JOIN, LEFT JOIN, and RIGHT JOIN, enable the selection of data from different tables based on relationships.'],
        ['SQL SELECT DISTINCT', 'SQL SELECT DISTINCT Statement, The SQL SELECT DISTINCT statement is a valuable SQL command used to filter and retrieve unique values from a specific column in a database table. Its an essential tool for identifying and working with distinct, non-duplicate values within a dataset. When applied to a SELECT query, DISTINCT ensures that only unique values are included in the result set, eliminating any redundant or duplicated entries.@ The core purpose of the SELECT DISTINCT statement is to simplify data analysis by presenting a concise and accurate view of the data. Its particularly helpful when dealing with large datasets or when you need to produce clear and uncluttered reports.@ When implementing SELECT DISTINCT, you begin with the SELECT keyword, just as you would in a standard SQL query. However, following SELECT, you specify DISTINCT, indicating that you want unique values. After DISTINCT, you list the columns from which you want to retrieve distinct values. These can be one or more columns, depending on your data requirements.@ The SELECT DISTINCT statement is primarily used with the SELECT statement when querying data, but it can also be applied to other SQL operations, like INSERT, to ensure that the data you are inserting is unique.@ Moreover, SELECT DISTINCT is often used in conjunction with aggregate functions like COUNT, SUM, AVG, and others to produce summary data. For example, you can use SELECT DISTINCT with COUNT to determine the number of unique customers in a sales database, which can be valuable for business insights and decision-making.@ In summary, the SQL SELECT DISTINCT statement is a key tool for identifying and retrieving unique, non-repetitive values from a specified column in a database table. Its utility lies in streamlining data analysis, ensuring data integrity, and producing clear, concise results. Whether you are building a report, analyzing data, or maintaining a database, SELECT DISTINCT is a powerful feature for simplifying data management and extracting valuable insights from your dataset.'],
        ['SQL WHERE', 'SQL WHERE Clause, The SQL WHERE clause is a fundamental component of Structured Query Language, serving as a pivotal filter that allows users to narrow down and extract specific data from a database table. It plays a critical role in data retrieval and modification by specifying the conditions that rows must meet to be included in the result set. The WHERE clause is an indispensable tool for effective data querying and manipulation.@ At its core, the WHERE clause is used in conjunction with the SELECT statement to filter data based on specific criteria. It follows the SELECT keyword and precedes the FROM clause, allowing you to restrict the rows returned by a query to only those that meet defined conditions. These conditions are defined using logical and comparison operators, which can be combined to form complex criteria.@ The WHERE clause can incorporate wildcard characters, such as "%" and "_," which are used in conjunction with the "LIKE" operator for pattern matching. This allows for the retrieval of data that partially matches a given pattern, which is particularly useful when searching for text-based information.@ Furthermore, the WHERE clause plays a significant role in data modification operations like INSERT, UPDATE, and DELETE. It allows you to specify the conditions under which these operations should be performed, ensuring that data is modified accurately and securely.@ Subqueries, or nested queries, can also be incorporated into the WHERE clause to enhance query precision and complexity. Subqueries allow you to use the results of one query as input for another, enabling in-depth data analysis and manipulation.@ The flexibility and versatility of the SQL WHERE clause make it an invaluable tool for various data management tasks. Its commonly used for generating reports, extracting specific records from databases, and maintaining data integrity. Whether you are a database administrator, a data analyst, or a developer, the WHERE clause is indispensable for tailoring your data operations to meet your specific requirements, making it a fundamental component of effective database interaction and data processing.' ],
        ['SQL ORDER BY', 'SQL ORDER BY Keyword, The SQL ORDER BY keyword is a powerful and essential component of Structured Query Language (SQL) that allows users to sort query results in a specified order. It plays a vital role in data presentation and analysis by enabling the arrangement of retrieved data in ascending or descending order based on one or more columns. The ORDER BY keyword is a versatile and indispensable tool for tailoring the output of SQL queries to meet specific requirements.@ To use the ORDER BY keyword, you append it to a SELECT statement, specifying the columns by which you want to sort the result set. This can be a single column or a list of columns, depending on the complexity of your sorting needs. For instance, you can sort a list of employees by their last names, or you can sort products by their price and availability.@ When working with multiple columns in the ORDER BY clause, the sorting is performed hierarchically. The data is sorted primarily by the first specified column, and if there are ties, it proceeds to the second specified column, and so on. This hierarchical sorting enables users to achieve more precise sorting results.@ The ORDER BY keyword is often used alongside other SQL clauses. For example, you can combine it with the WHERE clause to filter data based on specific criteria before sorting it, creating tailored reports and analysis results.@ Additionally, ORDER BY is valuable for analyzing data, particularly in tasks such as finding the highest or lowest values, identifying outliers, or discerning trends. For example, in a sales database, you can use ORDER BY to find the top-selling products or the least popular items.@ In summary, the SQL ORDER BY keyword is an indispensable tool for sorting query results in ascending or descending order based on one or more columns. It is widely used in data presentation and analysis, facilitating the generation of organized reports, the identification of trends, and the extraction of valuable insights from databases. Whether youre generating business reports, performing data analysis, or simply arranging data for better visualization, the ORDER BY keyword is a versatile and crucial component of SQL that enhances the precision and presentation of query results.'],
        ['SQL AND', 'SQL AND Operator, The SQL AND operator is a fundamental logical operator that allows users to combine multiple conditions within a WHERE clause to create more complex and precise search criteria when querying a database. @ The AND operator serves as a way to filter data from a database table by specifying that all specified conditions must be met for a row to be included in the query result. This logical conjunction helps in narrowing down the result set by ensuring that only records that satisfy all the conditions are retrieved.@ When working with SQL, the AND operator is particularly useful in situations where you want to apply multiple filtering conditions simultaneously. For example, you might want to retrieve a list of employees who are both from the "Sales" department and have a salary greater than $50,000.@ In this case, you can use the AND operator to combine these conditions in your WHERE clause, ensuring that both conditions must be true for a record to be included in the result set.@ The AND operator operates on Boolean logic, which means it evaluates conditions as either true or false. For the AND operator to return true for a specific row, both the condition on the left and the condition on the right of the AND keyword must be true. If either or both conditions are false, the row is excluded from the result set.@ The AND operator is also frequently used in conjunction with other logical operators, such as OR and NOT, to create even more complex search criteria. By combining these operators, users can build intricate queries to filter and retrieve data that precisely matches their requirements.@ Additionally, the AND operator can be used in combination with subqueries and aggregate functions, providing advanced capabilities for data analysis and reporting. For instance, you can use the AND operator within a subquery to filter records that meet certain criteria, and then use aggregate functions to summarize or analyze the results.@ The AND operator is invaluable for tailoring queries to extract precise data, whether its for reporting, analysis, or decision-making. Its use is widespread in SQL and plays a crucial role in helping users achieve highly accurate and customized results from their database queries.'],
        ['The SQL OR', 'The SQL OR Operator, The SQL OR operator is a fundamental logical operator that provides users with a powerful means of creating flexible and inclusive search criteria when querying a database. The OR operator allows for the combination of multiple conditions within a WHERE clause, specifying that any of the conditions must be met for a row to be included in the query result. @ This logical disjunction broadens the scope of data retrieval by allowing for records that satisfy at least one of the specified conditions to be included.@ In SQL, the OR operator is particularly useful when you want to retrieve data based on multiple criteria but do not require all the conditions to be true simultaneously. For example, you might want to retrieve a list of products that are either in the "On Sale" category or have a price lower than $50. In such cases, the OR operator is employed to combine these conditions in the WHERE clause, ensuring that any product meeting either condition is included in the result set.@ The primary role of the OR operator is to make data retrieval more inclusive, allowing for a broader range of records to be included in the query result. This is especially helpful in scenarios where you need to extract data that meets any one of multiple criteria, such as searching for products with various attributes or finding employees in different departments.@ The SQL OR operator is valuable in creating complex queries that encompass a wide range of scenarios. It can be used with subqueries to filter records that meet particular conditions and is a fundamental tool for performing advanced data analysis and reporting. By employing the OR operator, users can build intricate queries that retrieve the exact data required for their specific needs, whether its for reporting, analysis, or decision-making. Its broad and flexible application makes the OR operator a vital component of SQL, providing users with the capability to refine data extraction based on various criteria. '],
        ['SQL NOT', 'SQL NOT Operator, When working with the NOT operator, it operates on Boolean logic, converting a true condition into false and a false condition into true. This inversion is crucial for identifying records that do not satisfy a particular criterion.@ The NOT operator is highly versatile, as it can be used in conjunction with other logical operators such as AND and OR. This flexibility allows users to build complex queries by combining multiple conditions, including negations, to fine-tune data retrieval.@ The NOT operator is commonly employed for situations where exclusion is required. For instance, you might want to retrieve a list of products that are not out of stock or a list of employees who are not part of a specific department. The NOT operator helps in achieving such exclusions.@ In addition to its use in the WHERE clause for data retrieval, the NOT operator can be used in other SQL operations like INSERT, UPDATE, and DELETE to specify conditions under which these operations should not be performed. It is a valuable tool for data modification and maintenance.@ The SQL NOT operator is particularly beneficial for identifying anomalies or exceptions within a dataset. By negating certain conditions, users can focus on records that deviate from the norm, making it easier to pinpoint outliers or specific data points of interest.@ In summary, the SQL NOT operator is a fundamental tool for excluding records that meet a specific condition, effectively inverting the logic of a condition to identify rows that dont match it. It is a versatile and indispensable component of SQL, providing users with the capability to build complex queries that exclude certain data based on various criteria. Whether youre looking to filter out outliers, exceptions, or specific data points, the NOT operator enables precise and effective data retrieval and analysis.'],
        ['SQL INSERT INTO', 'SQL INSERT INTO Statement, The SQL INSERT INTO statement is a fundamental command used to add new records or rows into a database table. It plays a pivotal role in data management by allowing users to insert data, be it a single row or multiple rows, into an existing database table. The INSERT INTO statement is essential for populating a database with new information, whether its for creating records of customers, products, transactions, or any other data-related task.@ To utilize the INSERT INTO statement, you start by specifying the target table to which you want to add new records. This is accomplished by specifying the table name immediately after the INSERT INTO keyword. The table must already exist in the database, with a predefined structure, including the columns into which you intend to insert data.@ Following the table name, you can provide a list of column names within parentheses, specifying which columns the new data should be inserted into. Alternatively, if you intend to insert values into all columns, you can omit the column list and simply provide the values in the same order as the columns were defined in the table.@ Values are then specified using the VALUES keyword, followed by a set of values enclosed in parentheses. The number of values must match the number of columns specified earlier. These values can be literals (e.g., numbers or strings) or expressions, depending on the data type and constraints defined for the table. @ The SQL INSERT INTO statement can be used to insert data row by row, effectively adding one record at a time. Alternatively, it can be used to insert multiple rows in a single operation, significantly enhancing the efficiency of data insertion. This is particularly valuable when working with bulk data or when importing data from external sources.The SQL INSERT INTO statement can be used to insert data row by row, effectively adding one record at a time. Alternatively, it can be used to insert multiple rows in a single operation, significantly enhancing the efficiency of data insertion. This is particularly valuable when working with bulk data or when importing data from external sources.In summary, the SQL INSERT INTO statement is a fundamental command for inserting new records or rows into a database table. It is a crucial component of data management, whether youre adding individual records or importing large datasets.'],
        ['SQL NULL Values', 'SQL NULL Values, SQL NULL values represent missing or unknown data in a database, and they play a significant role in database management and data integrity. A NULL value is distinct from an empty string or zero and serves as a placeholder for information that is not available or undefined. Understanding NULL values is essential for effectively working with relational databases and ensuring data quality.@ NULL values can be found in any column of a database table, and they indicate that a particular piece of information is missing or unrecorded. For example, a persons middle name may be NULL if it was not provided during data entry. NULL values are not the same as zero, an empty string, or a space; they represent a lack of data rather than a specific value.@ The presence of NULL values is accommodated by the ANSI SQL standard and is supported by most relational database management systems (RDBMS), including MySQL, PostgreSQL, Oracle, and SQL Server. However, handling NULL values requires special consideration, as they behave differently from other data types in SQL.@ The presence of NULL values can impact the results of aggregate functions like COUNT, SUM, AVG, and others. When used in combination with these functions, NULL values are typically excluded from calculations, as they represent missing data. This behavior can significantly affect data analysis and reporting, so its essential to consider NULL values when designing database schemas and performing data analysis.@ Another important aspect to consider is the use of NULL values in foreign keys and relationships between tables. In SQL, a foreign key can contain NULL values to represent optional or incomplete relationships. This design choice allows for flexible data modeling, as not every record must be associated with another.@ To address the challenges associated with NULL values, SQL provides the COALESCE and CASE expressions, which allow for the replacement of NULL values with specific values or conditions. These expressions can be employed in SELECT statements to control how NULL values are displayed or handled in result sets.@. '],
      ])
    },{
      id:'13',
      title:'MONGO DB ',
      sidebar:new Map([
        ['Mongo DB HOME','**https://tutorialseye.com/wp-content/uploads/MongoDB-%E2%80%93-Introduction.png**MongoDB Tutorial, MongoDB, often referred to as a NoSQL database, is a home for flexible and versatile data storage solutions. At the heart of MongoDB lies its innovative approach to data management. Unlike traditional relational databases, MongoDB embraces a document-oriented data model, where data is stored in flexible, schema-less documents resembling JSON. This unique architecture provides a cozy and accommodating environment for various types of data, making it ideal for a wide range of applications.@ MongoDBs home is characterized by its ability to scale horizontally, accommodating growing data volumes seamlessly. Whether youre dealing with a personal project or an enterprise-level system, MongoDB can scale to meet your demands. This scalability is achieved through a distributed architecture that allows data to be stored on multiple servers, fostering reliability and performance.@ In MongoDBs home, data is organized into collections, which are akin to tables in traditional databases. These collections serve as a place to gather related data, ensuring that information is neatly organized. Additionally, within these collections, MongoDB provides powerful querying capabilities, allowing users to retrieve and manipulate data with ease.@ One of the remarkable features of MongoDBs home is its support for geospatial data, which is perfect for applications involving location-based services, mapping, and geographic analysis. It offers a comfortable and welcoming environment for handling geographic information.@ Moreover, MongoDBs home includes robust indexing capabilities, ensuring that data retrieval is fast and efficient. Indexes are essential for speeding up query performance, and MongoDB provides various indexing options to suit different use cases.@The community and support around MongoDB create a vibrant and active ecosystem. Users can find extensive documentation, a supportive community forum, and enterprise-level support options. MongoDBs home is built on a foundation of collaboration and assistance.@ As a part of the modern data landscape, MongoDBs home is not confined to traditional server deployments. It extends its reach to the cloud, making it accessible and adaptable for various cloud platforms, including AWS, Azure, and Google Cloud. This flexibility ensures that MongoDB is a cozy fit for cloud-native applications and deployment models.'],
        ['Mongo DB Getting Started', 'MongoDB Getting Started, Getting started with MongoDB is a straightforward journey into the world of NoSQL databases. MongoDB is an open-source, document-oriented database known for its flexibility, scalability, and ease of use. Whether youre a developer, data analyst, or database administrator, MongoDB offers a friendly and accessible environment for managing and storing data.@To begin your MongoDB adventure, the first step is to download and install MongoDB. The official website provides comprehensive installation instructions for various platforms, making it easy to set up your database. MongoDB offers both a Community Edition, which is free to use, and an Enterprise Edition, which comes with additional features and support.@ As you delve further into MongoDB, its important to understand how data is organized. MongoDB stores data in databases, collections, and documents. A database can contain multiple collections, and each collection contains documents. Documents can vary in structure within a collection, making MongoDB particularly suitable for applications with evolving data requirements.@ To take full advantage of MongoDB, consider learning about indexes, which help enhance query performance. Indexes are crucial for optimizing data retrieval, and MongoDB offers various types of indexes to suit different use cases.@ Security is a paramount concern in any database environment, and MongoDB provides features like authentication, role-based access control, and encryption to protect your data. Its advisable to secure your MongoDB instances to ensure that your data remains private and confidential.@ MongoDB offers a comfortable and adaptable space in the cloud, with support for various cloud platforms like AWS, Azure, and Google Cloud. This makes it an excellent choice for cloud-native applications and modern deployment models.@ To enhance your MongoDB skills and troubleshoot any issues, you can explore the extensive documentation, join the MongoDB community forum, or consider enterprise-level support options. The MongoDB community is vibrant and actively engaged in helping users get the most out of their database.@ Its flexible data model, scalability, querying capabilities, security features, cloud compatibility, and robust community support make it an excellent choice for a wide range of applications and use cases. Dive into MongoDB and start your journey into the world of NoSQL databases today.'],
        ['Mongo DB Query API', 'MongoDB Query API, The MongoDB Query API is a versatile and user-friendly tool that simplifies data retrieval and manipulation in MongoDB, a popular NoSQL database. It provides developers, database administrators, and data analysts with an intuitive interface for interacting with MongoDB data. The Query API offers a comfortable and efficient environment for creating and executing queries, enabling users to extract, filter, and process data in a flexible and convenient manner.@ With the MongoDB Query API, you can perform a wide range of queries to meet your specific data needs. It offers support for simple queries, complex aggregations, geospatial queries, and full-text search, making it a comprehensive tool for data analysis and reporting.@ One of the highlights of the Query API is its ability to leverage the expressive MongoDB Query Language (MQL). MQL is a powerful language designed for MongoDB that simplifies data querying and manipulation. It allows users to specify query conditions, projection of fields, and sort orders with ease.@ The Query API also provides advanced querying features like indexes, which help optimize query performance. By creating appropriate indexes on your data, you can significantly enhance query speed and efficiency. The Query API integrates seamlessly with MongoDBs indexing capabilities, allowing you to create and manage indexes effortlessly.@ A distinguishing feature of the MongoDB Query API is its geospatial capabilities, which facilitate location-based queries and analysis. Users can perform geospatial queries to find locations within a specific radius or to analyze geographic data. This feature is invaluable for applications involving mapping, location-based services, and spatial data.@ For security and data integrity, the Query API includes authentication and authorization mechanisms. These features ensure that data access is restricted to authorized users and that sensitive information remains protected.@ In addition to its rich querying capabilities, the Query API is backed by a supportive and active community. MongoDB provides comprehensive documentation, tutorials, and a community forum where users can seek assistance, share insights, and troubleshoot issues.'],
        ['Mongo DB Create Database', 'MongoDB mongosh Create Database, Creating a database in MongoDB using the MongoDB Shell (mongosh) is a straightforward process, and its the first step towards organizing and managing your data. MongoDB is a popular NoSQL database that uses a document-oriented model to store and manage data. With mongosh, you have a user-friendly command-line interface to interact with MongoDB, and creating a database is as simple as executing a command.@ To create a database in MongoDB using mongosh, you initiate the process by opening the shell and connecting to a MongoDB server or cluster. Once connected, you can create a new database by specifying its name as a parameter within the command. Its essential to remember that in MongoDB, databases are created implicitly when you first insert data into a collection within a non-existent database.@ Unlike traditional relational databases, MongoDB doesnt require you to predefine the schema for your database. Its schema-less, meaning that you can insert documents with different structures into the same collection without any prior schema definition. This flexibility is one of MongoDBs key features, making it a comfortable home for a wide variety of data types and applications.@ In MongoDB, databases are essentially containers for collections, which are similar to tables in relational databases. Collections are where you store documents, and you can have multiple collections within a single database. This allows for a logical organization of data by grouping related documents together.@Creating a database in MongoDB is an efficient process. You simply specify the name of the database in the command, and its created for you. However, its important to note that databases are not immediately visible in the mongosh interface until you insert data into them by creating collections and inserting documents. As soon as you perform these actions, the database becomes visible and usable within mongosh.@ When creating a new database in MongoDB, its important to consider security and access control. You can set up authentication and user roles to ensure that only authorized users have access to your data. MongoDB provides robust security features to protect your databases from unauthorized access.@ '],
        ['Mongo DB Create Collection','MongoDB mongosh Create Collection, Creating a collection in MongoDB using the mongosh shell is a fundamental step in organizing and managing your data. MongoDB is a popular NoSQL database that utilizes a document-oriented model to store and manipulate data. Collections are at the core of MongoDBs data structure, serving as containers for documents. With the mongosh shell, the process of creating a collection is straightforward and efficient.@ To create a collection in MongoDB using mongosh, you begin by connecting to your MongoDB server or cluster. Once connected, you can issue a command to create a new collection, specifying its name as a parameter within the command. Collections are created explicitly, and you can choose a name that reflects the type of data it will hold.@ MongoDB collections are schema-less, meaning that they dont require a predefined structure. Unlike traditional relational databases, you dont need to specify the fields and data types in advance. This flexibility allows you to insert documents with varying structures into the same collection, making MongoDB a versatile choice for handling diverse data types.@ Collections are designed to group related documents together. Within a single database, you can have multiple collections to logically organize your data. This helps you maintain data separation and manage different types of information within the same database.@ Once a collection is created, you can start inserting documents into it. MongoDB documents are akin to rows in traditional databases, but they are JSON-like objects that store data. This flexibility allows you to work with various data types, including complex nested structures, making MongoDB suitable for applications with evolving data requirements.@ When creating a collection, its crucial to consider naming conventions and best practices. Choose a name that is descriptive and meaningful for the data it will store. MongoDBs collection naming conventions often follow a lowercase and pluralized format, but you are free to choose a naming convention that suits your application.@ Security and access control are vital aspects to consider when working with collections in MongoDB. You can set up authentication, user roles, and access permissions to ensure that only authorized users have the ability to interact with your collections. MongoDB provides robust security features to safeguard your data and maintain data integrity.@ '],
        ['Mongo DB Insert', 'MongoDB mongosh Insert, Inserting data into MongoDB collections using the mongosh shell is a fundamental operation for building and managing your database. MongoDB is a NoSQL database renowned for its flexibility and scalability, and it uses a document-oriented model that accommodates a wide range of data types and structures. Inserting data is a crucial step in populating your collections and making your database functional.@ To insert data into a MongoDB collection using mongosh, you first need to be connected to your MongoDB server or cluster. Once youre connected, you can execute the insert operation by specifying the collection where you want to add data and providing the documents you want to insert. MongoDB uses BSON (Binary JSON) documents, which are JSON-like objects, to store data. The flexibility of these documents allows you to work with structured and semi-structured data, making MongoDB a versatile choice for various data types.@ When inserting documents, you can add as many fields and values as needed, and you can even nest documents within documents to create complex data structures. This flexibility enables you to work with hierarchical and multi-dimensional data easily.@  important to consider data validation and data types when inserting documents. While MongoDB doesnt enforce a strict schema, you can still implement validation rules and data type checks to ensure data quality and consistency. These checks can be configured using features like validation rules and schema validation.@ Additionally, when inserting data, its crucial to think about security and access control. MongoDB offers robust authentication and authorization mechanisms to protect your data. By setting up user roles and access permissions, you can ensure that only authorized users can perform insert operations on your collections.@  Remember to consider data validation, data types, security, and access control to maintain data quality and integrity.'],
        ['Mongo DB Find', 'MongoDB mongosh Find, To start using find, you need to be connected to your MongoDB server or cluster within the mongosh shell. Once connected, you can issue the find command on a specific collection, providing a query that outlines the criteria you want to use for document retrieval.@ MongoDB uses BSON (Binary JSON) documents to store data, and the find operation allows you to specify conditions that the documents must meet to be included in the query result. These conditions can be simple or complex and may involve fields, values, comparison operators, and logical operators, making it flexible for a wide range of use cases.@ The find operation can be used to filter documents based on specific fields and values. For instance, you can search for all documents where a particular field matches a given value, or you can search for documents that contain a specific nested field with a certain value.@ The find operation supports various query options and modifiers. You can use projection to specify which fields to include in the result or control how the result documents are presented. You can sort the result by one or more fields, in ascending or descending order, to tailor the presentation of data. The find operation also allows for limiting the number of documents returned, skipping a certain number of documents, and using skip and limit to implement pagination.@ The use of regular expressions within the find operation allows for text-based search, which is particularly useful for searching documents that contain specific patterns of text.@ One notable aspect of MongoDBs find operation is its ability to search for documents with geospatial data. This is invaluable for applications that involve location-based services, mapping, and spatial data analysis. Whether youre a developer searching for specific documents or a data analyst seeking to filter and analyze data, MongoDs find operation offers a robust solution for your data retrieval needs.'],
        ['Mongo DB Query Operators', 'MongoDB Query Operators, MongoDB Query Operators are essential tools for performing advanced data retrieval and manipulation in MongoDB, a widely used NoSQL database. These operators allow for precise and complex queries, providing users with the ability to filter, sort, and analyze data effectively.@ Query operators in MongoDB encompass a wide range of functionalities. Some of the most common ones include the comparison operators, such as $eq (equals), $ne (not equals), $gt (greater than), $lt (less than), $gte (greater than or equal to), and $lte (less than or equal to). These operators enable the selection of documents based on specific field values, allowing for data filtering.@ Logical operators, including $and, $or, and $not, play a pivotal role in combining multiple conditions within a query. These operators help users construct complex queries by specifying logical relationships between different criteria. For example, you can use $and to require that multiple conditions are met simultaneously.@ Regular expressions are supported by the $regex operator, enabling text-based search based on patterns. This is particularly useful for searching documents that contain specific textual patterns or expressions.@ The $type operator allows for querying documents based on the data type of a field. For instance, you can find documents where a particular field is of a specific type, like a string or an array.@ The $all operator is used for querying documents that contain all the specified values in an array field. This is useful when you want to find documents that match multiple values within an array.@ Whether youre a developer building complex queries or a data analyst performing detailed analysis, MongoDB Query Operators provide the versatility and precision required for your data retrieval tasks.'],
      ])
    },
    {
      id: '14',
      title: 'BOOTSTRAP',
      sidebar: new Map([
        ['Introduction', 'What is Bootstrap?@Bootstrap is a front-end framework that enables web developers to create responsive and visually appealing websites quickly and efficiently. Its designed to streamline the web development process by offering a set of ready-made, customizable components and styles that work seamlessly across different devices and screen sizes.@Key Features of Bootstrap:@Responsive Design: Bootstrap is known for its mobile-first approach, ensuring that websites built with it are responsive and adapt to various screen sizes, from desktops to smartphones.@Grid System: Bootstrap provides a powerful grid system that simplifies layout and alignment, allowing developers to create complex page structures with ease.@Pre-designed Components: It offers a wide range of components such as navigation bars, buttons, forms, modals, and more. These components can be easily customized to match your websites design.@CSS and JavaScript Utilities: Bootstrap includes a collection of CSS classes and JavaScript plugins that enhance functionality and style.@Extensive Documentation: Bootstraps official documentation is comprehensive and easy to follow, making it accessible to developers of all skill levels.@Community Support: Being open source, Bootstrap has a strong community of developers who contribute to its growth. This means you can find numerous third-party themes, templates, and extensions to extend its functionality.@How to Get Started with Bootstrap:@Download Bootstrap: You can download Bootstrap from the official website (getbootstrap.com) or link to it through a content delivery network (CDN).@Include Bootstrap: Add Bootstraps CSS and JavaScript files to your HTML document. You can do this by downloading the necessary files or linking to them via a CDN.@Utilize Components: Use the predefined components and styles provided by Bootstrap to build your website. You can modify these components to match your design needs.@Customize: Customize the default Bootstrap styles by overriding the CSS classes and styles to make your site unique.@Responsive Design: Ensure your website is responsive by using Bootstraps grid system and responsive classes.@Test and Debug: Test your site on different devices and browsers to ensure it works as expected. Debug any issues as needed.'],
        ['Grid System', 'The grid system in Bootstrap is a fundamental feature that allows web developers to create responsive and well-structured layouts for their websites. Its based on a 12-column grid, and its essential to understand how it works to build flexible and adaptable designs. Heres some content on the grid system in Bootstrap:@Understanding the Bootstrap Grid System@Bootstraps grid system is a powerful tool for creating responsive layouts. It divides the web page into a 12-column grid, which can be adjusted to create layouts for various screen sizes. Here are the key aspects of the Bootstrap grid system:@1. Container:@In Bootstrap, a grid is contained within a container. The container can be either fixed-width or full-width, and its used to wrap your grid to control the layouts width.@.container: Creates a responsive fixed-width container.@.container-fluid: Creates a full-width container that spans the entire width of the viewport.@2. Rows:@Inside a container, you create rows. Rows serve as horizontal groups for columns and ensure proper alignment within the grid.@<div class="row">...</div>@3. Columns:@Within each row, you can place columns. Columns are used to distribute content horizontally and can vary in width according to the grid system. The sum of column widths in a row should equal 12.@.col-{breakpoint}-{number}: Defines the width of a column at a specific breakpoint. Replace {breakpoint} with "xs" (extra small), "sm" (small), "md" (medium), "lg" (large), or "xl" (extra large), and {number} with a value between 1 and 12.@For example:@.col-12: A full-width column on all screen sizes.@.col-sm-6: A half-width column on small screens and full-width on larger screens.@4. Offset and Nesting:@You can add offsets to columns to create space between them. Additionally, you can nest columns within other columns to create more complex layouts.@.offset-{breakpoint}-{number}: Adds an offset to a column at a specific breakpoint.@Nesting: Place rows and columns within other columns to create intricate designs.@5. Responsive Design:@Bootstraps grid system is designed with mobile-first responsiveness in mind. This means that columns stack on top of each other for smaller screens and adjust their width as the screen size increases.'],
        ['Typography' , 'Typography in Bootstrap plays a crucial role in defining the visual style and readability of your websites content. Heres an explanation of the typography features and principles in Bootstrap without including specific code examples.@1. Fonts and Typefaces:Bootstrap uses a clean and legible sans-serif font for its base typography. This choice ensures that text is easy to read on a variety of devices and screen sizes. You can further customize the typefaces to match your websites branding.@2. Font Sizes:Bootstrap provides a consistent and responsive set of font sizes, which allows you to create hierarchy and emphasize important content. Text can be adjusted for various screen sizes, ensuring readability on both large desktop screens and small mobile devices.@3. Line Height:Proper line height, also known as leading, is essential for readability. Bootstraps typography maintains an optimal line height for various font sizes, making sure text is comfortably spaced for readers.@4. Font Weights:Bootstrap includes font-weight classes to control the thickness of the text. This is particularly useful for headings and emphasis. You can use classes like .font-weight-bold for bold text.@5. Text Transform:You can easily change the capitalization of text using Bootstrap classes. For instance, you can make text uppercase or lowercase as needed.@6. Text Alignment:Bootstrap offers classes for aligning text within its containers. You can use classes like .text-center to center-align text or .text-right for right-aligning text.@7. Color and Background:Bootstrap provides classes for setting text color and background color. This allows you to create visually appealing text styles and highlights.@8. Display and Lead:Bootstrap includes classes like .display-1 and .lead to create large display text and lead paragraphs. These are often used for headings and introductory content.@9. Lists and Indentation:Lists, both ordered and unordered, can be styled to improve the readability of content. Bootstrap provides classes for adding list icons and indentation.@10. Blockquotes:Blockquotes can be customized with Bootstrap classes, allowing you to style quotes within your content.'],
        ['Modals', 'Modals in Bootstrap are an essential component that allows you to display additional content or interact with users without navigating away from the current page. Heres an explanation of modals in Bootstrap without specific code examples:@ What are Modals in Bootstrap?@Modals are pop-up dialog boxes or overlays that appear on top of the main content of a web page. They are used to display additional information, gather user input, or confirm actions without navigating to a new page. Modals are a great way to keep users focused on a specific task or piece of content while temporarily blocking out the rest of the page.@Key Characteristics of Modals:@Content: Modals can contain various types of content, including text, forms, images, videos, or any HTML element.@Interaction: Users can interact with the content inside the modal, such as filling out a form, clicking buttons, or closing the modal.@Visibility: Modals are typically hidden by default and appear when triggered by a user action, such as clicking a button or a link.@Overlay: When a modal is active, it often includes a semi-transparent overlay that covers the background content, drawing the users focus to the modal itself.@Close Options: Modals typically have a close button (X), and they can be closed by clicking outside the modal or pressing the Esc key.@Common Use Cases for Modals:@User Feedback: Modals are used for displaying success messages, error messages, or confirmation dialogs after user actions like form submissions.@Login and Signup Forms: Modals can contain login and registration forms, which offer a seamless user experience without navigating to a different page.@Image Galleries: Modals are often employed to display images or image galleries with navigation controls.@Video Players: Videos can be presented in modals to allow users to watch content without leaving the current page.@Product Details: E-commerce websites often use modals to show detailed product information, reviews, and images when a user clicks on a product.@Information Display: You can use modals to provide additional information, such as terms and conditions, privacy policies, or help documentation.@Customization and Styling:@Bootstrap provides a flexible framework for creating and styling modals. You can easily customize the appearance of modals to match your websites design, including their size, color, and content.' ],
        ['Tooltips and Popovers','Tooltips and popovers in Bootstrap are small, interactive UI elements that provide supplementary information or functionality when users hover over or click on an element. They are great for offering brief explanations, additional details, or actions without cluttering the main content. Heres an explanation of tooltips and popovers in Bootstrap:@Tooltips in Bootstrap:@A tooltip is a small pop-up box that appears when a user hovers over an element, typically a link or icon. Tooltips are used to provide additional information about the element or to clarify its purpose. Here are some key points about tooltips in Bootstrap:@Trigger: Tooltips are triggered by user interactions, usually mouse hover, but you can also trigger them on focus or click.@Content: Tooltip content can include plain text or HTML, allowing you to display images, links, or formatted text within the tooltip.@Positioning: Bootstrap tooltips automatically adjust their position to stay within the viewport. This ensures they are always visible to the user.@Customization: You can customize the appearance of tooltips, including their color, size, and other visual properties, to match your sites design.@Accessibility: Bootstrap tooltips are designed to be accessible, ensuring that they are usable by people with disabilities and are compatible with screen readers.@Popovers in Bootstrap:@A popover is similar to a tooltip but provides more detailed information and may include interactive content like forms or buttons. Popovers are triggered by a click event and are often used for actions that require user input or involve more information. Here are some key points about popovers in Bootstrap:@Trigger: Popovers are triggered by a users click event and can also be customized to appear on hover or focus.@Content: Popovers can contain more complex content, such as forms, images, links, or even embedded videos. This makes them suitable for actions like creating or editing items.@Positioning: Like tooltips, popovers adjust their position to fit within the viewport and remain user-friendly.@Customization: You can customize the appearance of popovers to match your sites design, just as with tooltips.@Accessibility: Bootstrap popovers are designed with accessibility in mind, ensuring that users with disabilities can interact with them effectively.'],
      ]),
    },
    {
      id:'15',
      title:'JQUERY',
      sidebar:new Map([
        ['jQuery HOME','jQuery Tutorial, jQuery is a JavaScript Library. jQuery greatly simplifies JavaScript programming.jQuery is easy to learn.Our "Try it Yourself" editor makes it easy to learn jQuery. You can edit code and view the result in your browser. Use the correct selector to hide all <p> elements.@'],
        ['jQuery Intro', 'jQuery Introduction, The purpose of jQuery is to make it much easier to use JavaScript on your website.Before you start studying jQuery, you should have a basic knowledge of:HTML, CSS and Javascript.jQuery is a lightweight, "write less, do more", JavaScript library.@ The purpose of jQuery is to make it much easier to use JavaScript on your website.jQuery takes a lot of common tasks that require many lines of JavaScript code to accomplish, and wraps them into methods that you can call with a single line of code.jQuery also simplifies a lot of the complicated things from JavaScript, like AJAX calls and DOM manipulation.The jQuery library contains the following features: HTML/DOM manipulation, CSS manipulation, HTML event methods, Effects and animations, AJAX and Utilities. In addition, jQuery has plugins for almost any task out there.@ There are lots of other JavaScript libraries out there, but jQuery is probably the most popular, and also the most extendable.@ Many of the biggest companies on the Web use jQuery, such as:Google, Microsoft, IBM and Netflix. The jQuery team knows all about cross-browser issues, and they have written this knowledge into the jQuery library. jQuery will run exactly the same in all major browsers.'],
        ['jQuery Get Started','jQuery Get Started, There are several ways to start using jQuery on your web site. You can:Download the jQuery library from jQuery.com or Include jQuery from a CDN, like Google. There are two versions of jQuery available for downloading: Production version - this is for your live website because it has been minified and compressed and Development version - this is for testing and development (uncompressed and readable code). Both versions can be downloaded from jQuery.com.@ The jQuery library is a single JavaScript file, and you reference it with the HTML <script> tag (notice that the <script> tag should be inside the <head> section). Place the downloaded file in the same directory as the pages where you wish to use it.If you dont want to download and host jQuery yourself, you can include it from a CDN (Content Delivery Network).@ Google is an example of someone who host jQuery. One big advantage of using the hosted jQuery from Google:Many users already have downloaded jQuery from Google when visiting another site. As a result, it will be loaded from cache when they visit your site, which leads to faster loading time. Also, most CDNs will make sure that once a user requests a file from it, it will be served from the server closest to them, which also leads to faster loading time.'],
        ['jQuery Syntax', 'jQuery Syntax,With jQuery you select (query) HTML elements and perform "actions" on them.The jQuery syntax is tailor-made for selecting HTML elements and performing some action on the element(s). Basic syntax is: $(selector).action(). A $ sign to define/access jQuery, A (selector) to "query (or find)" HTML elements and A jQuery action() to be performed on the element(s). @jQuery uses CSS syntax to select elements. You will learn more about the selector syntax in the next chapter of this tutorial.Tip: If you dont know CSS, you can read our CSS Tutorial.You might have noticed that all jQuery methods in our examples, are inside a document ready event.This is to prevent any jQuery code from running before the document is finished loading (is ready).@ It is good practice to wait for the document to be fully loaded and ready before working with it. This also allows you to have your JavaScript code before the body of your document, in the head section.Here are some examples of actions that can fail if methods are run before the document is fully loaded:Trying to hide an element that is not created yet.Trying to get the size of an image that is not loaded yet. Tip: The jQuery team has also created an even shorter method for the document ready event. Use the syntax you prefer. We think that the document ready event is easier to understand when reading the code.@'],
        ['jQuery Selectors','jQuery Selectors, jQuery selectors are one of the most important parts of the jQuery library.jQuery selectors allow you to select and manipulate HTML element(s).jQuery selectors are used to "find" (or select) HTML elements based on their name, id, classes, types, attributes, values of attributes and much more. Its based on the existing CSS Selectors, and in addition, it has some own custom selectors.All selectors in jQuery start with the dollar sign and parentheses: $().The jQuery element selector selects elements based on the element name.You can select all <p> elements on a page like this.When a user clicks on a button, all <p> elements will be hidden.The jQuery #id selector uses the id attribute of an HTML tag to find the specific element.An id should be unique within a page, so you should use the #id selector when you want to find a single, unique element.To find an element with a specific id, write a hash character, followed by the id of the HTML element.@ When a user clicks on a button, the element with id="test" will be hidden.The jQuery .class selector finds elements with a specific class.To find elements with a specific class, write a period character, followed by the name of the class@ When a user clicks on a button, the elements with class="test" will be hidden.Use our jQuery Selector Tester to demonstrate the different selectors.For a complete reference of all the jQuery selectors, please go to our jQuery Selectors Reference.@ If your website contains a lot of pages, and you want your jQuery functions to be easy to maintain, you can put your jQuery functions in a separate .js file.When we demonstrate jQuery in this tutorial, the functions are added directly into the <head> section. However, sometimes it is preferable to place them in a separate file, like this (use the src attribute to refer to the .js file).'],
        ['jQuery Events','jQuery Event Methods,jQuery is tailor-made to respond to events in an HTML page.All the different visitors actions that a web page can respond to are called events.An event represents the precise moment when something happens.Examples: moving a mouse over an element,selecting a radio button and clicking on an element.The term "fires/fired" is often used with events. Example: "The keypress event is fired, the moment you press a key".Here are some common DOM events.@In jQuery, most DOM events have an equivalent jQuery method. To assign a click event to all paragraphs on a page, you can do this.The next step is to define what should happen when the event fires. You must pass a function to the event.@ The $(document).ready() method allows us to execute a function when the document is fully loaded. This event is already explained in the jQuery Syntax chapter.click(). The click() method attaches an event handler function to an HTML element.The function is executed when the user clicks on the HTML element. The following example says: When a click event fires on a <p> element; hide the current <p> element.@The dblclick() method attaches an event handler function to an HTML element.The function is executed when the user double-clicks on the HTML element.The mouseenter() method attaches an event handler function to an HTML element.The function is executed when the mouse pointer enters the HTML element.The mouseleave() method attaches an event handler function to an HTML element. The function is executed when the mouse pointer leaves the HTML element.@ The mousedown() method attaches an event handler function to an HTML element.The function is executed, when the left, middle or right mouse button is pressed down, while the mouse is over the HTML element.The hover() method takes two functions and is a combination of the mouseenter() and mouseleave() methods.The first function is executed when the mouse enters the HTML element, and the second function is executed when the mouse leaves the HTML element'],
        ['jQuery Hide and Show', 'jQuery Effects - Hide and Show,Hide, Show, Toggle, Slide, Fade, and Animate. WOW.With jQuery, you can hide and show HTML elements with the hide() and show() methods.The optional speed parameter specifies the speed of the hiding/showing, and can take the following values: "slow", "fast", or milliseconds.@The optional callback parameter is a function to be executed after the hide() or show() method completes (you will learn more about callback functions in a later chapter).The following example demonstrates the speed parameter with hide().You can also toggle between hiding and showing an element with the toggle() method.Shown elements are hidden and hidden elements are shown.@ The optional speed parameter can take the following values: "slow", "fast", or milliseconds.@The optional callback parameter is a function to be executed after toggle() completes.'],
        ['jQuery Fade','jQuery Effects - Fading, With jQuery you can fade elements in and out of visibility.With jQuery you can fade an element in and out of visibility.The jQuery fadeIn() method is used to fade in a hidden element. jQuerys "fadeIn" effect is a valuable tool in web development, allowing for smooth transitions that enhance user experience. It gradually increases the opacity of elements, making them appear elegantly on the page. On the flip side, "fadeOut" decreases opacity, causing elements to disappear gradually. A combination of both methods can create sequences of fading elements, which is ideal for showcasing images in galleries or implementing image sliders.@ These fade effects can be visually appealing when paired with proper CSS styles. They are also accessible, ensuring a seamless user experience for all. By using them judiciously, websites can achieve a polished and professional appearance. Integrating these effects in jQuery is straightforward, requiring the selection of elements using jQuery selectors and applying the fade methods accordingly.@ These fade effects can be combined with event listeners to create interactive user interfaces. For example, a button click can trigger a fade effect on a selected element. Additionally, these methods work well with other jQuery features and plugins, allowing for a wide range of possibilities in web development.@ Combining fade effects with other jQuery animations can result in more complex and engaging transitions. By chaining animations together, sequences of effects can be created, adding a touch of sophistication to web design. The fade effect is not limited to single elements but can be applied to entire sections of a webpage.@ In addition to their aesthetic appeal, fade effects are invaluable for generating loading indicators, which are commonly employed for loading screens and content-heavy pages. Whether its for creating a gallery, enhancing user interface elements, or adding subtle elegance to your website, jQuerys fade effects are versatile tools that can significantly improve the visual and interactive aspects of web development.'],
        ['jQuery Slide', 'jQuery Effects - Sliding, jQuerys "slide" effect is a powerful tool for web development, enabling seamless and engaging transitions on web pages. It allows elements to smoothly slide into view or out of sight, enhancing the user experience. This effect is commonly achieved using methods like "slideDown" and "slideUp." "slideDown" gently reveals elements by expanding their height, making them gradually appear on the page, while "slideUp" smoothly conceals elements by reducing their height. These methods are often used for creating collapsible menus, tooltips, and accordions.@ The "slideToggle" method provides a simple way to toggle between sliding in and out with a single function call, making it ideal for interactive elements such as navigation menus. When combined with event listeners, you can easily create interactive user interfaces. The "slideTo" method, similar to "fadeTo," offers precise control over an elements sliding animation, allowing you to specify the final height. This is particularly useful for intricate user interface interactions.@ The "slide" effect can be creatively used in conjunction with various HTML elements to achieve desired visual effects. It can be applied to divs, images, and text, adding a dynamic and polished touch to web design. Its versatility allows you to create visually appealing loading indicators, which are especially valuable for loading screens and content-heavy pages. The integration of "slide" effects is straightforward, and the effects are accessible, ensuring a positive user experience.@ By employing the "slide" effect judiciously, web developers can achieve an elegant and professional look for their websites. Whether youre designing interactive menus, revealing hidden content, or adding finesse to your websites transitions, jQuerys "slide" effects are indispensable tools that contribute significantly to the visual and interactive aspects of web development.'],
        ['jQuery Animate', 'jQuery Effects - Animation,jQuerys "animate" function is a powerful and versatile tool for creating complex and custom animations on web pages. With "animate," web developers can precisely control the transition of CSS properties over time, providing a wide range of possibilities for enhancing the user experience. Unlike other jQuery methods like "fade" or "slide," "animate" is not limited to specific effects; it offers complete control over animations. This function allows you to define custom animations by specifying the CSS properties, target values, duration, and easing functions.@ Using "animate," you can seamlessly change properties like width, height, margin, padding, and even CSS transformations. This level of flexibility makes it ideal for crafting unique and dynamic user interfaces. You can animate elements to move, rotate, scale, or morph, providing a dynamic and interactive feel to your website. The ability to create complex animations by chaining multiple property changes makes it a valuable tool for animating anything from simple elements to sophisticated interactive components.@ By providing a duration for the animation, you control how fast or slow the transition occurs. This makes it possible to create both rapid and gradual animations, depending on the desired effect. Additionally, easing functions like "swing" or "linear" can be employed to fine-tune the animations speed curve, allowing for smooth transitions or more abrupt changes.@The "animate" function is particularly useful for creating interactive elements that respond to user actions. By attaching "animate" to events like clicks or hovers, you can create engaging user interfaces that react to user input. Moreover, you can specify callback functions to execute actions after the animation is complete, adding a layer of interactivity to your web applications.By making efficient use of "animate," web developers can craft visually stunning and interactive websites that captivate users. Whether its for enhancing user interfaces, adding interactivity, or making your website stand out with unique animations, "animate" offers a wealth of possibilities for web development, making it an essential tool in the jQuery toolkit'],
        ['jQuery Callback', 'jQuery Callback Functions, In jQuery, callbacks are a fundamental concept, serving as a powerful tool for managing asynchronous operations and enhancing the control and flexibility of web applications. Callbacks are functions that are executed after a specific event or operation, often at a designated point in the code. They are commonly used to handle asynchronous tasks such as animations, AJAX requests, and user interactions.@ Callbacks play a crucial role in ensuring that functions are executed in a specific order, especially when dealing with operations that have variable durations. For example, when working with animations, you can use callbacks to define actions that should occur once an animation is completed. This allows for precise control over the timing of events, ensuring that subsequent actions dont start until the previous one has finished.In the context of AJAX requests, callbacks are employed to handle the response data from the server. This ensures that the code doesnt proceed until the data is successfully retrieved, making it possible to process and display the data as needed. AJAX callbacks also allow for error handling, enabling developers to manage various scenarios, such as server errors or network issues.@ Callbacks can also be used for chaining multiple actions in a sequence, ensuring that one action is executed only after the previous one is completed. This is particularly valuable when working with animations, as it allows for the creation of intricate sequences of visual effects.@ The concept of callbacks extends to error handling as well. Developers can define error callbacks to manage unexpected issues or exceptions that may arise during the execution of an operation. This ensures that the application gracefully handles errors and provides a better user experience.@ Callbacks are a crucial aspect of asynchronous programming, allowing developers to create more efficient and responsive web applications. They enhance the modularity and maintainability of code by breaking it into smaller, manageable pieces. This not only simplifies the development process but also makes it easier to debug and maintain the codebase.'],
        ['jQuery Chaining', 'jQuery - Chaining, jQuery chaining is a powerful and elegant technique in web development that allows developers to streamline and simplify their code, resulting in more readable and maintainable scripts. Chaining is based on the principle that jQuery methods return jQuery objects themselves, which can be further manipulated with additional methods. This means that you can perform a sequence of operations on the same set of elements in a single line of code, making it a highly efficient way to work with the Document Object Model (DOM).@ One of the key benefits of chaining is its ability to improve code clarity. By chaining multiple methods together, developers can create a logical sequence of actions that is easy to understand and follow. This results in code that is more concise and less cluttered, enhancing code readability and reducing the need for unnecessary temporary variables.@ Chaining is particularly valuable when working with multiple elements. Instead of applying the same set of methods individually to each element, you can use chaining to apply the methods to the entire collection of elements in a single statement. This reduces redundancy and simplifies the code significantly, making it easier to manage and update.@ Chaining can also be employed with events. You can attach multiple event handlers to the same element, ensuring that they execute in the order they were defined. This is useful for creating complex interactions and ensuring that each action is performed systematically.@ Furthermore, chaining is a cornerstone of jQuerys "fluent interface" design. It results in code that reads like a natural language sentence, with each method seamlessly following the other. This intuitive structure improves code maintainability and makes it more accessible to developers who may not be intimately familiar with the codebase.Chaining is not only a best practice but also a fundamental concept in jQuery, contributing to cleaner, more organized, and efficient code. It streamlines the development process, reduces redundancy, and enhances code maintainability, making it a valuable technique for building dynamic and interactive web applications. Whether youre working with DOM elements, events, animations, or custom methods, jQuery chaining is a versatile approach that simplifies the development process and results in more elegant and readable code.'],
      ])
    },
    {
      id:'16',
      title:'REACT',
      sidebar:new Map([
        ['React Home','React Tutorial, React is a JavaScript library for building user interfaces.React is used to build single-page applications.React allows us to create reusable UI components.Our "Show React" tool makes it easy to demonstrate React. It shows both the code and the result.@'],
        ['React Intro','React Introduction,React, sometimes referred to as a frontend JavaScript framework, is a JavaScript library created by Facebook. React is a tool for building UI components.React creates a VIRTUAL DOM in memory.Instead of manipulating the browsers DOM directly, React creates a virtual DOM in memory, where it does all the necessary manipulating, before making the changes in the browser DOM.@ Instead of manipulating the browsers DOM directly, React creates a virtual DOM in memory, where it does all the necessary manipulating, before making the changes in the browser DOM.React only changes what needs to be changed.React finds out what changes have been made, and changes only what needs to be changed.@ You will learn the various aspects of how React does this in the rest of this tutorial.@ Current version of React.JS is V18.0.0 (April 2022).Initial Release to the Public (V0.3.0) was in July 2013.React.@ JS was first used in 2011 for Facebooks Newsfeed feature.Facebook Software Engineer, Jordan Walke, created it.Current version of create-react-app is v5.0.1 (April 2022).create-react-app includes built tools such as webpack, Babel, and ESLint.'],
        ['React Getting Started','React Getting Started, To use React in production, you need npm which is included with Node.js.To get an overview of what React is, you can write React code directly in HTML.But in order to use React in production, you need npm and Node.js installed.@ The quickest way start learning React is to write React directly in your HTML files.Start by including three scripts, the first two let us write React code in our JavaScripts, and the third, Babel, allows us to write JSX syntax and ES6 in older browsers.You will learn more about JSX in the React JSX chapter.If you have npx and Node.js installed, you can create a React application by using create-react-app.@ If youve previously installed create-react-app globally, it is recommended that you uninstall the package to ensure npx always uses the latest version of create-react-app.To uninstall, run this command: npm uninstall -g create-react-app.Run this command to create a React application named my-react-app.A new browser window will pop up with your newly created React App! If not, open your browser and type localhost:3000 in the address bar.@ So far so good, but how do I change the content?Look in the my-react-app directory, and you will find a src folder. Inside the src folder there is a file called App.js, open it and it will look like this.Try changing the HTML content and save the file.Notice that the changes are visible immediately after you save the file, you do not have to reload the browser. Replace all the content inside the <div className="App"> with a <h1> element. See the changes in the browser when you click Save.@ Notice that we have removed the imports we do not need (logo.svg and App.css). @ Now you have a React Environment on your computer, and you are ready to learn more about React.In the rest of this tutorial we will use our "Show React" tool to explain the various aspects of React, and how they are displayed in the browser.@ If you want to follow the same steps on your computer, start by stripping down the src folder to only contain one file: index.js. You should also remove any unnecessary lines of code inside the index.js file to make them look like the example in the "Show React" tool below.  Click the "Run Example" button to see the result.'],
        ['React Upgrade', 'Upgrade React, Upgrading an existing React application to version 18 only requires two steps.If you are already using the latest version of create-react-app which uses React version 18 you can skip this section.@ To install the latest version, from your project folder run the following from the terminal. In order to take advantage of React 18s concurrent features youll need to use the new root API for client rendering.Your application will work without using the new root API. If you continue to use ReactDOM.render your application will behave like React 17.@'],
        ['React Render HTML','React Render HTML, Reacts goal is in many ways to render HTML in a web page.React renders HTML to the web page by using a function called createRoot() and its method render(). The createRoot() function takes one argument, an HTML element.The purpose of the function is to define the HTML element where a React component should be displayed.@ The render() method is then called to define the React component that should be rendered. But render where?There is another folder in the root directory of your React project, named "public". In this folder, there is an index.html file.Youll notice a single <div> in the body of this file. This is where our React application will be rendered.@ Display a paragraph inside an element with the id of "root".The result is displayed in the <div id="root"> element.Note that the element id does not have to be called "root", but this is the standard convention.The HTML code in this tutorial uses JSX which allows you to write HTML tags inside the JavaScript code. Do not worry if the syntax is unfamiliar, you will learn more about JSX in the next chapter.@ Create a variable that contains HTML code and display it in the "root" node. The root node is the HTML element where you want to display the result.It is like a container for content managed by React. @ It does NOT have to be a <div> element and it does NOT have to have the id. The root node can be called whatever you like. Display the result in the <header id="sandy"> element.'],
        ['React JSX', 'React JSX, JSX stands for JavaScript XML.JSX allows us to write HTML in React.JSX makes it easier to write and add HTML in React.JSX allows us to write HTML elements in JavaScript and place them in the DOM without any createElement()  and/or appendChild() methods.JSX converts HTML tags into react elements.@ You are not required to use JSX, but JSX makes it easier to write React applications.Here are two examples. The first uses JSX and the second does not. As you can see in the first example, JSX allows us to write HTML directly within the JavaScript code.JSX is an extension of the JavaScript language based on ES6, and is translated into regular JavaScript at runtime.With JSX you can write expressions inside curly braces { }.The expression can be a React variable, or property, or any other valid JavaScript expression. JSX will execute the expression and return the result.@ To write HTML on multiple lines, put the HTML inside parentheses. The HTML code must be wrapped in ONE top level element. So if you like to write two paragraphs, you must put them inside a parent element, like a div element.@ Wrap two paragraphs inside one DIV element. JSX will throw an error if the HTML is not correct, or if the HTML misses a parent element. Alternatively, you can use a "fragment" to wrap multiple lines. This will prevent unnecessarily adding extra nodes to the DOM.A fragment looks like an empty HTML tag: <></>.JSX follows XML rules, and therefore HTML elements must be properly closed.JSX will throw an error if the HTML is not properly closed.@ The class attribute is a much used attribute in HTML, but since JSX is rendered as JavaScript, and the class keyword is a reserved word in JavaScript, you are not allowed to use it in JSX.Use attribute className instead.JSX solved this by using className instead. When JSX is rendered, it translates className attributes into class attributes.@ React supports if statements, but not inside JSX.To be able to use conditional statements in JSX, you should put the if statements outside of the JSX, or you could use a ternary expression instead:Option 1:Write if statements outside of the JSX code.Use ternary expressions instead.@ Write "Hello" if x is less than 10, otherwise "Goodbye".in order to embed a JavaScript expression inside JSX, the JavaScript must be wrapped with curly braces, {}.Render a <p> element without using JSX.'],
        ['React Components', 'React Components, Components are like functions that return HTML elements. Components are independent and reusable bits of code. They serve the same purpose as JavaScript functions, but work in isolation and return HTML.Components come in two types, Class components and Function components, in this tutorial we will concentrate on Function components.In older React code bases, you may find Class components primarily used. It is now suggested to use Function components along with Hooks, which were added in React 16.8. There is an optional section on Class components for your reference.@ When creating a React component, the components name MUST start with an upper case letter. A class component must include the extends React.Component statement. This statement creates an inheritance to React.Component, and gives your component access to React.Components functions.The component also requires a render() method, this method returns HTML.Create a Class component called Car.Here is the same example as above, but created using a Function component instead.A Function component also returns HTML, and behaves much the same way as a Class component, but Function components can be written using much less code, are easier to understand, and will be preferred in this tutorial.@ Create a Function component called Car. Now your React application has a component called Car, which returns an <h2> element.To use this component in your application, use similar syntax as normal HTML: <Car />.Display the Car component in the "root" element. Components can be passed as props, which stands for properties.Props are like function arguments, and you send them into the component as attributes.You will learn more about props in the next chapter.@Use an attribute to pass a color to the Car component, and use it in the render() function.We can refer to components inside other components.Use the Car component inside the Garage component. @ React is all about re-using code, and it is recommended to split your components into separate files.To do that, create a new file with a .js file extension and put the code inside it. Note that the filename must start with an uppercase character.To be able to use the Car component, you have to import the file in your application.@ Now we import the "Car.js" file in the application, and we can use the Car component as if it was created here.This is the new file, we named it "Car.js"'],
        ['React Class Components','React Class Components, Before React 16.8, Class components were the only way to track state and lifecycle on a React component. Function components were considered "state-less".With the addition of Hooks, Function components are now almost equivalent to Class components. The differences are so minor that you will probably never need to use a Class component in React.Even though Function components are preferred, there are no current plans on removing Class components from React.This section will give you an overview of how to use Class components in React.Feel free to skip this section, and use Function Components instead, Components are independent and reusable bits of code. They serve the same purpose as JavaScript functions, but work in isolation and return HTML via a render() function. Components come in two types, Class components and Function components, in this chapter you will learn about Class components.When creating a React component, the components name must start with an upper case letter.The component has to include the extends React.Component statement, this statement creates an inheritance to React.Component, and gives your component access to React.Components functions.The component also requires a render() method, this method returns HTML.@ Now your React application has a component called Car, which returns a <h2> element.To use this component in your application, use similar syntax as normal HTML: <Car />. Display the Car component in the "root" element. If there is a constructor() function in your component, this function will be called when the component gets initiated.The constructor function is where you initiate the components properties.In React, component properties should be kept in an object called state.You will learn more about state later in this tutorial.The constructor function is also where you honor the inheritance of the parent component by including the super() statement, which executes the parent components constructor function, and your component has access to all the functions of the parent component (React.Component).@ Create a constructor function in the Car component, and add a color property.Use the color property in the render() function.@ Another way of handling component properties is by using props.Props are like function arguments, and you send them into the component as attributes. You will learn more about props in the next chapter.@ '],
        ['React Props','React Props, Props are arguments passed into React components.Props are passed to components via HTML attributes. props stands for properties.@ React Props are like function arguments in JavaScript and attributes in HTML.To send props into a component, use the same syntax as HTML attributes. Add a "brand" attribute to the Car element.The component receives the argument as a props object.The component receives the argument as a props object.@ Props are also how you pass data from one component to another, as parameters.Send the "brand" property from the Garage component to the Car component.If you have a variable to send, and not a string as in the example above, you just put the variable name inside curly brackets.Create a variable named carName and send it to the Car component.@ Or if it was an object.Create an object named carInfo and send it to the Car component. React Props are read-only! You will get an error if you try to change their value.'],
        ['React Events','React Events, Just like HTML DOM events, React can perform actions based on user events.React has the same events as HTML: click, change, mouseover etc.React events are written in camelCase syntax:onClick instead of onclick.React event handlers are written inside curly braces:onClick={shoot}  instead of onClick="shoot()".Put the shoot function inside the Football component. To pass an argument to an event handler, use an arrow function.Send "Goal!" as a parameter to the shoot function, using arrow function.Event handlers have access to the React event that triggered the function.In our example the event is the "click" event.This will come in handy when we look at Form in a later chapter.Another way to conditionally render elements is by using a ternary operator.'],
        ['React Conditionals', 'React Conditional Rendering, In React, you can conditionally render components.There are several ways to do this.We can use the if JavaScript operator to decide which component to render.@ Well use these two components: Now, well create another component that chooses which component to render based on a condition.Try changing the isGoal attribute to true. @ Another way to conditionally render a React component is by using the && operator.We can embed JavaScript expressions in JSX by using curly braces.If cars.length > 0 is equates to true, the expression after && will render.Try emptying the cars array.Another way to conditionally render elements is by using a ternary operator.We will go back to the goal example.Return the MadeGoal component if isGoal is true, otherwise return the MissedGoal component.'],
        ['React Lists', 'React Lists, In React, you will render lists with some type of loop.The JavaScript map() array method is generally the preferred method.If you need a refresher on the map() method, check out the ES6 section.Lets render all of the cars from our garage. @ When you run this code in your create-react-app, it will work but you will receive a warning that there is no "key" provided for the list items.Keys allow React to keep track of elements. This way, if an item is updated or removed, only that item will be re-rendered instead of the entire list.@Keys need to be unique to each sibling.@ But they can be duplicated globally.Generally, the key should be a unique ID assigned to each item. As a last resort, you can use the array index as a key. Lets refactor our previous example to include keys.'],
      ])
    },{
      id:'17',
      title:'NODEJS',
      sidebar:new Map([
        ['Node.js HOME', 'Node.js Tutorial, Node.js is an open source server environment.Node.js allows you to run JavaScript on the server.Our "Show Node.js" tool makes it easy to learn Node.js, it shows both the code and the result. In this tutorial there will be some examples that are better explained by displaying the result in the command line interface.When this happens, The "Show Node.js" tool will show the result in a black screen on the right.Node.js has a set of built-in modules.@'],
        ['Node.js Intro', 'Node.js Introduction, Node.js is an open source server environment. Node.js is free.Node.js runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.) Node.js uses JavaScript on the server.Node.js uses asynchronous programming.A common task for a web server can be to open a file on the server and return the content to the client.@ Here is how PHP or ASP handles a file request:Sends the task to the computers file system. Waits while the file system opens and reads the file.Returns the content to the client.Ready to handle the next request.Here is how Node.js handles a file request. Sends the task to the computers file system.Ready to handle the next request.When the file system has opened and read the file, the server returns the content to the client. Node.js eliminates the waiting, and simply continues with the next request.@ Node.js runs single-threaded, non-blocking, asynchronous programming, which is very memory efficient.Node.js can generate dynamic page content.Node.js can create, open, read, write, delete, and close files on the server.Node.js can collect form data.Node.js can add, delete, modify data in your database.Node.js files contain tasks that will be executed on certain events. A typical event is someone trying to access a port on the server. Node.js files must be initiated on the server before having any effect. Node.js files have extension.'],
        ['Node.js Get Started', 'Node.js Get Started, Once you have downloaded and installed Node.js on your computer, lets try to display "Hello World" in a web browser.Create a Node.js file named myfirst.js, and add the following code. The code tells the computer to write "Hello World!" if anyone (e.g. a web browser) tries to access your computer on port 8080.For now, you do not have to understand the code. It will be explained later.Node.js files must be initiated in the "Command Line Interface" program of your computer.@ How to open the command line interface on your computer depends on the operating system. For Windows users, press the start button and look for "Command Prompt", or simply write "cmd" in the search field.Navigate to the folder that contains the file "myfirst.js", the command line interface window should look something like this. @ Now, your computer works as a server. If anyone tries to access your computer on port 8080, they will get a "Hello World!" message in return. '],
        ['Node.js Modules', 'Node.js Modules, Consider modules to be the same as JavaScript libraries. A set of functions you want to include in your application. Node.js has a set of built-in modules which you can use without any further installation.Look at our Built-in Modules Reference for a complete list of modules.@ To include a module, use the require() function with the name of the module.@ Now your application has access to the HTTP module, and is able to create a server. You can create your own modules, and easily include them in your applications.The following example creates a module that returns a date and time object. Create a module that returns the current date and time. Use the exports keyword to make properties and methods available outside the module file. @ Save the code above in a file called "myfirstmodule.js". Now you can include and use the module in any of your Node.js files.Use the module "myfirstmodule" in a Node.js file. Notice that we use ./ to locate the module, that means that the module is located in the same folder as the Node.js file.Save the code above in a file called "demo_module.js", and initiate the file.'],
        ['Node.js HTTP Module', 'Node.js HTTP Module, Node.js has a built-in module called HTTP, which allows Node.js to transfer data over the Hyper Text Transfer Protocol (HTTP).To include the HTTP module, use the require() method.The HTTP module can create an HTTP server that listens to server ports and gives a response back to the client.Use the createServer() method to create an HTTP server. The function passed into the http.createServer() method, will be executed when someone tries to access the computer on port 8080.@ Save the code above in a file called "demo_http.js", and initiate the file. If the response from the HTTP server is supposed to be displayed as HTML, you should include an HTTP header with the correct content type. @ The first argument of the res.writeHead() method is the status code, 200 means that all is OK, the second argument is an object containing the response headers.@ The function passed into the http.createServer() has a req argument that represents the request from the client, as an object (http.IncomingMessage object).@ This object has a property called "url" which holds the part of the url that comes after the domain name. The function passed into the http.createServer() has a req argument that represents the request from the client, as an object (http.IncomingMessage object).@ This object has a property called "url" which holds the part of the url that comes after the domain name. If you have followed the same steps on your computer, you should see two different results when opening these two addresses.There are built-in modules to easily split the query string into readable parts, such as the URL module. Save the code above in a file called "demo_querystring.js" and initiate the file.'],
        ['Node.js File System', 'Node.js File System Module, The Node.js file system module allows you to work with the file system on your computer.To include the File System module, use the require() method. Common use for the File System module: Read files,Create files,Update files,Delete files and Rename files. The fs.readFile() method is used to read files on your computer.Assume we have the following HTML file (located in the same folder as Node.js). Create a Node.js file that reads the HTML file, and return the content.Save the code above in a file called "demo_readfile.js", and initiate the file. @ The File System module has methods for creating new files:fs.appendFile(),fs.open() and fs.writeFile().The fs.appendFile() method appends specified content to a file. If the file does not exist, the file will be created. Create a new file using the appendFile() method. The fs.open() method takes a "flag" as the second argument, if the flag is "w" for "writing", the specified file is opened for writing. If the file does not exist, an empty file is created. Create a new, empty file using the open() method. The fs.writeFile() method replaces the specified file and content if it exists. If the file does not exist, a new file, containing the specified content, will be created. Create a new file using the writeFile() method.The File System module has methods for updating files:fs.appendFile() and fs.writeFile(). The fs.appendFile() method appends the specified content at the end of the specified file. Append "This is my text." to the end of the file "mynewfile1.txt".Append "This is my text." to the end of the file "mynewfile1.txt". The fs.writeFile() method replaces the specified file and content. To delete a file with the File System module,  use the fs.unlink() method.The fs.unlink() method deletes the specified file. Delete "mynewfile2.txt".To rename a file with the File System module,  use the fs.rename() method.The fs.rename() method renames the specified file.@ Rename "mynewfile1.txt" to "myrenamedfile.txt".You can also use Node.js to upload files to your computer.'],
        ['Node.js URL Module','Node.js URL Module,The URL module splits up a web address into readable parts.To include the URL module, use the require() method.Parse an address with the url.parse() method, and it will return a URL object with each part of the address as properties. Split a web address into readable parts. Now we know how to parse the query string, and in the previous chapter we learned how to make Node.js behave as a file server.@ Let us combine the two, and serve the file requested by the client. @ Create two html files and save them in the same folder as your node.js files.Create a Node.js file that opens the requested file and returns the content to the client. If anything goes wrong, throw a 404 error. Remember to initiate the file.'],
        ['Node.js NPM', 'Node.js NPM, NPM is a package manager for Node.js packages, or modules if you like.www.npmjs.com hosts thousands of free packages to download and use. The NPM program is installed on your computer when you install Node.js. A package in Node.js contains all the files you need for a module.@ Modules are JavaScript libraries you can include in your project.NPM is already ready to run on your computer. Downloading a package is very easy. Open the command line interface and tell NPM to download the package you want.I want to download a package called "upper-case".@ Now you have downloaded and installed your first package. NPM creates a folder named "node_modules", where the package will be placed. All packages you install in the future will be placed in this folder.My project now has a folder structure like this.Once the package is installed, it is ready to use.Include the "upper-case" package the same way you include any other module.@ Create a Node.js file that will convert the output "Hello World!" into upper-case letters.Save the code above in a file called "demo_uppercase.js", and initiate the file.'],
        ['Node.js Events','Node.js Events, Node.js is perfect for event-driven applications.Every action on a computer is an event. Like when a connection is made or a file is opened.Objects in Node.js can fire events, like the readStream object fires events when opening and closing a file. Node.js has a built-in module, called "Events", where you can create-, fire-, and listen for- your own events.To include the built-in Events module use the require() method. In addition, all event properties and methods are an instance of an EventEmitter object.@ To be able to access these properties and methods, create an EventEmitter object. You can assign event handlers to your own events with the EventEmitter object.In the example below we have created a function that will be executed when a "scream" event is fired.To fire an event, use the emit() method.'],
        ['Node.js Upload Files', 'Node.js Upload Files, There is a very good module for working with file uploads, called "Formidable".The Formidable module can be downloaded and installed using NPM.After you have downloaded the Formidable module, you can include the module in any application.Now you are ready to make a web page in Node.js that lets the user upload files to your computer.Create a Node.js file that writes an HTML form, with an upload field.his code will produce an HTML form.@ Include the Formidable module to be able to parse the uploaded file once it reaches the server.When the file is uploaded and parsed, it gets placed on a temporary folder on your computer.The file will be uploaded, and placed on a temporary folder.When a file is successfully uploaded to the server, it is placed on a temporary folder.@ The path to this directory can be found in the "files" object, passed as the third argument in the parse() methods callback function.To move the file to the folder of your choice, use the File System module, and rename the file. Include the fs module, and move the file to the current folder.'],
        ['Node.js Email', 'Node.js Send an Email, The Nodemailer module makes it easy to send emails from your computer.The Nodemailer module can be downloaded and installed using npm. After you have downloaded the Nodemailer module, you can include the module in any application. @ Now you are ready to send emails from your server.Use the username and password from your selected email provider to send an email. This tutorial will show you how to use your Gmail account to send an email.And thats it! Now your server is able to send emails.To send an email to more than one receiver, add them to the "to" property of the mailOptions object, separated by commas. @ To send HTML formatted text in your email, use the "html" property instead of the "text" property.'],
        ['Node.js MySQL', 'Node.js MySQL, Node.js can be used in database applications. One of the most popular databases is MySQL.To be able to experiment with the code examples, you should have MySQL installed on your computer.@ Once you have MySQL up and running on your computer, you can access it by using Node.js.To access a MySQL database with Node.js, you need a MySQL driver. This tutorial will use the "mysql" module, downloaded from NPM. To download and install the "mysql" module, open the Command Terminal and execute the following.@ Now you have downloaded and installed a mysql database driver.Node.js can use this module to manipulate the MySQL database.Start by creating a connection to the database. Use the username and password from your MySQL database.@ Save the code above in a file called "demo_db_connection.js" and run the file.Which will give you this result.@ Use SQL statements to read from (or write to) a MySQL database. This is also called "to query" the database.The connection object created in the example above, has a method for querying the database.The query method takes an sql statements as a parameter and returns the result.Learn how to read, write, delete, and update a database in the next chapters.'],
      ])
    },{
      id:'18',
      title:'ANGULAR',
      sidebar:new Map([
        ['AngularJS HOME', 'AngularJS Tutorial, AngularJS extends HTML with new attributes. AngularJS is perfect for Single Page Applications (SPAs). AngularJS is easy to learn. This tutorial is specially designed to help you learn AngularJS as quickly and efficiently as possible. First, you will learn the basics of AngularJS: directives, expressions, filters, modules, and controllers.Then you will learn everything else you need to know about AngularJS:Events, DOM, Forms, Input, Validation, Http, and more.In every chapter, you can edit the examples online, and click on a button to view the result.@ Before you study AngularJS, you should have a basic understanding of: HTML, CSS and Javascript. AngularJS version 1.0 was released in 2012.Miško Hevery, a Google employee, started to work with AngularJS in 2009.The idea turned out very well, and the project is now officially supported by Google.@Track your progress with the free "My Learning" program here at W3Schools.Log in to your account, and start earning points!This is an optional feature.@ You can study W3Schools without using My Learning.W3Schools. AngularJS tutorial contains lots of AngularJS examples. The AngularJS reference contains all directives and filters used in this tutorial.@'],
        ['AngularJS Intro','AngularJS Introduction, AngularJS is a JavaScript framework. It can be added to an HTML page with a <script> tag.AngularJS extends HTML attributes with Directives, and binds data to HTML with Expressions.AngularJS is a JavaScript framework written in JavaScript.AngularJS is distributed as a JavaScript file, and can be added to a web page with a script tag.@ AngularJS extends HTML with ng-directives.@ The ng-app directive defines an AngularJS application.The ng-model directive binds the value of HTML controls (input, select, textarea) to application data.The ng-bind directive binds application data to the HTML view.@ ngularJS starts automatically when the web page has loaded.The ng-app directive tells AngularJS that the <div> element is the "owner" of an AngularJS application.The ng-model directive binds the value of the input field to the application variable name.@The ng-bind directive binds the content of the <p> element to the application variable name. @ As you have already seen, AngularJS directives are HTML attributes with an ng prefix.The ng-init directive initializes AngularJS application variables.Alternatively with valid HTMLYou can use data-ng-, instead of ng-, if you want to make your page HTML valid. You will learn a lot more about directives later in this tutorial.@ AngularJS expressions are written inside double braces: {{ expression }}.AngularJS will "output" data exactly where the expression is written.AngularJS expressions bind AngularJS data to HTML the same way as the ng-bind directive.You will learn more about expressions later in this tutorial.@  AngularJS modules define AngularJS applications.AngularJS controllers control AngularJS applications.The ng-app directive defines the application, the ng-controller directive defines the controller.AngularJS modules define applications. AngularJS controllers control applications. You will learn more about modules and controllers later in this tutorial.'],
        ['AngularJS Expressions','AngularJS Expressions, AngularJS binds data to HTML using Expressions. AngularJS expressions can be written inside double braces: {{ expression }}.AngularJS expressions can also be written inside a directive: ng-bind="expression".@ AngularJS will resolve the expression, and return the result exactly where the expression is written. AngularJS expressions are much like JavaScript expressions: They can contain literals, operators, and variables. Example {{ 5 + 5 }} or {{ firstName + " " + lastName }}.@ If you remove the ng-app directive, HTML will display the expression as it is, without solving it. @ You can write expressions wherever you like, AngularJS will simply resolve the expression and return the result. Example: Let AngularJS change the value of CSS properties.Change the color of the input box below, by changing its value. AngularJS numbers are like JavaScript numbers. Using ng-init is not very common. You will learn a better way to initialize data in the chapter about controllers.AngularJS strings are like JavaScript strings. Same example using ng-bind. AngularJS objects are like JavaScript objects.@ Same example using ng-bind. AngularJS arrays are like JavaScript arrays.Same example using ng-bind. @ Like JavaScript expressions, AngularJS expressions can contain literals, operators, and variables.Unlike JavaScript expressions, AngularJS expressions can be written inside HTML.AngularJS expressions do not support conditionals, loops, and exceptions, while JavaScript expressions do.AngularJS expressions support filters, while JavaScript expressions do not.@ '],
        ['AngularJS Modules','AngularJS Modules, An AngularJS module defines an application.The module is a container for the different parts of an application. The module is a container for the application controllers.Controllers always belong to a module.@ A module is created by using the AngularJS function angular.module. The "myApp" parameter refers to an HTML element in which the application will run.Now you can add controllers, directives, filters, and more, to your AngularJS application.@ Add a controller to your application, and refer to the controller with the ng-controller directive.ou will learn more about controllers later in this tutorial.AngularJS has a set of built-in directives which you can use to add functionality to your application.For a full reference, visit our AngularJS directive reference.In addition you can use the module to add your own directives to your applications. @ You will learn more about directives later in this tutorial.It is common in AngularJS applications to put the module and the controllers in JavaScript files.In this example, "myApp.js" contains an application module definition, while "myCtrl.js" contains the controller. The [] parameter in the module definition can be used to define dependent modules.@ Without the [] parameter, you are not creating a new module, but retrieving an existing one.@ Global functions should be avoided in JavaScript. They can easily be overwritten or destroyed by other scrip. AngularJS modules reduces this problem, by keeping all functions local to the module.While it is common in HTML applications to place scripts at the end of the <body> element, it is recommended that you load the AngularJS library either in the <head> or at the start of the <body>.This is because calls to angular.module can only be compiled after the library has been loaded.'],
        ['AngularJS Directives','AngularJS Directives, AngularJS lets you extend HTML with new attributes called Directives.AngularJS has a set of built-in directives which offers functionality to your applications.@ AngularJS also lets you define your own directives.AngularJS directives are extended HTML attributes with the prefix ng-.The ng-app directive initializes an AngularJS application.The ng-init directive initializes application data.@ The ng-model directive binds the value of HTML controls (input, select, textarea) to application data.The ng-app directive also tells AngularJS that the <div> element is the "owner" of the AngularJS application.The {{ firstName }} expression, in the example above, is an AngularJS data binding expression.@ Data binding in AngularJS binds AngularJS expressions with AngularJS data.{{ firstName }} is bound with ng-model="firstName".@ In the next example two text fields are bound together with two ng-model directives.@ Using ng-init is not very common. You will learn how to initialize data in the chapter about controllers.The ng-repeat directive repeats an HTML element.@ The ng-repeat directive actually clones HTML elements once for each item in a collection.The ng-repeat directive used on an array of objects.@ AngularJS is perfect for database CRUD (Create Read Update Delete) applications.@ Just imagine if these objects were records from a database.The ng-app directive defines the root element of an AngularJS application.@ The ng-app directive will auto-bootstrap (automatically initialize) the application when a web page is loaded.@ The ng-init directive defines initial values for an AngularJS application.Normally, you will not use ng-init. You will use a controller or module instead.You will learn more about controllers and modules later.The ng-model directive binds the value of HTML controls (input, select, textarea) to application data.@ The ng-model directive can also Provide type validation for application data (number, email, required),Provide status for application data (invalid, dirty, touched, error), Provide CSS classes for HTML elements and Bind HTML elements to HTML forms.@ Read more about the ng-model directive in the next chapter. In addition to all the built-in AngularJS directives, you can create your own directives. New directives are created by using the .directive function.To invoke the new directive, make an HTML element with the same tag name as the new directive. You can invoke a directive.'],
        ['AngularJS model', 'AngularJS ng-model Directive, The ng-model directive binds the value of HTML controls (input, select, textarea) to application data.With the ng-model directive you can bind the value of an input field to a variable created in AngularJS.@ The binding goes both ways. If the user changes the value inside the input field, the AngularJS property will also change its value. The ng-model directive can provide type validation for application data (number, e-mail, required). In the example above, the span will be displayed only if the expression in the ng-show attribute returns true.@ If the property in the ng-model attribute does not exist, AngularJS will create one for you. The ng-model directive can provide status for application data (valid, dirty, touched, error). The ng-model directive provides CSS classes for HTML elements, depending on their status. The ng-model directive adds/removes the following classes, according to the status of the form field: ng-empty,ng-not-empty,ng-touched,ng-untouched,ng-valid,ng-invalid,ng-dirty, ng-pending,ng-pristine.'],
        ['AngularJS Data Binding','AngularJS Data Binding, Data binding in AngularJS is the synchronization between the model and the view.AngularJS applications usually have a data model. The data model is a collection of data available for the application.The HTML container where the AngularJS application is displayed, is called the view.The view has access to the model, and there are several ways of displaying model data in the view.You can use the ng-bind directive, which will bind the innerHTML of the element to the specified model property.@ You can also use double braces {{ }} to display content from the model.Or you can use the ng-model directive on HTML controls to bind the model to the view.Use the ng-model directive to bind data from the model to the view on HTML controls (input, select, textarea).The ng-model directive provides a two-way binding between the model and the view.@ Data binding in AngularJS is the synchronization between the model and the view.When data in the model changes, the view reflects the change, and when data in the view changes, the model is updated as well. This happens immediately and automatically, which makes sure that the model and the view is updated at all times.Applications in AngularJS are controlled by controllers. Read about controllers in the AngularJS Controllers chapter.@ Because of the immediate synchronization of the model and the view, the controller can be completely separated from the view, and simply concentrate on the model data. Thanks to the data binding in AngularJS, the view will reflect any changes made in the controller.'],
        ['AngularJS Controllers', 'AngularJS Controllers, AngularJS controllers control the data of AngularJS applications.AngularJS controllers are regular JavaScript Objects.AngularJS applications are controlled by controllers.The ng-controller directive defines the application controller.A controller is a JavaScript Object, created by a standard JavaScript object constructor.@ The AngularJS application is defined by  ng-app="myApp". The application runs inside the <div>.The ng-controller="myCtrl" attribute is an AngularJS directive. It defines a controller.The myCtrl function is a JavaScript function.AngularJS will invoke the controller with a $scope object.In AngularJS, $scope is the application object (the owner of application variables and functions).@The controller creates two properties (variables) in the scope (firstName and lastName).@The ng-model directives bind the input fields to the controller properties (firstName and lastName).The example above demonstrated a controller object with two properties: lastName and firstName.A controller can also have methods (variables as functions).For the next example we will create a new controller file. And then use the controller file in an application.Save the file as namesController.js.'],
        ['AngularJS Scope','AngularJS Scope, The scope is the binding part between the HTML (view) and the JavaScript (controller).The scope is an object with the available properties and methods.The scope is available for both the view and the controller.@ When you make a controller in AngularJS, you pass the $scope object as an argument. Properties made in the controller, can be referred to in the view. @ When adding properties to the $scope object in the controller, the view (HTML) gets access to these properties.In the view, you do not use the prefix $scope, you just refer to a property name, like {{carname}}.@ If we consider an AngularJS application to consist of View, which is the HTML, Model, which is the data available for the current view, Controller, which is the JavaScript function that makes/changes/removes/controls the data and Then the scope is the Model.The scope is a JavaScript object with properties and methods, which are available for both the view and the controller.@ If you make changes in the view, the model and the controller will be updated.It is important to know which scope you are dealing with, at any time.In the two examples above there is only one scope, so knowing your scope is not an issue, but for larger applications there can be sections in the HTML DOM which can only access certain scopes.@ When dealing with the ng-repeat directive, each repetition has access to the current repetition object. Each <li> element has access to the current repetition object, in this case a string, which is referred to by using x.All applications have a $rootScope which is the scope created on the HTML element that contains the ng-app directive.@The rootScope is available in the entire application.If a variable has the same name in both the current scope and in the rootScope, the application uses the one in the current scope.A variable named "color" exists in both the controllers scope and in the rootScope.'],
        ['AngularJS Filters', 'AngularJS Filters, Filters can be added in AngularJS to format data.AngularJS provides filters to transform data:currency Format a number to a currency format.date Format a date to a specified format.filter Select a subset of items from an array.json Format an object to a JSON string.limitTo Limits an array/string, into a specified number of elements/characters.lowercase Format a string to lower case.number Format a number to a string.orderBy Orders an array by an expression.uppercase Format a string to upper case.@ Filters can be added to expressions by using the pipe character |, followed by a filter.The uppercase filter format strings to upper case. The lowercase filter format strings to lower case. Filters are added to directives, like ng-repeat, by using the pipe character |, followed by a filter. The orderBy filter sorts an array.The currency filter formats a number as currency. The filter filter selects a subset of an array.The filter filter can only be used on arrays, and it returns an array containing only the matching items.@ By setting the ng-model directive on an input field, we can use the value of the input field as an expression in a filter.Type a letter in the input field, and the list will shrink/grow depending on the match.@ By adding the ng-click directive on the table headers, we can run a function that changes the sorting order of the array. You can make your own filters by registering a new filter factory function with your module. The myFormat filter will format every other character to uppercase.'],
        ['AngularJS Services', 'AngularJS Services, In AngularJS you can make your own service, or use one of the many built-in services. In AngularJS, a service is a function, or object, that is available for, and limited to, your AngularJS application.AngularJS has about 30 built-in services. One of them is the $location service.The $location service has methods which return information about the location of the current web page. @ Use the $location service in a controller.Note that the $location service is passed in to the controller as an argument. In order to use the service in the controller, it must be defined as a dependency.For many services, like the $location service, it seems like you could use objects that are already in the DOM, like the window.location object, and you could, but it would have some limitations, at least for your AngularJS application.AngularJS constantly supervises your application, and for it to handle changes and events properly, AngularJS prefers that you use the $location service instead of the window.location object.@ The $http service is one of the most common used services in AngularJS applications. The service makes a request to the server, and lets your application handle the response.Use the $http service to request data from the server.This example demonstrates a very simple use of the $http service. Learn more about the $http service in the AngularJS Http Tutorial.@ The $timeout service is AngularJ version of the window.setTimeout function.Display a new message after two seconds.The $interval service is AngularJS version of the window.setInterval function.@ To create your own service, connect your service to the module. To use your custom made service, add it as a dependency when defining the controller.Use the custom made service named hexafy to convert a number into a hexadecimal number.Once you have created a service, and connected it to your application, you can use the service in any controller, directive, filter, or even inside other services.To use the service inside a filter, add it as a dependency when defining the filter.You can use the filter when displaying values from an object, or an array.'],
        ['AngularJS http','AngularJS AJAX - $http, $http is an AngularJS service for reading data from remote servers.The AngularJS $http service makes a request to the server, and returns a response.Make a simple request to the server, and display the result in a header. The example above uses the .get method of the $http service.@ The .get method is a shortcut method of the $http service. There are several shortcut methods: .delete().get(), .head(), .jsonp(), .patch(), .post(), .put(). The methods above are all shortcuts of calling the $http service.The example above executes the $http service with an object as an argument. The object is specifying the HTTP method, the url, what to do on success, and what to do on failure.The response from the server is an object with these properties: .config the object used to generate the request. .data a string, or an object, carrying the response from the server,.headers a function to use to get header information, .status a number defining the HTTP status,.statusText a string defining the HTTP status.To handle errors, add one more functions to the .then method.The data you get from the response is expected to be in JSON format.@ JSON is a great way of transporting data, and it is easy to use within AngularJS, or any other JavaScript.Example: On the server we have a file that returns a JSON object containing 15 customers, all wrapped in array called records.@ The ng-repeat directive is perfect for looping through an array. The application defines the customersCtrl controller, with a $scope and $http object.@ $http is an XMLHttpRequest object for requesting external data.$http.get() reads JSON data from https://www.w3schools.com/angular/customers.php.On success, the controller creates a property, myData, in the scope, with JSON data from the server.'],
      ])
    },
    {
      id:'19',
      title:'VUE',
      sidebar:new Map([
        ['Vue HOME','Vue Tutorial, Vue is a popular JavaScript framework.User interfaces built in Vue updates automatically when data changes.Vue is easy to learn.This tutorial is specially designed to help you learn Vue as quickly and efficiently as possible.First, you will learn the basics of Vue: text interpolation, directives, and how to incorporate events and forms into your project.@ Then you will learn everything else you need to know about Vue:Computed properties, watchers, methods, setup for Single-File Components (SFCs, *.vue files), and more.@ In every chapter, you can edit the examples online, and click on a button to view the result.Before you study Vue, you should have a basic understanding of HTML, CSS and Javascript.@ Evan You, a Google employee using AngularJS, started to develop Vue in 2013.Vue version 1.0 was released in 2015.Learn by examples! This tutorial supplements all explanations with clarifying examples.'],
        ['Vue Intro', 'Vue Introduction, Vue is a JavaScript framework. It can be added to an HTML page with a <script> tag.Vue extends HTML attributes with Directives, and binds data to HTML with Expressions.@ Vue is a front-end JavaScript framework written in JavaScript.Similar frameworks to Vue are React and Angular, but Vue is more lightweight and easier to start with.Vue is distributed as a JavaScript file, and can be added to a web page with a script tag. @ It is simple and easy to use. It is able to handle both simple and complex projects.Its growing popularity and open-source community support.In normal JavaScript we need to write HOW HTML and JavaScript is connected, but in Vue we simply need to make sure that there IS a connection and let Vue take care of the rest.It allows for a more efficient development process with a template-based syntax, two-way data binding, and a centralized state management.@ If some of these points are hard to understand, dont worry, you will understand at the end of the tutorial.There are two different ways to write code in Vue: The Options API and The Composition API.The underlying concepts are the same for both the Options API and Composition API, so after learning one, you can easily switch to the other.The Options API is what is written in this tutorial because it is considered to be more beginner-friendly, with a more recognizable structure.Take a look at this page at the end of this tutorial to learn more about the differences between the Options API and the Composition API.@ We will now learn how we can create our very first Vue web page, in 5 basic steps:Start with a basic HTML file.Add a <div> tag with id="app" for Vue to connect with.Tell the browser how to handle Vue code by adding a <script> tag with a link to Vue.Add a <script> tag with the Vue instance inside.Connect the Vue instance to the <div id="app"> tag.These steps are described in detail below, with the full code in example in the end.@ Start with a simple HTML page.Vue needs an HTML element on your page to connect to.Put a <div> tag inside the <body> tag and give it an id.To help our browser to interpret our Vue code, add this <script> tag. Now we need to add our Vue code.This is called the Vue instance and can contain data and methods and other things, but now it just contains a message.On the last line in this <script> tag our Vue instance is connected to the <div id="app"> tag. '],
        ['Vue Directives', 'Vue Directives, Vue directives are special HTML attributes with the prefix v- that give the HTML tag extra functionality.Vue directives connect to the Vue instance to create dynamic and reactive user interfaces.With Vue, creating responsive pages is much easier and requires less code compared to traditional JavaScript methods.The different Vue directives we use in this tutorial are listed below.@ The browser finds what class to connect the <div> element to from the Vue instance.The example above could be written much simpler without the Vue code, but be patient.@  The real benefits of Vue can be seen in later examples when we make pages that are responsive.When learning Vue at W3Schools.com, you can use our "Try it Yourself" tool, which shows both the code and the result. This will make it easier for you to understand every part as we move forward.Click NEXT to continue the tutorial.'],
        ['Vue v-bind', 'Vue v-bind Directive, You have already seen that a basic Vue setup consists of a Vue instance and that we can access it from the <div id="app"> tag with {{ }} or the v-bind directive.On this page we will explain the v-bind directive in more detail.The v-bind directive lets us bind an HTML attribute to data in the Vue instance. This makes it easy to change the attribute value dynamically.The src attribute value of an <img> tag is taken from the Vue instance data property. @ We can use the v-bind directive to do in-line styling and modify classes dynamically. We will show you briefly how to do that in this section, and later in this tutorial, on the CSS Binding page, we will explain this in more detail. In-line styling with Vue is done by binding the style attribute to Vue with v-bind.@ As a value to the v-bind directive, we can write a JavaScript object with the CSS property and value. We can also separate the font size number value from the font size unit if we want to, like this.We could also write the CSS property name with CSS syntax (kebab-case) in hyphens, but it is not recommended.@ The background color depends on the data property value inside the Vue instance.We can use v-bind to change the class attribute.The value of v-bind:class can be a variable.When the value of v-bind:class is an object, the class can be assigned depending on a Vue property.@ The shorthand for v-bind is simply.We will continue to use v-bind: syntax in this tutorial to avoid confusion.'],
        ['Vue v-if ','Vue v-if Directive, It is a lot easier to create an HTML element depending on a condition in Vue with the v-if directive than with plain JavaScript.With Vue you just write the if-statement directly in the HTML element you want to create conditionally. Its that simple.Conditional rendering in Vue is done by using the v-if, v-else-if and v-else directives.Conditional rendering is when an HTML element is created only if a condition is true, i.e. create the text "In stock" if a variable is true, or Not in stock if that variable is false.@ Write different messages depending on whether there are any typewriters in stock or not. A condition is often a comparison check between two values like in the example above to see if one value is greater than the other.We use comparison operators like <, >= or !== to do such checks.Comparison checks can also be combined with logical operators such as && or ||.Go to our JavaScript tutorial page to find out more about JavaScript comparisons.We can use the number of typewriters in storage with a comparison check to decide if they are in stock or not. Use a comparison check to decide whether to write "In stock" or "Not in stock" depending on the number of typewriters in storage.@This overview describes how the different Vue directives used for conditional rendering are used together.To see an example with all three directives shown above, we can expand the previous example with v-else-if so that the user sees In stock, Very few left! or Out of stock.Use a comparison check to decide whether to write "In stock", "Very few left!" or "Not in stock" depending on the number of typewriters in storage.Instead of using a comparison check with the v-if directive, we can use the true or false return value from a function. If a certain text contains the word pizza, create a <p> tag with an appropriate message. The includes() method is a native JavaScript method that checks if a text contain certain words.The example above can be expanded to show that v-if also can create other tags like <div> and <img> tags. If a certain text contains the word pizza, create a <div> tag with a pizza image and a <p> tag with a message. The includes() method is a native JavaScript method that check if a text contain certain words.If a certain text contains the word pizza or burrito or none of these words, different images and texts will be created. '],
        ['Vue v-show', 'Vue v-show Directive, Learn how to make an element visible or not with v-show.v-show is easy to use because the condition is written right in the HTML tag attribute.The v-show directive hides an element when the condition is false by setting the CSS display property value to none.After writing v-show as an HTML attribute we must give a conditon to decide to have the tag visible or not.In the code above, showDiv represents a boolean Vue data property with either true or false as property value. If showDiv is true the div tag is shown, and if it is false the tag is not shown. Display the <div> element only if the showDiv property is set to true.@ The difference between v-show and v-if is that v-if creates (renders) the element depending on the condition, but with v-show the element is already created, v-show only changes its visibility.Therefore, it is better to use v-show when switching visibility of an object, because it is easier for the browser to do, and it can lead to a faster response and better user experience.A reason for using v-if over v-show is that v-if can be used with v-else-if and v-else.In the example below v-show and v-if are used separately on two different <div> elements, but based on the same Vue property. You can open the example and inspect the code to see that v-show keeps the <div> element, and only sets the CSS display property to none, but v-if actually destroys the <div> element.Display the two <div> elements only if the showDiv property is set to . If the showDiv property is set to and we inspect the example page with the browser we can see that the <div> element with v-if is destroyed, but the <div> element with v-show has just CSS display property set to none.'],
        ['Vue v-for','Vue v-for Directive,With normal JavaScript you might want to create HTML elements based on an array. You use a for-loop, and inside you need to create the elements, adjust them, and then add each element to your page. And these elements will not react to a change in the array.@ With Vue you start with the HTML element you want to create into a list, with v-for as an attribute, refer to the array inside the Vue instance, and let Vue take care of the rest. And the elements created with v-for will automatically update when the array changes.List rendering in Vue is done by using the v-for directive, so that several HTML elements are created with a for-loop.@ Below are three slightly different examples where v-for is used.Display a list based on the items of an array.Show images of food, based on an array in the Vue instance.Loop through an array of objects and display the object properties.@ The index number of an array element can be really useful in JavaScript for-loops. Luckily we can get the index number when using v-for in Vue as well.To get the index number with v-for we need to give two comma separated words in parentheses: the first word will be the array element, and the second word will be the index of that array element.Show index number and food name of elements in the array in the Vue instance.We can also display both array element index and information from the array element itself, if the array elements are objects.Show both the array element index number, and text from the objects in the array.'],
        ['Vue Events', 'Vue Events, Event handling in Vue is done with the v-on directive, so that we can make something happen when for example a button is clicked.@ Event handling is when HTML elements are set up to run a certain code when a certain event happens.Events in Vue are easy to use and will make our page truly responsive.Vue methods are code that can be set up to run when an event happens.@ With v-on modifiers you can describe in more detail how to react to an event.Lets start with an example to show how we can click a button to count moose in a forest. We need A button, v-on on the <button> tag to listen to the click event, Code to increase the number of moose, A property (variable) in the Vue instance to hold the number of moose and Double curly braces {{}} to show the increased number of moose. Click the button to count one more moose in the forest. The count property increases each time the button is clicked. A benefit that comes with Vue is that the number of moose in the <p> tag is updated automatically. With plain JavaScript we would need to update the number the user sees with an additional line of code.@ The v-on directive allows us to create pages that respond to what the user does.The Vue v-on works by telling the browser what event to listen to, and what to do when that event occurs.If we want to run more complex code when an event occurs we can put the code in a Vue method and refer to this method from the HTML attribute, like this. In addition to v-on and Vue methods we can use something called event modifiers to modify an event so that it for example only happens once after a page is loaded, or modify an event like submit to prevent a form from being submitted.@ As we can see, there are three techniques we need to learn about to use events in Vue: The Vue v-on directive, Vue methods and Vue v-on modifiers. Click Next to continue this tutorial and learn more about these techniques for event handling.'],
        ['Vue v-on', 'Vue v-on Directive, Like event handling in plain JavaScript, the v-on directive in Vue tells the browser:which event to listen to (click, keydown, mouseover, etc) what to do when that event occurs. Lets take a look at some examples to see how v-on can be used with different events and different code to run when these events occur. To run more advanced code when an event occurs we need to introduce Vue methods.@ Learn about Vue methods on the next page in this tutorial. The v-on directive allows us to perform actions based on specified events.Use v-on:click to perform action when the element is clicked.The v-on directive is used on the <button> tag to listen to the click event.@  When the click event occurs the lightOn data property is toggled between true and false, making the yellow <div> behind the lightbulb visible/hidden.Use v-on:input to perform action when the element gets an input, like a keystroke inside a text field. Use v-on:mousemove to perform action when the mouse pointer moves over an element. Change the background color of a <div> element whenever the mouse pointer moves over it.@ You can also use the v-on directive inside a v-for loop.The items of the array are available for each iteration inside the v-on value. Display a list based on the food array and add an click event for each item that will use a value from the array item to change the source of an image. We will start using  syntax a little later in this tutorial.'],
        ['Vue Methods','Vue Methods, Vue methods are functions that belong to the Vue instance under the methods property.Vue methods are great to use with event handling (v-on) to do more complex things.Vue methods can also be used to do other things than event handling.We have already used one Vue property in this tutorial, the data property, where we can store values.There is another Vue property called methods where we can store functions that belong to the Vue instance. A method can be stored in the Vue instance like this.We need to write this. as prefix to refer to a data property from inside a method. To call the writeText method when we click the <div> element we can write the code below.@ The v-on directive is used on the <div> element to listen to the click event. When the click event occurs the writeText method is called and the text is changed.When an event occurs so that a method is called, the event object is passed with the method by default. This is very convenient because the event object contains a lot of useful data, like for example the target object, the event type, or the mouse position when the click or mousemove event occured.When an event occurs so that a method is called, the event object is passed with the method by default. @ This is very convenient because the event object contains a lot of useful data, like for example the target object, the event type, or the mouse position when the or mousemove event occured.If we expand the example above by just one line, we can also make the background color change based on the mouse pointer position in the x-direction. The only thing we need to add is v-bind to change the backgound-color in the style attribute.@ In the example below the event object carries a text from the <textarea> tag to make it look like we are writing inside a notebook.The v-on directive is used on the <textarea> tag to listen to the input event which occurs whenever there is a change in the text inside the textarea element.When the input event occurs the writeText method is called and the event object is sent with the method by default so we can get the text from the <textarea> tag.@ The text property in the Vue instance is updated by the writeText method. A span element is set up to show the text value with the double curly braces syntax, and this is updated automatically by Vue.Sometimes we want to pass an argument with the method when an event occurs.And this is how the addMoose method looks like. '],
        ['Vue Event Modifiers', 'Vue Event Modifiers, Event modifiers in Vue modify how events trigger the running of methods and help us handle events in a more efficient and straightforward way. Event modifiers are used together with the Vue v-on directive, to for example:Prevent the default submit behavior of HTML forms (v-on:submit.prevent),Make sure that an event can only run once after the page is loaded (v-on:click.once) and Specify what keyboard key to use as an event to run a method (v-on:keyup.enter). Event modifiers are used to define how to react on an event in more detail.We use event modifiers by first connecting a tag to an event like we have seen before. Now, to define more specifically that the button click event should only fire one time after the page loads, we can add the .once modifier, like this. Here is an example with the .once modifier.It is also possible to handle an event inside the method instead of using event modifiers, but event modifiers make it a lot easier. Event modifiers are used in different situations. We can use event modifiers when we listen to keyboard events, mouse click events, and we can even use event modifiers in combination with each other.The event modifier .once can be used after both keyboard and mouse click events. We have three different keyboard event types keydown, keypress, and keyup. With each key event type, we can specify exactly what key to listen to after a key event occurs. We have .space, .enter, .w and .up to name a few. You can write the key event to the web page, or to the console with console.log(event.key), to find the value of a certain key yourself. We can also choose to limit the event to happen only when a mouse click or a key press happens in combination with system modifier keys .alt, .ctrl, .shift or .meta. The system modifier key .meta represents the Windows key on Windows computers, or command key on Apple computers.Use the .s modifier to create an alert when the user writes an s inside the <textarea> tag.  Event modifiers can also be used in combination with each other so that more than one thing must happen simultaneous for the method to be called.Use the .s and .ctrl modifiers in combination to create an alert when and ctrl are pressed simultaneously inside the <textarea> tag.You might need to click with two fingers, or in the lower right hand side of the trackpad on your computer to create a right click.Change the background color when a user right-clicks in the element.@'],
        ['Vue Forms', 'Vue Forms, Vue gives us an easy way to improve the user experience with forms by adding extra functionality like responsiveness and form validation.Vue uses the v-model directive when handling forms.Lets start with a simple shopping list example to see how Vue can be used when creating a form. Add standard HTML form elements, Create the Vue instance with the current item name, number and the shopping list, and use v-model to connect our inputs to it, Call the method to add an item to the shopping list, and prevent the default browser refresh on submit, Create the method that adds the item to the shopping list, and clears the form,Use v-for to show an automatically updated shopping list below the form and Below is the final code for our first Vue form. In this example we can add new items to a shopping list. Notice the two-way binding v-model provides in the example above:v-model updates the Vue instance data when the HTML input change and v-model also updates the HTML input when the Vue instance data changes.@'],
       
      ])
    },{
      id:'20',
      title:'TYPESCRIPT',
      sidebar:new Map([
        ['TS HOME', 'TypeScript Tutorial, Our "Try it Yourself" editor makes it easy to learn TypeScript.You can edit TypeScript code and view the result in your browser.We recommend reading this tutorial in the sequence listed in the left menu.Track your progress with the free "My Learning" program here at Schools.Log in to your account, and start earning points. This is an optional feature. You can study W3Schools without using My Learning.@'],
        ['TS Introduction','TypeScript Introduction, ypeScript is JavaScript with added syntax for types. TypeScript is a syntactic superset of JavaScript which adds static typing.This basically means that TypeScript adds syntax on top of JavaScript, allowing developers to add types.TypeScript being a "Syntactic Superset" means that it shares the same base syntax as JavaScript, but adds something to it.@ JavaScript is a loosely typed language. It can be difficult to understand what types of data are being passed around in JavaScript.In JavaScript, function parameters and variables dont have any information! So developers need to look at documentation, or guess based on the implementation.TypeScript allows specifying the types of data being passed around within the code, and has the ability to report errors when the types dont match.@For example, TypeScript will report an error when passing a string into a function that expects a number. JavaScript will not. TypeScript uses compile time type checking. Which means it checks if the specified types match before running the code, not while running the code.A common way to use TypeScript is to use the official TypeScript compiler, which transpiles TypeScript code into JavaScript.The next section shows how to get the compiler setup for a local project.Some popular code editors, such as Visual Studio Code, have built-in TypeScript support and can show errors as you write code.' ],
        ['TS Get Started', 'TypeScript Getting Started, ypeScript is transpiled into JavaScript using a compiler.ypeScript is transpiled into JavaScript using a compiler.TypeScript being converted into JavaScript means it runs anywhere that JavaScript runs.TypeScript has an official compiler which can be installed through npm.Within your npm project, run the following command to install the compiler:Which should give you an output similar to, The compiler is installed in the node_modules directory and can be run with: npx tsc.@ Which should give you an output similar to:Followed by a list of all the Commmon Commands.By default the TypeScript compiler will print a help message when run in an empty project.The compiler can be configured using a tsconfig.json file.You can have TypeScript create tsconfig.json with the recommended settings with:Which should give you an output similar to:Here is an example of more things you could add to the tsconfig.json file.@ You can open the file in an editor to add those options. This will configure the TypeScript compiler to transpile TypeScript files located in the src/ directory of your project, into JavaScript files in the build/ directory.This is one way to quickly get started with TypeScript, there are many other options available such as a create-react-app template, a node starter project, and a webpack plugin.'],
        ['TS Simple Types', 'TypeScript Simple Types, TypeScript supports some simple types (primitives) you may know.When creating a variable, there are two main ways TypeScript assigns a type:Explicit and Implicit. In both examples below firstName is of type string. @ Explicit type assignment are easier to read and more intentional.Implicit - TypeScript will "guess" the type, based on the assigned value. Having TypeScript "guess" the type of a value is called infer.Implicit assignment forces TypeScript to infer the value.Implicit type assignment are shorter, faster to type, and often used when developing and testing.@typeScript will throw an error if data types do not match.Implicit type assignment would have made firstName less noticeable as a string, but both will throw an error.JavaScript will not throw an error for mismatched types.TypeScript may not always properly infer what the type of a variable may be. In such cases, it will set the type to any which disables type checking.@This behavior can be disabled by enabling noImplicitAny as an option in a TypeScripts project tsconfig.json. That is a JSON config file for customizing how some of TypeScript behaves.you may see primitive types capitalized like Boolean.For this tutorial just know to use the lower-cased values, the upper-case ones are for very specific circumstances.'],
        ['TS Special Types', 'TypeScript Special Types,TypeScript has special types that may not refer to any specific type of data. any is a type that disables type checking and effectively allows all types to be used.The example below does not use any and will throw an error. Setting any to the special type any disables type checking. @ any can be a useful way to get past errors since it disables type checking, but TypeScript will not be able provide type safety, and tools which rely on type data, such as auto completion, will not work. Remember, it should be avoided at "any" cost.@ unknown is a similar, but safer alternative to any.TypeScript will prevent unknown types from being used, as shown in the below example.Compare the example above to the previous example, with any.unknown is best used when you dont know the type of data being typed. To add a type later, youll need to cast it.Casting is when we use the "as" keyword to say property or variable is of the casted type.never effectively throws an error whenever it is defined.never is rarely used, especially by itself, its primary use is in advanced generics.@undefined and null are types that refer to the JavaScript primitives undefined and null respectively.These types dont have much use unless strictNullChecks is enabled in the tsconfig.json file.'],
        ['TS Arrays', 'TypeScript Arrays, TypeScript has a specific syntax for typing arrays.The readonly keyword can prevent arrays from being changed.TypeScript can infer the type of an array if it has values.@'],
        ['TS Tuples', 'TypeScript Tuples, A tuple is a typed array with a pre-defined length and types for each index.Tuples are great because they allow each element in the array to be a known type of value.To define a tuple, specify the type of each element in the array.@ As you can see we have a number, boolean and a string. But what happens if we try to set them in the wrong order. Even though we have a boolean, string, and number the order matters in our tuple and will throw an error.A good practice is to make your tuple readonly.Tuples only have strongly defined types for the initial values.You see the new valueTuples only have strongly defined types for the initial values.@If you have ever used React before you have worked with tuples more than likely.useState returns a tuple of the value and a setter function.const [firstName, setFirstName] = useState is a common example.Because of the structure we know our first value in our list will be a certain value type in this case a string and the second value a function.Named tuples allow us to provide context for our values at each index.Since tuples are arrays we can also destructure them.'],
        ['TS Object Types', 'TypeScript Object Types, TypeScript has a specific syntax for typing objects.Object types like this can also be written separately, and even be reused, look at interfaces for more details.TypeScript can infer the types of properties based on their values.@ Optional properties are properties that dont have to be defined in the object definition.Index signatures can be used for objects without a defined list of properties.Index signatures like this one can also be expressed with utility types like Record<string, number>.'],
        ['TS Enums', 'TypeScript Enums, An enum is a special "class" that represents a group of constants (unchangeable variables).Enums come in two flavors string and numeric. Lets start with numeric.By default, enums will initialize the first value to 0 and add 1 to each additional value. You can set the value of the first numeric enum and have it auto increment from that.@ You can assign unique number values for each enum value. Then the values will not incremented automatically.Enums can also contain strings. This is more common than numeric enums, because of their readability and intent.Technically, you can mix and match string and numeric enum values, but it is recommended not to do so.'],
        ['TS Type Aliases and Interfaces', 'TypeScript Type Aliases and Interfaces, TypeScript allows types to be defined separately from the variables that use them.Aliases and Interfaces allows types to be easily shared between different variables/objects.Type Aliases allow defining types with a custom name (an Alias).Type Aliases can be used for primitives like string or more complex types such as objects and arrays. @Interfaces are similar to type aliases, except they only apply to object types.Interfaces can extend each others definition.Extending an interface means you are creating a new interface with the same properties as the original, plus something new.'],
        ['TS Union Types', 'TypeScript Union Types, Union types are used when a value can be more than a single type.Such as when a property would be string or number.Using the | we are saying our parameter is a string or number.@ you need to know what your type is when union types are being used to avoid type errors.In our example we are having an issue invoking toUpperCase() as its a string method and number doesnt have access to it.'],
        ['TS Functions', 'TypeScript Functions, The type of the value returned by the function can be explicitly defined.If no return type is defined, TypeScript will attempt to infer it through the types of the variables or expressions returned.The type void can be used to indicate a function doesnt return any value.Function parameters are typed with a similar syntax as variable declarations.@ If no parameter type is defined, TypeScript will default to using any, unless additional type information is available as shown in the Default Parameters and Type Alias sections below.@By default TypeScript will assume all parameters are required, but they can be explicitly marked as optional.For parameters with default values, the default value goes after the type annotation. TypeScript can also infer the type from the default value.Typing named parameters follows the same pattern as typing normal parameters.Rest parameters can be typed like normal parameters, but the type must be an array as rest parameters are always arrays.@ Function types can be specified separately from functions with type aliases.These types are written similarly to arrow functions, read more about arrow functions here.'],
        ['TS Casting', 'TypeScript Casting,There are times when working with types where its necessary to override the type of a variable, such as when incorrect types are provided by a library.Casting is the process of overriding a type.A straightforward way to cast a variable is using the as keyword, which will directly change the type of the given variable.@ Casting doesnt actually change the type of the data within the variable, for example the following code will not work as expected since the variable x is still holds a number.@ TypeScript will still attempt to typecheck casts to prevent casts that dont seem correct, for example the following will throw a type error since TypeScript knows casting a string to a number doesnt makes sense without converting the data.The Force casting section below covers how to override this.@ Using <> works the same as casting with as.This type of casting will not work with TSX, such as when working on React files.To override type errors that TypeScript may throw when casting, first cast to unknown, then to the target type.'],
      ])
    },{
      id:'21',
      title:'GIT ',
      sidebar:new Map([
        ['Git Home','Git Tutorial, Git is a version control system. Git helps you keep track of code changes.Git is used to collaborate on code.For new users, using the terminal view can seem a bit complicated.@ Dont worry! We will keep it really simple, and learning this way gives you a good grasp of how Git works.In general, lines with $ in front of it is input. These are the commands you can copy and run in your terminal.@Git and GitHub are different things. In this tutorial you will understand what Git is and how to use it on the remote repository platforms, like GitHub.'],
        ['Git Intro','What is Git?, Git is a popular version control system. It was created by Linus Torvalds in 2005, and has been maintained by Junio Hamano since then.@It is used for Tracking code changes, Tracking who made changes and Coding collaboration.@ Git manage projects with Repositories,Clone a project to work on a local copy,Control and track changes with Staging and Committing,Branch and Merge to allow for work on different parts and versions of a project,Pull the latest version of the project to a local copy and Push local updates to the main project. @Initialize Git on a folder, making it a Repository.Git now creates a hidden folder to keep track of changes in that folder.When a file is changed, added or deleted, it is considered modified.You select the modified files you want to Stage.The Staged files are Committed, which prompts Git to store a permanent snapshot of the files.Git allows you to see the full history of every commit.Git does not store a separate copy of every file in every commit, but keeps track of changes made in each commit!@ Over 70% of developers use Git. Developers can work together from anywhere in the world.Developers can see the full history of the project.Developers can revert to earlier versions of a project.@GitHub is the largest host of source code in the world, and has been owned by Microsoft since 2018.In this tutorial we will focus on using Git with GitHub.@'],
        ['Git Getting Started','Using Git with Command Line, To start using Git, we are first going to open up our Command shell. For Windows, you can use Git bash, which comes included in Git for Windows. For Mac and Linux you can use the built-in terminal.@ If Git is installed, it should show something like git version X.Y. Change the user name and e-mail address to your own. You will probably also want to use this when registering to GitHub later on.@ Use global to set the username and e-mail for every repository on your computer. If you want to set the username/e-mail for just the current repo, you can remove global. @ mkdir makes a new directory. cd changes the current working directory. Now that we are in the correct directory. We can start by initializing Git.@ Once you have navigated to the correct folder, you can initialize Git on that folder. You just created your first Git Repository.@ Git now knows that it should watch the folder you initiated it on. Git creates a hidden folder to keep track of changes.'],
        ['Git New Files', 'Git Adding New Files, You just created your first local Git repo. But it is empty. So lets add some files, or create a new file using your favourite text editor. Then save or move it to the folder you just created.If you want to learn how to create a new file using a text editor, you can visit our HTML tutorial. @ls will list the files in the directory. We can see that index.html is there.Then we check the Git status and see if it is a part of our repo@ Now Git is aware of the file, but has not added it to our repository. When you first add files to an empty repository, they are all untracked. To get Git to track them, you need to stage them, or add them to the staging environment. We will cover the staging environment in the next chapter.@'],
        ['Git Staging Environment','Git Staging Environment, One of the core functions of Git is the concepts of the Staging Environment, and the Commit. As you are working, you may be adding, editing and removing files. But whenever you hit a milestone or finish a part of the work, you should add the files to a Staging Environment. Staged files are files that are ready to be committed to the repository you are working on. You will learn more about commit shortly.For now, we are done working with index.html. So we can add it to the Staging Environment. @ Now the file has been added to the Staging Environment.You can also stage more than one file at a time. Lets add 2 more files to our working folder. Use the text editor again.A README.md file that describes the repository (recommended for all repositories).@ Using --all instead of individual filenames will stage all changes (new, modified, and deleted) files. Now all 3 files are added to the Staging Environment, and we are ready to do our first commit.'],
        ['Git Commit', 'Git Commit, Since we have finished our work, we are ready move from stage to commit for our repo. Adding commits keep track of our progress and changes as we work. Git considers each commit change point or "save point". It is a point in the project you can go back to if you find a bug, or want to make a change.When we commit, we should always include a message. By adding clear messages to each commit, it is easy for yourself (and others) to see what has changed and when.@ The commit command performs a commit, and the -m "message" adds a message.The Staging Environment has been committed to our repo, with the message:First release of Hello World.Sometimes, when you make small changes, using the staging environment seems like a waste of time. It is possible to commit changes directly, skipping the staging environment. The -a option will automatically stage every changed, already tracked file.@ And check the status of our repository. But this time, we will use the --short option to see the changes in a more compact way.'],
        ['Git Help', 'Git Help, If you are having trouble remembering commands or options for commands, you can use Git help. There are a couple of different ways you can use the help command in command line:git command -help -  See all the available options for the specific command. git help --all -  See all possible commands.Lets go over the different commands.@ Any time you need some help remembering the specific option for a command, you can use git command -help. You can also use --help instead of -help to open the relevant Git manual page.@ To list all possible commands, use the help --all command. This will display a very long list of commands. If you find yourself stuck in the list view, SHIFT + G to jump the end of the list, then q to exit the view. '],
        ['Git Branch', 'Working with Git Branches, In Git, a branch is a new/separate version of the main repository.Lets say you have a large project, and you need to update the design on it.How would that work without and with Git. Without Git: Make copies of all the relevant files to avoid impacting the live version, Start working with the design and find that code depend on code in other files, that also need to be changed, Make copies of the dependant files as well. Making sure that every file dependency references the correct file name, There is an unrelated error somewhere else in the project that needs to be fixed , Save all your files, making a note of the names of the copies you were working on, Work on the unrelated error and update the code to fix it, Go back to the design, and finish the work there, Copy the code or rename the files, so the updated design is on the live version.@ Branches allow you to work on different parts of a project without impacting the main branch.When the work is complete, a branch can be merged with the main project.You can even switch between branches and work on different projects without them interfering with each other. Branching in Git is very lightweight and fast.@ Let add some new features to our index.html page.We are working in our local repository, and we do not want to disturb or possibly wreck the main project.Now we created a new branch called "hello-world-images".Lets confirm that we have created a new branch.@ We can see the new branch with the name "hello-world-images", but the beside master specifies that we are currently on that branch.checkout is the command used to check out a branch. Moving us from the current branch, to the one specified at the end of the command.Now we have moved our current workspace from the master branch, to the new branch. Open your favourite editor and make some changes.For this example, we added an image (img_hello_world.jpg) to the working folder and a line of code in the index.html file. @ Now we have a new branch, that is different from the master branch. Using the -b option on checkout will create a new branch, and move to it, if it does not exist. Now lets see just how quick and easy it is to work with different branches, and how well it works. We are currently on the branch hello-world-images. We added an image to this branch, so lets list the files in the current directory.@ '],
        ['Git Branch Merge', 'Merge Branches, We have the emergency fix ready, and so lets merge the master and emergency-fix branches.First, we need to change to the master branch. Now we merge the current branch (master) with emergency-fix.Since the emergency-fix branch came directly from master, and no other changes had been made to master while we were working, Git sees this as a continuation of master. So it can "Fast-forward", just pointing both master and emergency-fix to the same commit. As master and emergency-fix are essentially the same now, we can delete emergency-fix, as it is no longer needed. Now we can move over to hello-world-images and keep working. Add another image file (img_hello_git.jpg) and change index.html, so it shows it.Now, we are done with our work here and can stage and commit for this branch.We see that index.html has been changed in both branches. Now we are ready to merge hello-world-images into master. But what will happen to the changes we recently made in master?@ The merge failed, as there is conflict between the versions for index.html. Let us check the status: This confirms there is a conflict in index.html, but the image files are ready and staged to be committed.We can see the differences between the versions and edit it like we want.Now we can stage index.html and check the status.The conflict has been fixed, and we can use commit to conclude the merge. And delete the hello-world-images branch. Now you have a better understanding of how branches and merging works. Time to start working with a remote repository. @With a new branch called new-design, edit the code directly without impacting the main branch.Create a new branch from the main project called small-error-fix. Fix the unrelated error and merge the small-error-fix branch with the main branch.You go back to the new-design branch, and finish the work there.'],
        ['Git GitHub Getting Started', 'GitHub Account, Go to GitHub and sign up for an account. Remember to use the same e-mail address you used in the Git config.Now that you have made a GitHub account, sign in, and create a new Repo. And fill in the relevant details. We will go over the different options and what they mean later. @But for now, choose Public (if you want the repo to be viewable for anyone) or Private (if you want to choose who should be able to view the repo). Either way, you will be able to choose who can contribute to the repo.Then click "Create repository".@ Since we have already set up a local Git repo, we are going to push that to GitHub. Copy the URL, or click the clipboard marked in the image above. Now paste it the following command. git remote add origin URL specifies that you are adding a remote repository, with the specified URL, as an origin to your local Git repo. Now we are going to push our master branch to the origin url, and set it as the default remote branch. Since this is the first time you are connecting to GitHub, you will get some kind of notification you to authenticate this connection.Now, go back into GitHub and see that the repository has been updated. '],
        ['Git GitHub Edit Code', 'Edit Code in GitHub, In addition to being a host for Git content, GitHub has a very good code editor.Lets try to edit the README.md file in GitHub. Just click the edit button.Add some changes to the code, and then commit the changes. For now, we will "Commit directly to the master branch".Remember to add a description for the commit.That is how you edit code directly in GitHub.@'],
        ['Git Pull from GitHub', 'Pulling to Keep up-to-date with Changes, Pulling to Keep up-to-date with Changes. pull is a combination of 2 different commands:fetch and merge. Lets take a closer look into how fetch, merge, and pull works.fetch gets all the change history of a tracked branch/repo. So, on your local Git, fetch updates to see what has changed on GitHub. Now that we have the recent changes, we can check our status.@ We are behind the origin/master by 1 commit. That should be the updated README.md, but lets double check by viewing the log. That looks as expected, but we can also verify by showing the differences between our local master and origin/master. That looks precisely as expected! Now we can safely merge.@ merge combines the current branch, with a specified branch.We have confirmed that the updates are as expected, and we can merge our current branch (master) with origin/master. Check our status again to confirm we are up to date. But what if you just want to update your local repository, without going through all those steps.@ pull is a combination of fetch and merge. It is used to pull all changes from a remote repository into the branch you are working on.Make another change to the Readme.md file on GitHub.Use pull to update our local Git. That is how you keep your local Git up to date from a remote repository. In the next chapter, we will look closer at how push works on GitHub.'],
      ])
    },
    // Add more programming topics
  ];
  export default programmingTopics;
// // src/data/programmingData.js
// const programmingTopics = [
//   
//   {
//     id: '1',
//     title: 'CSS',
//     sidebar: new Map([
//       ['home','Cascading Style Sheets, fondly referred to as CSS, is a simply designed language intended to simplify the process of making web pages presentable. CSS allows you to apply styles to web pages. More importantly, CSS enables you to do this independently of the HTML that makes up each web page. It describes how a webpage should look: it prescribes colours, fonts, spacing, and much more. In short, you can make your website look however you want. CSS lets developers and designers define how it behaves, including how elements are positioned in the browser. While HTML uses tags, CSS uses rulesets. CSS is easy to learn and understand, but it provides powerful control over the presentation of an HTML document.Cascading Style Sheets, fondly referred to as CSS, is a simply designed language intended to simplify the process of making web pages presentable. CSS allows you to apply styles to web pages. More importantly, CSS enables you to do this independently of the HTML that makes up each web page. It describes how a webpage should look: it prescribes colours, fonts, spacing, and much more. In short, you can make your website look however you want. CSS lets developers and designers define how it behaves, including how elements are positioned in the browser. While HTML uses tags, CSS uses rulesets. CSS is easy to learn and understand, but it provides powerful control over the presentation of an HTML document. Cascading Style Sheets, fondly referred to as CSS, is a simply designed language intended to simplify the process of making web pages presentable. CSS allows you to apply styles to web pages. More importantly, CSS enables you to do this independently of the HTML that makes up each web page. It describes how a webpage should look: it prescribes colours, fonts, spacing, and much more. In short, you can make your website look however you want. CSS lets developers and designers define how it behaves, including how elements are positioned in the browser. While HTML uses tags, CSS uses rulesets. CSS is easy to learn and understand, but it provides powerful control over the presentation of an HTML document.'],
//       ['Sel', 'Selectors are used to target...'],
//       ['Introduction', 'CSS is a stylesheet language...'],
//       ['Syntax', 'CSS is a stylesheet language...'],
//       ['Selectors', 'Selectors are used to target...'],
//       // Add more sidebar content as needed
//     ]),
//   },
//   {
//     id:'2',
//     title:'javascript',
//     sidebar:new Map([
//       ['Introduction', 'HTML stands for Hyper Text Markup Language, which is the most widely used language on Web to develop web pages. HTML was created by Berners-Lee in late 1991 but "HTML 2.0" was the first standard HTML specification which was published in 1995. HTML 4.01 was a major version of HTML and it was published in late 1999. Though HTML 4.01 version is widely used but currently we are having HTML-5 version which is an extension to HTML 4.01, and this version was published in 2012.'],
//       ['Basic Tags', 'Any document starts with a heading. You can use different sizes for your headings. HTML also has six levels of headings, which use the elements <h1>, <h2>, <h3>, <h4>, <h5>, and <h6>. While displaying any heading, browser adds one line before and one line after that heading.'],
//       ['Elements','An HTML element is defined by a starting tag. If the element contains other content, it ends with a closing tag, where the element name is preceded by a forward slash as shown below with few tags '],
//       ['Attributes','We have seen few HTML tags and their usage like heading tags <h1>, <h2>, paragraph tag <p> and other tags. We used them so far in their simplest form, but most of the HTML tags can also have attributes, which are extra bits of information. An attribute is used to define the characteristics of an HTML element and is placed inside the elements opening tag. All attributes are made up of two parts a name and a value'],
//       ['Headings','We have seen few HTML tags and their usage like heading tags <h1>, <h2>, paragraph tag <p> and other tags. We used them so far in their simplest form, but most of the HTML tags can also have attributes, which are extra bits of information. An attribute is used to define the characteristics of an HTML element and is placed inside the elements opening tag. All attributes are made up of two parts a name and a value'],
//       ['Paragraphs','We have seen few HTML tags and their usage like heading tags <h1>, <h2>, paragraph tag <p> and other tags. We used them so far in their simplest form, but most of the HTML tags can also have attributes, which are extra bits of information. An attribute is used to define the characteristics of an HTML element and is placed inside the elements opening tag. All attributes are made up of two parts a name and a value'],
//       ['Styles','We have seen few HTML tags and their usage like heading tags <h1>, <h2>, paragraph tag <p> and other tags. We used them so far in their simplest form, but most of the HTML tags can also have attributes, which are extra bits of information. An attribute is used to define the characteristics of an HTML element and is placed inside the elements opening tag. All attributes are made up of two parts a name and a value'],
     
//     ])
//   },
//   {
//     id:'3',
//     title:' ',
//     sidebar:new Map([
//       []
//     ])
//   },
//   {
//     id:'4',
//     title:' ',
//     sidebar:new Map([
//       []
//     ])
//   },
//   {
//     id:'5',
//     title:' ',
//     sidebar:new Map([
//       []
//     ])
//   },
//   {
//     id:'6',
//     title:' ',
//     sidebar:new Map([
//       []
//     ])
//   },
//   {
//     id:'7',
//     title:' ',
//     sidebar:new Map([
//       []
//     ])
//   },
//   {
//     id:'8',
//     title:' ',
//     sidebar:new Map([
//       []
//     ])
//   },
//   {
//     id:'9',
//     title:' ',
//     sidebar:new Map([
//       []
//     ])
//   },{
//     id:'10',
//     title:' ',
//     sidebar:new Map([
//       []
//     ])
//   },{
//     id:'11',
//     title:' ',
//     sidebar:new Map([
//       []
//     ])
//   },
//   {
//     id:'12',
//     title:' ',
//     sidebar:new Map([
//       []
//     ])
//   },{
//     id:'13',
//     title:' ',
//     sidebar:new Map([
//       []
//     ])
//   },
//   {
//     id:'14',
//     title:' ',
//     sidebar:new Map([
//       []
//     ])
//   },
//   {
//     id:'15',
//     title:' ',
//     sidebar:new Map([
//       []
//     ])
//   },
//   {
//     id:'16',
//     title:' ',
//     sidebar:new Map([
//       []
//     ])
//   },{
//     id:'17',
//     title:' ',
//     sidebar:new Map([
//       []
//     ])
//   },{
//     id:'18',
//     title:' ',
//     sidebar:new Map([
//       []
//     ])
//   },
//   {
//     id:'19',
//     title:'VUE',
//     sidebar:new Map([
//       ['Vue HOME','Vue Tutorial, Vue is a popular JavaScript framework.User interfaces built in Vue updates automatically when data changes.Vue is easy to learn.This tutorial is specially designed to help you learn Vue as quickly and efficiently as possible.First, you will learn the basics of Vue: text interpolation, directives, and how to incorporate events and forms into your project.@Then you will learn everything else you need to know about Vue:Computed properties, watchers, methods, setup for Single-File Components (SFCs, *.vue files), and more.@ In every chapter, you can edit the examples online, and click on a button to view the result.Before you study Vue, you should have a basic understanding of HTML, CSS and Javascript.@ Evan You, a Google employee using AngularJS, started to develop Vue in 2013.Vue version 1.0 was released in 2015.Learn by examples! This tutorial supplements all explanations with clarifying examples.'],
//       ['Vue Intro', 'Vue Introduction, Vue is a JavaScript framework. It can be added to an HTML page with a <script> tag.Vue extends HTML attributes with Directives, and binds data to HTML with Expressions.@ Vue is a front-end JavaScript framework written in JavaScript.Similar frameworks to Vue are React and Angular, but Vue is more lightweight and easier to start with.Vue is distributed as a JavaScript file, and can be added to a web page with a script tag. @ It is simple and easy to use. It is able to handle both simple and complex projects.Its growing popularity and open-source community support.In normal JavaScript we need to write HOW HTML and JavaScript is connected, but in Vue we simply need to make sure that there IS a connection and let Vue take care of the rest.It allows for a more efficient development process with a template-based syntax, two-way data binding, and a centralized state management.@ If some of these points are hard to understand, dont worry, you will understand at the end of the tutorial.There are two different ways to write code in Vue: The Options API and The Composition API.The underlying concepts are the same for both the Options API and Composition API, so after learning one, you can easily switch to the other.The Options API is what is written in this tutorial because it is considered to be more beginner-friendly, with a more recognizable structure.Take a look at this page at the end of this tutorial to learn more about the differences between the Options API and the Composition API.@ We will now learn how we can create our very first Vue web page, in 5 basic steps:Start with a basic HTML file.Add a <div> tag with id="app" for Vue to connect with.Tell the browser how to handle Vue code by adding a <script> tag with a link to Vue.Add a <script> tag with the Vue instance inside.Connect the Vue instance to the <div id="app"> tag.These steps are described in detail below, with the full code in example in the end.@ Start with a simple HTML page.Vue needs an HTML element on your page to connect to.Put a <div> tag inside the <body> tag and give it an id.To help our browser to interpret our Vue code, add this <script> tag. Now we need to add our Vue code.This is called the Vue instance and can contain data and methods and other things, but now it just contains a message.On the last line in this <script> tag our Vue instance is connected to the <div id="app"> tag. '],
//       ['Vue Directives', 'Vue Directives, Vue directives are special HTML attributes with the prefix v- that give the HTML tag extra functionality.Vue directives connect to the Vue instance to create dynamic and reactive user interfaces.With Vue, creating responsive pages is much easier and requires less code compared to traditional JavaScript methods.The different Vue directives we use in this tutorial are listed below.@ The browser finds what class to connect the <div> element to from the Vue instance.The example above could be written much simpler without the Vue code, but be patient.@  The real benefits of Vue can be seen in later examples when we make pages that are responsive.When learning Vue at W3Schools.com, you can use our "Try it Yourself" tool, which shows both the code and the result. This will make it easier for you to understand every part as we move forward.Click NEXT to continue the tutorial.'],
//       ['Vue v-bind', 'Vue v-bind Directive, You have already seen that a basic Vue setup consists of a Vue instance and that we can access it from the <div id="app"> tag with {{ }} or the v-bind directive.On this page we will explain the v-bind directive in more detail.The v-bind directive lets us bind an HTML attribute to data in the Vue instance. This makes it easy to change the attribute value dynamically.The src attribute value of an <img> tag is taken from the Vue instance data property. @ We can use the v-bind directive to do in-line styling and modify classes dynamically. We will show you briefly how to do that in this section, and later in this tutorial, on the CSS Binding page, we will explain this in more detail. In-line styling with Vue is done by binding the style attribute to Vue with v-bind.@ As a value to the v-bind directive, we can write a JavaScript object with the CSS property and value. We can also separate the font size number value from the font size unit if we want to, like this.We could also write the CSS property name with CSS syntax (kebab-case) in hyphens, but it is not recommended.@ The background color depends on the data property value inside the Vue instance.We can use v-bind to change the class attribute.The value of v-bind:class can be a variable.When the value of v-bind:class is an object, the class can be assigned depending on a Vue property.@ The shorthand for v-bind is simply.We will continue to use v-bind: syntax in this tutorial to avoid confusion.'],
//       ['Vue v-if ','Vue v-if Directive, It is a lot easier to create an HTML element depending on a condition in Vue with the v-if directive than with plain JavaScript.With Vue you just write the if-statement directly in the HTML element you want to create conditionally. Its that simple.Conditional rendering in Vue is done by using the v-if, v-else-if and v-else directives.Conditional rendering is when an HTML element is created only if a condition is true, i.e. create the text "In stock" if a variable is true, or Not in stock if that variable is false.@ Write different messages depending on whether there are any typewriters in stock or not. A condition is often a comparison check between two values like in the example above to see if one value is greater than the other.We use comparison operators like <, >= or !== to do such checks.Comparison checks can also be combined with logical operators such as && or ||.Go to our JavaScript tutorial page to find out more about JavaScript comparisons.We can use the number of typewriters in storage with a comparison check to decide if they are in stock or not. Use a comparison check to decide whether to write "In stock" or "Not in stock" depending on the number of typewriters in storage.@This overview describes how the different Vue directives used for conditional rendering are used together.To see an example with all three directives shown above, we can expand the previous example with v-else-if so that the user sees In stock, Very few left! or Out of stock.Use a comparison check to decide whether to write "In stock", "Very few left!" or "Not in stock" depending on the number of typewriters in storage.Instead of using a comparison check with the v-if directive, we can use the true or false return value from a function. If a certain text contains the word pizza, create a <p> tag with an appropriate message. The includes() method is a native JavaScript method that checks if a text contain certain words.The example above can be expanded to show that v-if also can create other tags like <div> and <img> tags. If a certain text contains the word pizza, create a <div> tag with a pizza image and a <p> tag with a message. The includes() method is a native JavaScript method that check if a text contain certain words.If a certain text contains the word pizza or burrito or none of these words, different images and texts will be created. '],
//       ['Vue v-show', 'Vue v-show Directive, Learn how to make an element visible or not with v-show.v-show is easy to use because the condition is written right in the HTML tag attribute.The v-show directive hides an element when the condition is false by setting the CSS display property value to none.After writing v-show as an HTML attribute we must give a conditon to decide to have the tag visible or not.In the code above, showDiv represents a boolean Vue data property with either true or false as property value. If showDiv is true the div tag is shown, and if it is false the tag is not shown. Display the <div> element only if the showDiv property is set to true.@ The difference between v-show and v-if is that v-if creates (renders) the element depending on the condition, but with v-show the element is already created, v-show only changes its visibility.Therefore, it is better to use v-show when switching visibility of an object, because it is easier for the browser to do, and it can lead to a faster response and better user experience.A reason for using v-if over v-show is that v-if can be used with v-else-if and v-else.In the example below v-show and v-if are used separately on two different <div> elements, but based on the same Vue property. You can open the example and inspect the code to see that v-show keeps the <div> element, and only sets the CSS display property to none, but v-if actually destroys the <div> element.Display the two <div> elements only if the showDiv property is set to . If the showDiv property is set to and we inspect the example page with the browser we can see that the <div> element with v-if is destroyed, but the <div> element with v-show has just CSS display property set to none.'],
//       ['Vue v-for','Vue v-for Directive,With normal JavaScript you might want to create HTML elements based on an array. You use a for-loop, and inside you need to create the elements, adjust them, and then add each element to your page. And these elements will not react to a change in the array.@ With Vue you start with the HTML element you want to create into a list, with v-for as an attribute, refer to the array inside the Vue instance, and let Vue take care of the rest. And the elements created with v-for will automatically update when the array changes.List rendering in Vue is done by using the v-for directive, so that several HTML elements are created with a for-loop.@ Below are three slightly different examples where v-for is used.Display a list based on the items of an array.Show images of food, based on an array in the Vue instance.Loop through an array of objects and display the object properties.@ The index number of an array element can be really useful in JavaScript for-loops. Luckily we can get the index number when using v-for in Vue as well.To get the index number with v-for we need to give two comma separated words in parentheses: the first word will be the array element, and the second word will be the index of that array element.Show index number and food name of elements in the array in the Vue instance.We can also display both array element index and information from the array element itself, if the array elements are objects.Show both the array element index number, and text from the objects in the array.'],
//       ['Vue Events', 'Vue Events, Event handling in Vue is done with the v-on directive, so that we can make something happen when for example a button is clicked. Event handling is when HTML elements are set up to run a certain code when a certain event happens.Events in Vue are easy to use and will make our page truly responsive.Vue methods are code that can be set up to run when an event happens.With v-on modifiers you can describe in more detail how to react to an event. ']
      
//     ])
//   },{
//     id:'20',
//     title:'TYPESCRIPT',
//     sidebar:new Map([
//       ['TS HOME', 'TypeScript Tutorial, Our "Try it Yourself" editor makes it easy to learn TypeScript.You can edit TypeScript code and view the result in your browser.We recommend reading this tutorial in the sequence listed in the left menu.Track your progress with the free "My Learning" program here at Schools.Log in to your account, and start earning points. This is an optional feature. You can study W3Schools without using My Learning.'],
//       ['TS Introduction','TypeScript Introduction, ypeScript is JavaScript with added syntax for types. TypeScript is a syntactic superset of JavaScript which adds static typing.This basically means that TypeScript adds syntax on top of JavaScript, allowing developers to add types.TypeScript being a "Syntactic Superset" means that it shares the same base syntax as JavaScript, but adds something to it.JavaScript is a loosely typed language. It can be difficult to understand what types of data are being passed around in JavaScript.In JavaScript, function parameters and variables dont have any information! So developers need to look at documentation, or guess based on the implementation.TypeScript allows specifying the types of data being passed around within the code, and has the ability to report errors when the types dont match.For example, TypeScript will report an error when passing a string into a function that expects a number. JavaScript will not. TypeScript uses compile time type checking. Which means it checks if the specified types match before running the code, not while running the code.A common way to use TypeScript is to use the official TypeScript compiler, which transpiles TypeScript code into JavaScript.The next section shows how to get the compiler setup for a local project.Some popular code editors, such as Visual Studio Code, have built-in TypeScript support and can show errors as you write code.' ],
//       ['TS Get Started', 'TypeScript Getting Started, ypeScript is transpiled into JavaScript using a compiler.ypeScript is transpiled into JavaScript using a compiler.TypeScript being converted into JavaScript means it runs anywhere that JavaScript runs.TypeScript has an official compiler which can be installed through npm.Within your npm project, run the following command to install the compiler:Which should give you an output similar to, The compiler is installed in the node_modules directory and can be run with: npx tsc.Which should give you an output similar to:Followed by a list of all the Commmon Commands.By default the TypeScript compiler will print a help message when run in an empty project.The compiler can be configured using a tsconfig.json file.You can have TypeScript create tsconfig.json with the recommended settings with:Which should give you an output similar to:Here is an example of more things you could add to the tsconfig.json file.You can open the file in an editor to add those options. This will configure the TypeScript compiler to transpile TypeScript files located in the src/ directory of your project, into JavaScript files in the build/ directory.This is one way to quickly get started with TypeScript, there are many other options available such as a create-react-app template, a node starter project, and a webpack plugin.'],
//       ['TS Simple Types', 'TypeScript Simple Types, TypeScript supports some simple types (primitives) you may know.When creating a variable, there are two main ways TypeScript assigns a type:Explicit and Implicit. In both examples below firstName is of type string. @Explicit type assignment are easier to read and more intentional.Implicit - TypeScript will "guess" the type, based on the assigned value. Having TypeScript "guess" the type of a value is called infer.Implicit assignment forces TypeScript to infer the value.Implicit type assignment are shorter, faster to type, and often used when developing and testing.@typeScript will throw an error if data types do not match.Implicit type assignment would have made firstName less noticeable as a string, but both will throw an error.JavaScript will not throw an error for mismatched types.TypeScript may not always properly infer what the type of a variable may be. In such cases, it will set the type to any which disables type checking.@This behavior can be disabled by enabling noImplicitAny as an option in a TypeScripts project tsconfig.json. That is a JSON config file for customizing how some of TypeScript behaves.you may see primitive types capitalized like Boolean.For this tutorial just know to use the lower-cased values, the upper-case ones are for very specific circumstances.'],
//       ['TS Special Types', 'TypeScript Special Types,TypeScript has special types that may not refer to any specific type of data. any is a type that disables type checking and effectively allows all types to be used.The example below does not use any and will throw an error. Setting any to the special type any disables type checking. @ any can be a useful way to get past errors since it disables type checking, but TypeScript will not be able provide type safety, and tools which rely on type data, such as auto completion, will not work. Remember, it should be avoided at "any" cost.@ unknown is a similar, but safer alternative to any.TypeScript will prevent unknown types from being used, as shown in the below example.Compare the example above to the previous example, with any.unknown is best used when you dont know the type of data being typed. To add a type later, youll need to cast it.Casting is when we use the "as" keyword to say property or variable is of the casted type.never effectively throws an error whenever it is defined.never is rarely used, especially by itself, its primary use is in advanced generics.d and null are types that refer to the JavaScript primitives  and null respectively.These types dont have much use unless strictNullChecks is enabled in the tsconfig.json file.'],
//       ['TS Arrays', 'TypeScript Arrays, TypeScript has a specific syntax for typing arrays.The readonly keyword can prevent arrays from being changed.TypeScript can infer the type of an array if it has values.'],
//       ['TS Tuples', 'TypeScript Tuples, A tuple is a typed array with a pre-defined length and types for each index.Tuples are great because they allow each element in the array to be a known type of value.To define a tuple, specify the type of each element in the array.@ As you can see we have a number, boolean and a string. But what happens if we try to set them in the wrong order. Even though we have a boolean, string, and number the order matters in our tuple and will throw an error.A good practice is to make your tuple readonly.Tuples only have strongly defined types for the initial values.You see the new valueTuples only have strongly defined types for the initial values.@If you have ever used React before you have worked with tuples more than likely.useState returns a tuple of the value and a setter function.const [firstName, setFirstName] = useState is a common example.Because of the structure we know our first value in our list will be a certain value type in this case a string and the second value a function.Named tuples allow us to provide context for our values at each index.Since tuples are arrays we can also destructure them.'],
//       ['TS Object Types', 'TypeScript Object Types, TypeScript has a specific syntax for typing objects.Object types like this can also be written separately, and even be reused, look at interfaces for more details.TypeScript can infer the types of properties based on their values.@ Optional properties are properties that dont have to be defined in the object definition.Index signatures can be used for objects without a defined list of properties.Index signatures like this one can also be expressed with utility types like Record<string, number>.'],
//       ['TS Enums', 'TypeScript Enums, An enum is a special "class" that represents a group of constants (unchangeable variables).Enums come in two flavors string and numeric. Lets start with numeric.By default, enums will initialize the first value to 0 and add 1 to each additional value. You can set the value of the first numeric enum and have it auto increment from that.@ You can assign unique number values for each enum value. Then the values will not incremented automatically.Enums can also contain strings. This is more common than numeric enums, because of their readability and intent.Technically, you can mix and match string and numeric enum values, but it is recommended not to do so.'],
//       ['TS Type Aliases and Interfaces', 'TypeScript Type Aliases and Interfaces, TypeScript allows types to be defined separately from the variables that use them.Aliases and Interfaces allows types to be easily shared between different variables/objects.Type Aliases allow defining types with a custom name (an Alias).Type Aliases can be used for primitives like string or more complex types such as objects and arrays. @Interfaces are similar to type aliases, except they only apply to object types.Interfaces can extend each others definition.Extending an interface means you are creating a new interface with the same properties as the original, plus something new.'],
//       ['TS Union Types', 'TypeScript Union Types, Union types are used when a value can be more than a single type.Such as when a property would be string or number.Using the | we are saying our parameter is a string or number. you need to know what your type is when union types are being used to avoid type errors.In our example we are having an issue invoking toUpperCase() as its a string method and number doesnt have access to it.'],
//       ['TS Functions', 'TypeScript Functions, The type of the value returned by the function can be explicitly defined.If no return type is defined, TypeScript will attempt to infer it through the types of the variables or expressions returned.The type void can be used to indicate a function doesnt return any value.Function parameters are typed with a similar syntax as variable declarations.@ If no parameter type is defined, TypeScript will default to using any, unless additional type information is available as shown in the Default Parameters and Type Alias sections below.@By default TypeScript will assume all parameters are required, but they can be explicitly marked as optional.For parameters with default values, the default value goes after the type annotation. TypeScript can also infer the type from the default value.Typing named parameters follows the same pattern as typing normal parameters.Rest parameters can be typed like normal parameters, but the type must be an array as rest parameters are always arrays.@ Function types can be specified separately from functions with type aliases.These types are written similarly to arrow functions, read more about arrow functions here.'],
//       ['TS Casting', 'TypeScript Casting,There are times when working with types where its necessary to override the type of a variable, such as when incorrect types are provided by a library.Casting is the process of overriding a type.A straightforward way to cast a variable is using the as keyword, which will directly change the type of the given variable.@ Casting doesnt actually change the type of the data within the variable, for example the following code will not work as expected since the variable x is still holds a number.@ TypeScript will still attempt to typecheck casts to prevent casts that dont seem correct, for example the following will throw a type error since TypeScript knows casting a string to a number doesnt makes sense without converting the data.The Force casting section below covers how to override this.@ Using <> works the same as casting with as.This type of casting will not work with TSX, such as when working on React files.To override type errors that TypeScript may throw when casting, first cast to unknown, then to the target type.'],
//     ])
//   },{
//     id:'21',
//     title:'GIT ',
//     sidebar:new Map([
//       ['Git Home','Git Tutorial, Git is a version control system. Git helps you keep track of code changes.Git is used to collaborate on code.For new users, using the terminal view can seem a bit complicated.@ Dont worry! We will keep it really simple, and learning this way gives you a good grasp of how Git works.In general, lines with $ in front of it is input. These are the commands you can copy and run in your terminal.@Git and GitHub are different things. In this tutorial you will understand what Git is and how to use it on the remote repository platforms, like GitHub.'],
//       ['Git Intro','What is Git?, Git is a popular version control system. It was created by Linus Torvalds in 2005, and has been maintained by Junio Hamano since then.@It is used for Tracking code changes, Tracking who made changes and Coding collaboration.@ Git manage projects with Repositories,Clone a project to work on a local copy,Control and track changes with Staging and Committing,Branch and Merge to allow for work on different parts and versions of a project,Pull the latest version of the project to a local copy and Push local updates to the main project. @Initialize Git on a folder, making it a Repository.Git now creates a hidden folder to keep track of changes in that folder.When a file is changed, added or deleted, it is considered modified.You select the modified files you want to Stage.The Staged files are Committed, which prompts Git to store a permanent snapshot of the files.Git allows you to see the full history of every commit.Git does not store a separate copy of every file in every commit, but keeps track of changes made in each commit!@ Over 70% of developers use Git. Developers can work together from anywhere in the world.Developers can see the full history of the project.Developers can revert to earlier versions of a project.@GitHub is the largest host of source code in the world, and has been owned by Microsoft since 2018.In this tutorial we will focus on using Git with GitHub.@'],
//       ['Git Getting Started','Using Git with Command Line, To start using Git, we are first going to open up our Command shell. For Windows, you can use Git bash, which comes included in Git for Windows. For Mac and Linux you can use the built-in terminal.@ If Git is installed, it should show something like git version X.Y. Change the user name and e-mail address to your own. You will probably also want to use this when registering to GitHub later on.@ Use global to set the username and e-mail for every repository on your computer. If you want to set the username/e-mail for just the current repo, you can remove global. @ mkdir makes a new directory. cd changes the current working directory. Now that we are in the correct directory. We can start by initializing Git.@ Once you have navigated to the correct folder, you can initialize Git on that folder. You just created your first Git Repository.@ Git now knows that it should watch the folder you initiated it on. Git creates a hidden folder to keep track of changes.'],
//       ['Git New Files', 'Git Adding New Files, You just created your first local Git repo. But it is empty. So lets add some files, or create a new file using your favourite text editor. Then save or move it to the folder you just created.If you want to learn how to create a new file using a text editor, you can visit our HTML tutorial. @ls will list the files in the directory. We can see that index.html is there.Then we check the Git status and see if it is a part of our repo@ Now Git is aware of the file, but has not added it to our repository. When you first add files to an empty repository, they are all untracked. To get Git to track them, you need to stage them, or add them to the staging environment. We will cover the staging environment in the next chapter.@'],
//       ['Git Staging Environment','Git Staging Environment, One of the core functions of Git is the concepts of the Staging Environment, and the Commit. As you are working, you may be adding, editing and removing files. But whenever you hit a milestone or finish a part of the work, you should add the files to a Staging Environment. Staged files are files that are ready to be committed to the repository you are working on. You will learn more about commit shortly.For now, we are done working with index.html. So we can add it to the Staging Environment. @ Now the file has been added to the Staging Environment.You can also stage more than one file at a time. Lets add 2 more files to our working folder. Use the text editor again.A README.md file that describes the repository (recommended for all repositories).@ Using --all instead of individual filenames will stage all changes (new, modified, and deleted) files. Now all 3 files are added to the Staging Environment, and we are ready to do our first commit.'],
//       ['Git Commit', 'Git Commit, Since we have finished our work, we are ready move from stage to commit for our repo. Adding commits keep track of our progress and changes as we work. Git considers each commit change point or "save point". It is a point in the project you can go back to if you find a bug, or want to make a change.When we commit, we should always include a message. By adding clear messages to each commit, it is easy for yourself (and others) to see what has changed and when.@ The commit command performs a commit, and the -m "message" adds a message.The Staging Environment has been committed to our repo, with the message:First release of Hello World.Sometimes, when you make small changes, using the staging environment seems like a waste of time. It is possible to commit changes directly, skipping the staging environment. The -a option will automatically stage every changed, already tracked file.@ And check the status of our repository. But this time, we will use the --short option to see the changes in a more compact way.'],
//       ['Git Help', 'Git Help, If you are having trouble remembering commands or options for commands, you can use Git help. There are a couple of different ways you can use the help command in command line:git command -help -  See all the available options for the specific command. git help --all -  See all possible commands.Lets go over the different commands.@ Any time you need some help remembering the specific option for a command, you can use git command -help. You can also use --help instead of -help to open the relevant Git manual page.@ To list all possible commands, use the help --all command. This will display a very long list of commands. If you find yourself stuck in the list view, SHIFT + G to jump the end of the list, then q to exit the view. '],
//       ['Git Branch', 'Working with Git Branches, In Git, a branch is a new/separate version of the main repository.Lets say you have a large project, and you need to update the design on it.How would that work without and with Git. Without Git: Make copies of all the relevant files to avoid impacting the live version, Start working with the design and find that code depend on code in other files, that also need to be changed, Make copies of the dependant files as well. Making sure that every file dependency references the correct file name, There is an unrelated error somewhere else in the project that needs to be fixed , Save all your files, making a note of the names of the copies you were working on, Work on the unrelated error and update the code to fix it, Go back to the design, and finish the work there, Copy the code or rename the files, so the updated design is on the live version.@ Branches allow you to work on different parts of a project without impacting the main branch.When the work is complete, a branch can be merged with the main project.You can even switch between branches and work on different projects without them interfering with each other. Branching in Git is very lightweight and fast.@ Let add some new features to our index.html page.We are working in our local repository, and we do not want to disturb or possibly wreck the main project.Now we created a new branch called "hello-world-images".Lets confirm that we have created a new branch.@ We can see the new branch with the name "hello-world-images", but the beside master specifies that we are currently on that branch.checkout is the command used to check out a branch. Moving us from the current branch, to the one specified at the end of the command.Now we have moved our current workspace from the master branch, to the new branch. Open your favourite editor and make some changes.For this example, we added an image (img_hello_world.jpg) to the working folder and a line of code in the index.html file. @ Now we have a new branch, that is different from the master branch. Using the -b option on checkout will create a new branch, and move to it, if it does not exist. Now lets see just how quick and easy it is to work with different branches, and how well it works. We are currently on the branch hello-world-images. We added an image to this branch, so lets list the files in the current directory.@ '],
//       ['Git Branch Merge', 'Merge Branches, We have the emergency fix ready, and so lets merge the master and emergency-fix branches.First, we need to change to the master branch. Now we merge the current branch (master) with emergency-fix.Since the emergency-fix branch came directly from master, and no other changes had been made to master while we were working, Git sees this as a continuation of master. So it can "Fast-forward", just pointing both master and emergency-fix to the same commit. As master and emergency-fix are essentially the same now, we can delete emergency-fix, as it is no longer needed. Now we can move over to hello-world-images and keep working. Add another image file (img_hello_git.jpg) and change index.html, so it shows it.Now, we are done with our work here and can stage and commit for this branch.We see that index.html has been changed in both branches. Now we are ready to merge hello-world-images into master. But what will happen to the changes we recently made in master?@ The merge failed, as there is conflict between the versions for index.html. Let us check the status: This confirms there is a conflict in index.html, but the image files are ready and staged to be committed.We can see the differences between the versions and edit it like we want.Now we can stage index.html and check the status.The conflict has been fixed, and we can use commit to conclude the merge. And delete the hello-world-images branch. Now you have a better understanding of how branches and merging works. Time to start working with a remote repository. @With a new branch called new-design, edit the code directly without impacting the main branch.Create a new branch from the main project called small-error-fix. Fix the unrelated error and merge the small-error-fix branch with the main branch.You go back to the new-design branch, and finish the work there.'],
//       ['Git GitHub Getting Started', 'GitHub Account, Go to GitHub and sign up for an account. Remember to use the same e-mail address you used in the Git config.Now that you have made a GitHub account, sign in, and create a new Repo. And fill in the relevant details. We will go over the different options and what they mean later. @But for now, choose Public (if you want the repo to be viewable for anyone) or Private (if you want to choose who should be able to view the repo). Either way, you will be able to choose who can contribute to the repo.Then click "Create repository".@ Since we have already set up a local Git repo, we are going to push that to GitHub. Copy the URL, or click the clipboard marked in the image above. Now paste it the following command. git remote add origin URL specifies that you are adding a remote repository, with the specified URL, as an origin to your local Git repo. Now we are going to push our master branch to the origin url, and set it as the default remote branch. Since this is the first time you are connecting to GitHub, you will get some kind of notification you to authenticate this connection.Now, go back into GitHub and see that the repository has been updated. '],
//       ['Git GitHub Edit Code', 'Edit Code in GitHub, In addition to being a host for Git content, GitHub has a very good code editor.Lets try to edit the README.md file in GitHub. Just click the edit button.Add some changes to the code, and then commit the changes. For now, we will "Commit directly to the master branch".Remember to add a description for the commit.That is how you edit code directly in GitHub.'],
//       ['Git Pull from GitHub', 'Pulling to Keep up-to-date with Changes, Pulling to Keep up-to-date with Changes. pull is a combination of 2 different commands:fetch and merge. Lets take a closer look into how fetch, merge, and pull works.fetch gets all the change history of a tracked branch/repo. So, on your local Git, fetch updates to see what has changed on GitHub. Now that we have the recent changes, we can check our status.@ We are behind the origin/master by 1 commit. That should be the updated README.md, but lets double check by viewing the log. That looks as expected, but we can also verify by showing the differences between our local master and origin/master. That looks precisely as expected! Now we can safely merge.@ merge combines the current branch, with a specified branch.We have confirmed that the updates are as expected, and we can merge our current branch (master) with origin/master. Check our status again to confirm we are up to date. But what if you just want to update your local repository, without going through all those steps.@ pull is a combination of fetch and merge. It is used to pull all changes from a remote repository into the branch you are working on.Make another change to the Readme.md file on GitHub.Use pull to update our local Git. That is how you keep your local Git up to date from a remote repository. In the next chapter, we will look closer at how push works on GitHub.'],
//     ])
//   },
//   // Add more programming topics
// ];



